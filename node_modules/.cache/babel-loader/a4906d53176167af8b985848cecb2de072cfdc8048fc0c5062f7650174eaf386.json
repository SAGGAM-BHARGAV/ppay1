{"ast":null,"code":"import { defineIntegration, convertIntegrationFnToClass, SDK_VERSION, getActiveTransaction, captureException, continueTrace, startTransaction, getCurrentScope, spanToTraceHeader, getDynamicSamplingContextFromSpan, setHttpStatus } from '@sentry/core';\nimport { fill, dynamicSamplingContextToSentryBaggageHeader } from '@sentry/utils';\nfunction isResponseObject(response) {\n  return response && response.statusCode !== undefined;\n}\nfunction isErrorEvent(event) {\n  return event && event.error !== undefined;\n}\nfunction sendErrorToSentry(errorData) {\n  captureException(errorData, {\n    mechanism: {\n      type: 'hapi',\n      handled: false,\n      data: {\n        function: 'hapiErrorPlugin'\n      }\n    }\n  });\n}\nconst hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg) {\n    const server = serverArg;\n    server.events.on('request', (request, event) => {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction();\n      if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n      if (transaction) {\n        transaction.setStatus('internal_error');\n        transaction.end();\n      }\n    });\n  }\n};\nconst hapiTracingPlugin = {\n  name: 'SentryHapiTracingPlugin',\n  version: SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg) {\n    const server = serverArg;\n    server.ext('onPreHandler', (request, h) => {\n      const transaction = continueTrace({\n        sentryTrace: request.headers['sentry-trace'] || undefined,\n        baggage: request.headers['baggage'] || undefined\n      }, transactionContext => {\n        // eslint-disable-next-line deprecation/deprecation\n        return startTransaction({\n          ...transactionContext,\n          op: 'hapi.request',\n          name: request.route.path,\n          description: `${request.route.method} ${request.path}`\n        });\n      });\n\n      // eslint-disable-next-line deprecation/deprecation\n      getCurrentScope().setSpan(transaction);\n      return h.continue;\n    });\n    server.ext('onPreResponse', (request, h) => {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction();\n      if (request.response && isResponseObject(request.response) && transaction) {\n        const response = request.response;\n        response.header('sentry-trace', spanToTraceHeader(transaction));\n        const dynamicSamplingContext = dynamicSamplingContextToSentryBaggageHeader(getDynamicSamplingContextFromSpan(transaction));\n        if (dynamicSamplingContext) {\n          response.header('baggage', dynamicSamplingContext);\n        }\n      }\n      return h.continue;\n    });\n    server.ext('onPostHandler', (request, h) => {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction();\n      if (transaction) {\n        if (request.response && isResponseObject(request.response)) {\n          setHttpStatus(transaction, request.response.statusCode);\n        }\n        transaction.end();\n      }\n      return h.continue;\n    });\n  }\n};\nconst INTEGRATION_NAME = 'Hapi';\nconst _hapiIntegration = (options = {}) => {\n  const server = options.server;\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      if (!server) {\n        return;\n      }\n      fill(server, 'start', originalStart => {\n        return async function () {\n          await this.register(hapiTracingPlugin);\n          await this.register(hapiErrorPlugin);\n          const result = originalStart.apply(this);\n          return result;\n        };\n      });\n    }\n  };\n};\nconst hapiIntegration = defineIntegration(_hapiIntegration);\n\n/**\n * Hapi Framework Integration.\n * @deprecated Use `hapiIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst Hapi = convertIntegrationFnToClass(INTEGRATION_NAME, hapiIntegration);\n\n// eslint-disable-next-line deprecation/deprecation\n\nexport { Hapi, hapiErrorPlugin, hapiIntegration, hapiTracingPlugin };","map":{"version":3,"names":["isResponseObject","response","statusCode","undefined","isErrorEvent","event","error","sendErrorToSentry","errorData","captureException","mechanism","type","handled","data","function","hapiErrorPlugin","name","version","SDK_VERSION","register","serverArg","server","events","on","request","transaction","getActiveTransaction","setStatus","end","hapiTracingPlugin","ext","h","continueTrace","sentryTrace","headers","baggage","transactionContext","startTransaction","op","route","path","description","method","getCurrentScope","setSpan","continue","header","spanToTraceHeader","dynamicSamplingContext","dynamicSamplingContextToSentryBaggageHeader","getDynamicSamplingContextFromSpan","setHttpStatus","INTEGRATION_NAME","_hapiIntegration","options","setupOnce","fill","originalStart","result","apply","hapiIntegration","defineIntegration","Hapi","convertIntegrationFnToClass"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\integrations\\hapi\\index.ts"],"sourcesContent":["import {\n  SDK_VERSION,\n  captureException,\n  continueTrace,\n  convertIntegrationFnToClass,\n  defineIntegration,\n  getActiveTransaction,\n  getCurrentScope,\n  getDynamicSamplingContextFromSpan,\n  setHttpStatus,\n  spanToTraceHeader,\n  startTransaction,\n} from '@sentry/core';\nimport type { IntegrationFn } from '@sentry/types';\nimport { dynamicSamplingContextToSentryBaggageHeader, fill } from '@sentry/utils';\n\nimport type { Boom, RequestEvent, ResponseObject, Server } from './types';\n\nfunction isResponseObject(response: ResponseObject | Boom): response is ResponseObject {\n  return response && (response as ResponseObject).statusCode !== undefined;\n}\n\nfunction isErrorEvent(event: RequestEvent): event is RequestEvent {\n  return event && (event as RequestEvent).error !== undefined;\n}\n\nfunction sendErrorToSentry(errorData: object): void {\n  captureException(errorData, {\n    mechanism: {\n      type: 'hapi',\n      handled: false,\n      data: {\n        function: 'hapiErrorPlugin',\n      },\n    },\n  });\n}\n\nexport const hapiErrorPlugin = {\n  name: 'SentryHapiErrorPlugin',\n  version: SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg: Record<any, any>) {\n    const server = serverArg as unknown as Server;\n\n    server.events.on('request', (request, event) => {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction();\n\n      if (isErrorEvent(event)) {\n        sendErrorToSentry(event.error);\n      }\n\n      if (transaction) {\n        transaction.setStatus('internal_error');\n        transaction.end();\n      }\n    });\n  },\n};\n\nexport const hapiTracingPlugin = {\n  name: 'SentryHapiTracingPlugin',\n  version: SDK_VERSION,\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  register: async function (serverArg: Record<any, any>) {\n    const server = serverArg as unknown as Server;\n\n    server.ext('onPreHandler', (request, h) => {\n      const transaction = continueTrace(\n        {\n          sentryTrace: request.headers['sentry-trace'] || undefined,\n          baggage: request.headers['baggage'] || undefined,\n        },\n        transactionContext => {\n          // eslint-disable-next-line deprecation/deprecation\n          return startTransaction({\n            ...transactionContext,\n            op: 'hapi.request',\n            name: request.route.path,\n            description: `${request.route.method} ${request.path}`,\n          });\n        },\n      );\n\n      // eslint-disable-next-line deprecation/deprecation\n      getCurrentScope().setSpan(transaction);\n\n      return h.continue;\n    });\n\n    server.ext('onPreResponse', (request, h) => {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction();\n\n      if (request.response && isResponseObject(request.response) && transaction) {\n        const response = request.response as ResponseObject;\n        response.header('sentry-trace', spanToTraceHeader(transaction));\n\n        const dynamicSamplingContext = dynamicSamplingContextToSentryBaggageHeader(\n          getDynamicSamplingContextFromSpan(transaction),\n        );\n\n        if (dynamicSamplingContext) {\n          response.header('baggage', dynamicSamplingContext);\n        }\n      }\n\n      return h.continue;\n    });\n\n    server.ext('onPostHandler', (request, h) => {\n      // eslint-disable-next-line deprecation/deprecation\n      const transaction = getActiveTransaction();\n\n      if (transaction) {\n        if (request.response && isResponseObject(request.response)) {\n          setHttpStatus(transaction, request.response.statusCode);\n        }\n\n        transaction.end();\n      }\n\n      return h.continue;\n    });\n  },\n};\n\nexport type HapiOptions = {\n  /** Hapi server instance */\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  server?: Record<any, any>;\n};\n\nconst INTEGRATION_NAME = 'Hapi';\n\nconst _hapiIntegration = ((options: HapiOptions = {}) => {\n  const server = options.server as undefined | Server;\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      if (!server) {\n        return;\n      }\n\n      fill(server, 'start', (originalStart: () => void) => {\n        return async function (this: Server) {\n          await this.register(hapiTracingPlugin);\n          await this.register(hapiErrorPlugin);\n          const result = originalStart.apply(this);\n          return result;\n        };\n      });\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const hapiIntegration = defineIntegration(_hapiIntegration);\n\n/**\n * Hapi Framework Integration.\n * @deprecated Use `hapiIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Hapi = convertIntegrationFnToClass(INTEGRATION_NAME, hapiIntegration);\n\n// eslint-disable-next-line deprecation/deprecation\nexport type Hapi = typeof Hapi;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}