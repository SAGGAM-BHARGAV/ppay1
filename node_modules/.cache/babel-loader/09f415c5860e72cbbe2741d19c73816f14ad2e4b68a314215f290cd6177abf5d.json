{"ast":null,"code":"import { _nullishCoalesce } from '@sentry/utils';\nimport * as http from 'http';\nimport 'https';\n\n/**\n* This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n* With the following licence:\n*\n* (The MIT License)\n*\n* Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n*\n* Permission is hereby granted, free of charge, to any person obtaining\n* a copy of this software and associated documentation files (the\n* 'Software'), to deal in the Software without restriction, including\n* without limitation the rights to use, copy, modify, merge, publish,\n* distribute, sublicense, and/or sell copies of the Software, and to\n* permit persons to whom the Software is furnished to do so, subject to\n* the following conditions:*\n*\n* The above copyright notice and this permission notice shall be\n* included in all copies or substantial portions of the Software.*\n*\n* THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n* CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n* TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n* SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n*/\n\nconst INTERNAL = Symbol('AgentBaseInternalState');\nclass Agent extends http.Agent {\n  // Set by `http.Agent` - missing from `@types/node`\n\n  constructor(opts) {\n    super(opts);\n    this[INTERNAL] = {};\n  }\n\n  /**\n   * Determine whether this is an `http` or `https` request.\n   */\n  isSecureEndpoint(options) {\n    if (options) {\n      // First check the `secureEndpoint` property explicitly, since this\n      // means that a parent `Agent` is \"passing through\" to this instance.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      if (typeof options.secureEndpoint === 'boolean') {\n        return options.secureEndpoint;\n      }\n\n      // If no explicit `secure` endpoint, check if `protocol` property is\n      // set. This will usually be the case since using a full string URL\n      // or `URL` instance should be the most common usage.\n      if (typeof options.protocol === 'string') {\n        return options.protocol === 'https:';\n      }\n    }\n\n    // Finally, if no `protocol` property was set, then fall back to\n    // checking the stack trace of the current call stack, and try to\n    // detect the \"https\" module.\n    const {\n      stack\n    } = new Error();\n    if (typeof stack !== 'string') return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n  }\n  createSocket(req, options, cb) {\n    const connectOpts = {\n      ...options,\n      secureEndpoint: this.isSecureEndpoint(options)\n    };\n    Promise.resolve().then(() => this.connect(req, connectOpts)).then(socket => {\n      if (socket instanceof http.Agent) {\n        // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n        return socket.addRequest(req, connectOpts);\n      }\n      this[INTERNAL].currentSocket = socket;\n      // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n      super.createSocket(req, options, cb);\n    }, cb);\n  }\n  createConnection() {\n    const socket = this[INTERNAL].currentSocket;\n    this[INTERNAL].currentSocket = undefined;\n    if (!socket) {\n      throw new Error('No socket was returned in the `connect()` function');\n    }\n    return socket;\n  }\n  get defaultPort() {\n    return _nullishCoalesce(this[INTERNAL].defaultPort, () => this.protocol === 'https:' ? 443 : 80);\n  }\n  set defaultPort(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].defaultPort = v;\n    }\n  }\n  get protocol() {\n    return _nullishCoalesce(this[INTERNAL].protocol, () => this.isSecureEndpoint() ? 'https:' : 'http:');\n  }\n  set protocol(v) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].protocol = v;\n    }\n  }\n}\nexport { Agent };","map":{"version":3,"names":["INTERNAL","Symbol","Agent","http","constructor","opts","isSecureEndpoint","options","secureEndpoint","protocol","stack","Error","split","some","l","indexOf","createSocket","req","cb","connectOpts","Promise","resolve","then","connect","socket","addRequest","currentSocket","createConnection","undefined","defaultPort","_nullishCoalesce","v"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\proxy\\base.ts"],"sourcesContent":["/**\n * This code was originally forked from https://github.com/TooTallNate/proxy-agents/tree/b133295fd16f6475578b6b15bd9b4e33ecb0d0b7\n * With the following licence:\n *\n * (The MIT License)\n *\n * Copyright (c) 2013 Nathan Rajlich <nathan@tootallnate.net>*\n *\n * Permission is hereby granted, free of charge, to any person obtaining\n * a copy of this software and associated documentation files (the\n * 'Software'), to deal in the Software without restriction, including\n * without limitation the rights to use, copy, modify, merge, publish,\n * distribute, sublicense, and/or sell copies of the Software, and to\n * permit persons to whom the Software is furnished to do so, subject to\n * the following conditions:*\n *\n * The above copyright notice and this permission notice shall be\n * included in all copies or substantial portions of the Software.*\n *\n * THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\n * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\n * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\n * CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\n * TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\n * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n */\n\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable jsdoc/require-jsdoc */\nimport * as http from 'http';\nimport type * as net from 'net';\nimport type { Duplex } from 'stream';\nimport type * as tls from 'tls';\n\nexport * from './helpers';\n\ninterface HttpConnectOpts extends net.TcpNetConnectOpts {\n  secureEndpoint: false;\n  protocol?: string;\n}\n\ninterface HttpsConnectOpts extends tls.ConnectionOptions {\n  secureEndpoint: true;\n  protocol?: string;\n  port: number;\n}\n\nexport type AgentConnectOpts = HttpConnectOpts | HttpsConnectOpts;\n\nconst INTERNAL = Symbol('AgentBaseInternalState');\n\ninterface InternalState {\n  defaultPort?: number;\n  protocol?: string;\n  currentSocket?: Duplex;\n}\n\nexport abstract class Agent extends http.Agent {\n  private [INTERNAL]: InternalState;\n\n  // Set by `http.Agent` - missing from `@types/node`\n  options!: Partial<net.TcpNetConnectOpts & tls.ConnectionOptions>;\n  keepAlive!: boolean;\n\n  constructor(opts?: http.AgentOptions) {\n    super(opts);\n    this[INTERNAL] = {};\n  }\n\n  abstract connect(\n    req: http.ClientRequest,\n    options: AgentConnectOpts,\n  ): Promise<Duplex | http.Agent> | Duplex | http.Agent;\n\n  /**\n   * Determine whether this is an `http` or `https` request.\n   */\n  isSecureEndpoint(options?: AgentConnectOpts): boolean {\n    if (options) {\n      // First check the `secureEndpoint` property explicitly, since this\n      // means that a parent `Agent` is \"passing through\" to this instance.\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access\n      if (typeof (options as any).secureEndpoint === 'boolean') {\n        return options.secureEndpoint;\n      }\n\n      // If no explicit `secure` endpoint, check if `protocol` property is\n      // set. This will usually be the case since using a full string URL\n      // or `URL` instance should be the most common usage.\n      if (typeof options.protocol === 'string') {\n        return options.protocol === 'https:';\n      }\n    }\n\n    // Finally, if no `protocol` property was set, then fall back to\n    // checking the stack trace of the current call stack, and try to\n    // detect the \"https\" module.\n    const { stack } = new Error();\n    if (typeof stack !== 'string') return false;\n    return stack.split('\\n').some(l => l.indexOf('(https.js:') !== -1 || l.indexOf('node:https:') !== -1);\n  }\n\n  createSocket(req: http.ClientRequest, options: AgentConnectOpts, cb: (err: Error | null, s?: Duplex) => void): void {\n    const connectOpts = {\n      ...options,\n      secureEndpoint: this.isSecureEndpoint(options),\n    };\n    Promise.resolve()\n      .then(() => this.connect(req, connectOpts))\n      .then(socket => {\n        if (socket instanceof http.Agent) {\n          // @ts-expect-error `addRequest()` isn't defined in `@types/node`\n          return socket.addRequest(req, connectOpts);\n        }\n        this[INTERNAL].currentSocket = socket;\n        // @ts-expect-error `createSocket()` isn't defined in `@types/node`\n        super.createSocket(req, options, cb);\n      }, cb);\n  }\n\n  createConnection(): Duplex {\n    const socket = this[INTERNAL].currentSocket;\n    this[INTERNAL].currentSocket = undefined;\n    if (!socket) {\n      throw new Error('No socket was returned in the `connect()` function');\n    }\n    return socket;\n  }\n\n  get defaultPort(): number {\n    return this[INTERNAL].defaultPort ?? (this.protocol === 'https:' ? 443 : 80);\n  }\n\n  set defaultPort(v: number) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].defaultPort = v;\n    }\n  }\n\n  get protocol(): string {\n    return this[INTERNAL].protocol ?? (this.isSecureEndpoint() ? 'https:' : 'http:');\n  }\n\n  set protocol(v: string) {\n    if (this[INTERNAL]) {\n      this[INTERNAL].protocol = v;\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}