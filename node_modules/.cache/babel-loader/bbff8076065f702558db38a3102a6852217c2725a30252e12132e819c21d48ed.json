{"ast":null,"code":"import { _optionalChain } from '@sentry/utils';\nimport { withMonitor } from '@sentry/core';\nimport { replaceCronNames } from './common.js';\n\n/**\n * Wraps the `node-cron` library with check-in monitoring.\n *\n * ```ts\n * import * as Sentry from \"@sentry/node\";\n * import cron from \"node-cron\";\n *\n * const cronWithCheckIn = Sentry.cron.instrumentNodeCron(cron);\n *\n * cronWithCheckIn.schedule(\n *   \"* * * * *\",\n *   () => {\n *     console.log(\"running a task every minute\");\n *   },\n *   { name: \"my-cron-job\" },\n * );\n * ```\n */\nfunction instrumentNodeCron(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'schedule' && target.schedule) {\n        // When 'get' is called for schedule, return a proxied version of the schedule function\n        return new Proxy(target.schedule, {\n          apply(target, thisArg, argArray) {\n            const [expression,, options] = argArray;\n            if (!_optionalChain([options, 'optionalAccess', _ => _.name])) {\n              throw new Error('Missing \"name\" for scheduled job. A name is required for Sentry check-in monitoring.');\n            }\n            return withMonitor(options.name, () => {\n              return target.apply(thisArg, argArray);\n            }, {\n              schedule: {\n                type: 'crontab',\n                value: replaceCronNames(expression)\n              },\n              timezone: _optionalChain([options, 'optionalAccess', _2 => _2.timezone])\n            });\n          }\n        });\n      } else {\n        return target[prop];\n      }\n    }\n  });\n}\nexport { instrumentNodeCron };","map":{"version":3,"names":["instrumentNodeCron","lib","Proxy","get","target","prop","schedule","apply","thisArg","argArray","expression","options","_optionalChain","_","name","Error","withMonitor","type","value","replaceCronNames","timezone","_2"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\cron\\node-cron.ts"],"sourcesContent":["import { withMonitor } from '@sentry/core';\nimport { replaceCronNames } from './common';\n\nexport interface NodeCronOptions {\n  name: string;\n  timezone?: string;\n}\n\nexport interface NodeCron {\n  schedule: (cronExpression: string, callback: () => void, options: NodeCronOptions) => unknown;\n}\n\n/**\n * Wraps the `node-cron` library with check-in monitoring.\n *\n * ```ts\n * import * as Sentry from \"@sentry/node\";\n * import cron from \"node-cron\";\n *\n * const cronWithCheckIn = Sentry.cron.instrumentNodeCron(cron);\n *\n * cronWithCheckIn.schedule(\n *   \"* * * * *\",\n *   () => {\n *     console.log(\"running a task every minute\");\n *   },\n *   { name: \"my-cron-job\" },\n * );\n * ```\n */\nexport function instrumentNodeCron<T>(lib: Partial<NodeCron> & T): T {\n  return new Proxy(lib, {\n    get(target, prop: keyof NodeCron) {\n      if (prop === 'schedule' && target.schedule) {\n        // When 'get' is called for schedule, return a proxied version of the schedule function\n        return new Proxy(target.schedule, {\n          apply(target, thisArg, argArray: Parameters<NodeCron['schedule']>) {\n            const [expression, , options] = argArray;\n\n            if (!options?.name) {\n              throw new Error('Missing \"name\" for scheduled job. A name is required for Sentry check-in monitoring.');\n            }\n\n            return withMonitor(\n              options.name,\n              () => {\n                return target.apply(thisArg, argArray);\n              },\n              {\n                schedule: { type: 'crontab', value: replaceCronNames(expression) },\n                timezone: options?.timezone,\n              },\n            );\n          },\n        });\n      } else {\n        return target[prop];\n      }\n    },\n  });\n}\n"],"mappings":";;;;AAYA;;;;;;;;;;;;;;;;;;AAkBO,SAASA,kBAAkBA,CAAIC,GAAG,EAA4B;EACnE,OAAO,IAAIC,KAAK,CAACD,GAAG,EAAE;IACpBE,GAAGA,CAACC,MAAM,EAAEC,IAAI,EAAkB;MAChC,IAAIA,IAAA,KAAS,cAAcD,MAAM,CAACE,QAAQ,EAAE;QAClD;QACQ,OAAO,IAAIJ,KAAK,CAACE,MAAM,CAACE,QAAQ,EAAE;UAChCC,KAAKA,CAACH,MAAM,EAAEI,OAAO,EAAEC,QAAQ,EAAoC;YACjE,MAAM,CAACC,UAAU,GAAIC,OAAO,IAAIF,QAAQ;YAExC,IAAI,CAAAG,cAAA,EAACD,OAAO,oBAAAE,CAAA,IAAAA,CAAA,CAAEC,IAAA,EAAI,EAAE;cAClB,MAAM,IAAIC,KAAK,CAAC,sFAAsF,CAAC;YACzG;YAEA,OAAOC,WAAW,CAChBL,OAAO,CAACG,IAAI,EACZ,MAAM;cACJ,OAAOV,MAAM,CAACG,KAAK,CAACC,OAAO,EAAEC,QAAQ,CAAC;YACvC,GACD;cACEH,QAAQ,EAAE;gBAAEW,IAAI,EAAE,SAAS;gBAAEC,KAAK,EAAEC,gBAAgB,CAACT,UAAU;cAAG;cAClEU,QAAQ,EAAAR,cAAA,EAAED,OAAO,oBAAAU,EAAA,IAAAA,EAAA,CAAED,QAAQ;YAC5B,CACf,CAAa;UACF;QACX,CAAS,CAAC;MACV,OAAa;QACL,OAAOhB,MAAM,CAACC,IAAI,CAAC;MACrB;IACD;EACL,CAAG,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}