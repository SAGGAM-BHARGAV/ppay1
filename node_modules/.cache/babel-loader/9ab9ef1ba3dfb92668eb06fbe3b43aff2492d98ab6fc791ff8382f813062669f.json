{"ast":null,"code":"import { _optionalChain } from '@sentry/utils';\nimport { setAsyncContextStrategy, ensureHubOnCarrier, getHubFromCarrier } from '@sentry/core';\nimport * as async_hooks from 'async_hooks';\n\n// eslint-disable-next-line deprecation/deprecation\nlet asyncStorage;\n\n/**\n * Sets the async context strategy to use AsyncLocalStorage which requires Node v12.17.0 or v13.10.0.\n */\nfunction setHooksAsyncContextStrategy() {\n  if (!asyncStorage) {\n    // eslint-disable-next-line deprecation/deprecation\n    asyncStorage = new async_hooks.AsyncLocalStorage();\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  function getCurrentHub() {\n    return asyncStorage.getStore();\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  function createNewHub(parent) {\n    const carrier = {};\n    ensureHubOnCarrier(carrier, parent);\n    return getHubFromCarrier(carrier);\n  }\n  function runWithAsyncContext(callback, options) {\n    const existingHub = getCurrentHub();\n    if (existingHub && _optionalChain([options, 'optionalAccess', _ => _.reuseExisting])) {\n      // We're already in an async context, so we don't need to create a new one\n      // just call the callback with the current hub\n      return callback();\n    }\n    const newHub = createNewHub(existingHub);\n    return asyncStorage.run(newHub, () => {\n      return callback();\n    });\n  }\n  setAsyncContextStrategy({\n    getCurrentHub,\n    runWithAsyncContext\n  });\n}\nexport { setHooksAsyncContextStrategy };","map":{"version":3,"names":["asyncStorage","setHooksAsyncContextStrategy","async_hooks","AsyncLocalStorage","getCurrentHub","getStore","createNewHub","parent","carrier","ensureHubOnCarrier","getHubFromCarrier","runWithAsyncContext","callback","options","existingHub","_optionalChain","_","reuseExisting","newHub","run","setAsyncContextStrategy"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\async\\hooks.ts"],"sourcesContent":["import type { Carrier, Hub, RunWithAsyncContextOptions } from '@sentry/core';\nimport { ensureHubOnCarrier, getHubFromCarrier, setAsyncContextStrategy } from '@sentry/core';\nimport * as async_hooks from 'async_hooks';\n\ninterface AsyncLocalStorage<T> {\n  getStore(): T | undefined;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  run<R, TArgs extends any[]>(store: T, callback: (...args: TArgs) => R, ...args: TArgs): R;\n}\n\ntype AsyncLocalStorageConstructor = { new <T>(): AsyncLocalStorage<T> };\n// AsyncLocalStorage only exists in async_hook after Node v12.17.0 or v13.10.0\ntype NewerAsyncHooks = typeof async_hooks & { AsyncLocalStorage: AsyncLocalStorageConstructor };\n\n// eslint-disable-next-line deprecation/deprecation\nlet asyncStorage: AsyncLocalStorage<Hub>;\n\n/**\n * Sets the async context strategy to use AsyncLocalStorage which requires Node v12.17.0 or v13.10.0.\n */\nexport function setHooksAsyncContextStrategy(): void {\n  if (!asyncStorage) {\n    // eslint-disable-next-line deprecation/deprecation\n    asyncStorage = new (async_hooks as NewerAsyncHooks).AsyncLocalStorage<Hub>();\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  function getCurrentHub(): Hub | undefined {\n    return asyncStorage.getStore();\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  function createNewHub(parent: Hub | undefined): Hub {\n    const carrier: Carrier = {};\n    ensureHubOnCarrier(carrier, parent);\n    return getHubFromCarrier(carrier);\n  }\n\n  function runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions): T {\n    const existingHub = getCurrentHub();\n\n    if (existingHub && options?.reuseExisting) {\n      // We're already in an async context, so we don't need to create a new one\n      // just call the callback with the current hub\n      return callback();\n    }\n\n    const newHub = createNewHub(existingHub);\n\n    return asyncStorage.run(newHub, () => {\n      return callback();\n    });\n  }\n\n  setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });\n}\n"],"mappings":";;;;AAcA;AACA,IAAIA,YAAY;;AAEhB;;;AAGO,SAASC,4BAA4BA,CAAA,EAAS;EACnD,IAAI,CAACD,YAAY,EAAE;IACrB;IACIA,YAAA,GAAe,IAAKE,WAAA,CAAgCC,iBAAiB,EAAO;EAC9E;;EAEF;EACE,SAASC,aAAaA,CAAA,EAAoB;IACxC,OAAOJ,YAAY,CAACK,QAAQ,EAAE;EAChC;;EAEF;EACE,SAASC,YAAYA,CAACC,MAAM,EAAwB;IAClD,MAAMC,OAAA,GAAmB,EAAE;IAC3BC,kBAAkB,CAACD,OAAO,EAAED,MAAM,CAAC;IACnC,OAAOG,iBAAiB,CAACF,OAAO,CAAC;EACnC;EAEA,SAASG,mBAAmBA,CAAIC,QAAQ,EAAWC,OAAO,EAAiC;IACzF,MAAMC,WAAA,GAAcV,aAAa,EAAE;IAEnC,IAAIU,WAAA,IAAAC,cAAA,EAAeF,OAAO,oBAAAG,CAAA,IAAAA,CAAA,CAAEC,aAAA,EAAa,EAAE;MAC/C;MACA;MACM,OAAOL,QAAQ,EAAE;IACnB;IAEA,MAAMM,MAAO,GAAEZ,YAAY,CAACQ,WAAW,CAAC;IAExC,OAAOd,YAAY,CAACmB,GAAG,CAACD,MAAM,EAAE,MAAM;MACpC,OAAON,QAAQ,EAAE;IACvB,CAAK,CAAC;EACJ;EAEAQ,uBAAuB,CAAC;IAAEhB,aAAa;IAAEO;EAAA,CAAqB,CAAC;AACjE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}