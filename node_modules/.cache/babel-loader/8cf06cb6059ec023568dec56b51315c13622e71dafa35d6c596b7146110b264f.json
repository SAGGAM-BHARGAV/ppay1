{"ast":null,"code":"import { withMonitor } from '@sentry/core';\nimport { replaceCronNames } from './common.js';\n\n/**\n * Instruments the `node-schedule` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import * as schedule from 'node-schedule';\n *\n * const scheduleWithCheckIn = Sentry.cron.instrumentNodeSchedule(schedule);\n *\n * const job = scheduleWithCheckIn.scheduleJob('my-cron-job', '* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n * ```\n */\nfunction instrumentNodeSchedule(lib) {\n  return new Proxy(lib, {\n    get(target, prop) {\n      if (prop === 'scheduleJob') {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        return new Proxy(target.scheduleJob, {\n          apply(target, thisArg, argArray) {\n            const [nameOrExpression, expressionOrCallback] = argArray;\n            if (typeof nameOrExpression !== 'string' || typeof expressionOrCallback !== 'string') {\n              throw new Error(\"Automatic instrumentation of 'node-schedule' requires the first parameter of 'scheduleJob' to be a job name string and the second parameter to be a crontab string\");\n            }\n            const monitorSlug = nameOrExpression;\n            const expression = expressionOrCallback;\n            return withMonitor(monitorSlug, () => {\n              return target.apply(thisArg, argArray);\n            }, {\n              schedule: {\n                type: 'crontab',\n                value: replaceCronNames(expression)\n              }\n            });\n          }\n        });\n      }\n      return target[prop];\n    }\n  });\n}\nexport { instrumentNodeSchedule };","map":{"version":3,"names":["instrumentNodeSchedule","lib","Proxy","get","target","prop","scheduleJob","apply","thisArg","argArray","nameOrExpression","expressionOrCallback","Error","monitorSlug","expression","withMonitor","schedule","type","value","replaceCronNames"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\cron\\node-schedule.ts"],"sourcesContent":["import { withMonitor } from '@sentry/core';\nimport { replaceCronNames } from './common';\n\nexport interface NodeSchedule {\n  scheduleJob(\n    nameOrExpression: string | Date | object,\n    expressionOrCallback: string | Date | object | (() => void),\n    callback?: () => void,\n  ): unknown;\n}\n\n/**\n * Instruments the `node-schedule` library to send a check-in event to Sentry for each job execution.\n *\n * ```ts\n * import * as Sentry from '@sentry/node';\n * import * as schedule from 'node-schedule';\n *\n * const scheduleWithCheckIn = Sentry.cron.instrumentNodeSchedule(schedule);\n *\n * const job = scheduleWithCheckIn.scheduleJob('my-cron-job', '* * * * *', () => {\n *  console.log('You will see this message every minute');\n * });\n * ```\n */\nexport function instrumentNodeSchedule<T>(lib: T & NodeSchedule): T {\n  return new Proxy(lib, {\n    get(target, prop: keyof NodeSchedule) {\n      if (prop === 'scheduleJob') {\n        // eslint-disable-next-line @typescript-eslint/unbound-method\n        return new Proxy(target.scheduleJob, {\n          apply(target, thisArg, argArray: Parameters<NodeSchedule['scheduleJob']>) {\n            const [nameOrExpression, expressionOrCallback] = argArray;\n\n            if (typeof nameOrExpression !== 'string' || typeof expressionOrCallback !== 'string') {\n              throw new Error(\n                \"Automatic instrumentation of 'node-schedule' requires the first parameter of 'scheduleJob' to be a job name string and the second parameter to be a crontab string\",\n              );\n            }\n\n            const monitorSlug = nameOrExpression;\n            const expression = expressionOrCallback;\n\n            return withMonitor(\n              monitorSlug,\n              () => {\n                return target.apply(thisArg, argArray);\n              },\n              {\n                schedule: { type: 'crontab', value: replaceCronNames(expression) },\n              },\n            );\n          },\n        });\n      }\n\n      return target[prop];\n    },\n  });\n}\n"],"mappings":";;;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,sBAAsBA,CAAIC,GAAG,EAAuB;EAClE,OAAO,IAAIC,KAAK,CAACD,GAAG,EAAE;IACpBE,GAAGA,CAACC,MAAM,EAAEC,IAAI,EAAsB;MACpC,IAAIA,IAAK,KAAI,aAAa,EAAE;QAClC;QACQ,OAAO,IAAIH,KAAK,CAACE,MAAM,CAACE,WAAW,EAAE;UACnCC,KAAKA,CAACH,MAAM,EAAEI,OAAO,EAAEC,QAAQ,EAA2C;YACxE,MAAM,CAACC,gBAAgB,EAAEC,oBAAoB,IAAIF,QAAQ;YAEzD,IAAI,OAAOC,gBAAiB,KAAI,QAAS,IAAG,OAAOC,oBAAA,KAAyB,QAAQ,EAAE;cACpF,MAAM,IAAIC,KAAK,CACb,oKAChB,CAAe;YACf;YAEY,MAAMC,WAAY,GAAEH,gBAAgB;YACpC,MAAMI,UAAW,GAAEH,oBAAoB;YAEvC,OAAOI,WAAW,CAChBF,WAAW,EACX,MAAM;cACJ,OAAOT,MAAM,CAACG,KAAK,CAACC,OAAO,EAAEC,QAAQ,CAAC;YACtD,CAAe,EACD;cACEO,QAAQ,EAAE;gBAAEC,IAAI,EAAE,SAAS;gBAAEC,KAAK,EAAEC,gBAAgB,CAACL,UAAU;cAAA;YAC/E,CACA,CAAa;UACb;QACA,CAAS,CAAC;MACV;MAEM,OAAOV,MAAM,CAACC,IAAI,CAAC;IACzB;EACA,CAAG,CAAC;AACJ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}