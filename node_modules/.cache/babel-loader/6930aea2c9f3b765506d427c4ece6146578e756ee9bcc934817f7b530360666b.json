{"ast":null,"code":"import * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Recursively read the contents of a directory.\n *\n * @param targetDir Absolute or relative path of the directory to scan. All returned paths will be relative to this\n * directory.\n * @returns Array holding all relative paths\n * @deprecated This function will be removed in the next major version.\n */\nfunction deepReadDirSync(targetDir) {\n  const targetDirAbsPath = path.resolve(targetDir);\n  if (!fs.existsSync(targetDirAbsPath)) {\n    throw new Error(`Cannot read contents of ${targetDirAbsPath}. Directory does not exist.`);\n  }\n  if (!fs.statSync(targetDirAbsPath).isDirectory()) {\n    throw new Error(`Cannot read contents of ${targetDirAbsPath}, because it is not a directory.`);\n  }\n\n  // This does the same thing as its containing function, `deepReadDirSync` (except that - purely for convenience - it\n  // deals in absolute paths rather than relative ones). We need this to be separate from the outer function to preserve\n  // the difference between `targetDirAbsPath` and `currentDirAbsPath`.\n  const deepReadCurrentDir = currentDirAbsPath => {\n    return fs.readdirSync(currentDirAbsPath).reduce((absPaths, itemName) => {\n      const itemAbsPath = path.join(currentDirAbsPath, itemName);\n      if (fs.statSync(itemAbsPath).isDirectory()) {\n        return absPaths.concat(deepReadCurrentDir(itemAbsPath));\n      }\n      absPaths.push(itemAbsPath);\n      return absPaths;\n    }, []);\n  };\n  return deepReadCurrentDir(targetDirAbsPath).map(absPath => path.relative(targetDirAbsPath, absPath));\n}\nexport { deepReadDirSync };","map":{"version":3,"names":["deepReadDirSync","targetDir","targetDirAbsPath","path","resolve","fs","existsSync","Error","statSync","isDirectory","deepReadCurrentDir","currentDirAbsPath","readdirSync","reduce","absPaths","itemName","itemAbsPath","join","concat","push","map","absPath","relative"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\utils.ts"],"sourcesContent":["import * as fs from 'fs';\nimport * as path from 'path';\n\n/**\n * Recursively read the contents of a directory.\n *\n * @param targetDir Absolute or relative path of the directory to scan. All returned paths will be relative to this\n * directory.\n * @returns Array holding all relative paths\n * @deprecated This function will be removed in the next major version.\n */\nexport function deepReadDirSync(targetDir: string): string[] {\n  const targetDirAbsPath = path.resolve(targetDir);\n\n  if (!fs.existsSync(targetDirAbsPath)) {\n    throw new Error(`Cannot read contents of ${targetDirAbsPath}. Directory does not exist.`);\n  }\n\n  if (!fs.statSync(targetDirAbsPath).isDirectory()) {\n    throw new Error(`Cannot read contents of ${targetDirAbsPath}, because it is not a directory.`);\n  }\n\n  // This does the same thing as its containing function, `deepReadDirSync` (except that - purely for convenience - it\n  // deals in absolute paths rather than relative ones). We need this to be separate from the outer function to preserve\n  // the difference between `targetDirAbsPath` and `currentDirAbsPath`.\n  const deepReadCurrentDir = (currentDirAbsPath: string): string[] => {\n    return fs.readdirSync(currentDirAbsPath).reduce((absPaths: string[], itemName: string) => {\n      const itemAbsPath = path.join(currentDirAbsPath, itemName);\n\n      if (fs.statSync(itemAbsPath).isDirectory()) {\n        return absPaths.concat(deepReadCurrentDir(itemAbsPath));\n      }\n\n      absPaths.push(itemAbsPath);\n      return absPaths;\n    }, []);\n  };\n\n  return deepReadCurrentDir(targetDirAbsPath).map(absPath => path.relative(targetDirAbsPath, absPath));\n}\n"],"mappings":";;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASA,eAAeA,CAACC,SAAS,EAAoB;EAC3D,MAAMC,gBAAA,GAAmBC,IAAI,CAACC,OAAO,CAACH,SAAS,CAAC;EAEhD,IAAI,CAACI,EAAE,CAACC,UAAU,CAACJ,gBAAgB,CAAC,EAAE;IACpC,MAAM,IAAIK,KAAK,CAAE,2BAA0BL,gBAAiB,6BAA4B,CAAC;EAC7F;EAEE,IAAI,CAACG,EAAE,CAACG,QAAQ,CAACN,gBAAgB,CAAC,CAACO,WAAW,EAAE,EAAE;IAChD,MAAM,IAAIF,KAAK,CAAE,2BAA0BL,gBAAiB,kCAAiC,CAAC;EAClG;;EAEA;EACA;EACA;EACE,MAAMQ,kBAAA,GAAsBC,iBAAiB,IAAuB;IAClE,OAAON,EAAE,CAACO,WAAW,CAACD,iBAAiB,CAAC,CAACE,MAAM,CAAC,CAACC,QAAQ,EAAYC,QAAQ,KAAa;MACxF,MAAMC,WAAY,GAAEb,IAAI,CAACc,IAAI,CAACN,iBAAiB,EAAEI,QAAQ,CAAC;MAE1D,IAAIV,EAAE,CAACG,QAAQ,CAACQ,WAAW,CAAC,CAACP,WAAW,EAAE,EAAE;QAC1C,OAAOK,QAAQ,CAACI,MAAM,CAACR,kBAAkB,CAACM,WAAW,CAAC,CAAC;MAC/D;MAEMF,QAAQ,CAACK,IAAI,CAACH,WAAW,CAAC;MAC1B,OAAOF,QAAQ;IACrB,CAAK,EAAE,EAAE,CAAC;EACV,CAAG;EAED,OAAOJ,kBAAkB,CAACR,gBAAgB,CAAC,CAACkB,GAAG,CAACC,OAAA,IAAWlB,IAAI,CAACmB,QAAQ,CAACpB,gBAAgB,EAAEmB,OAAO,CAAC,CAAC;AACtG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}