{"ast":null,"code":"import { _optionalChain } from '@sentry/utils';\nimport { inboundFiltersIntegration, functionToStringIntegration, linkedErrorsIntegration, requestDataIntegration, getMainCarrier, getIntegrationsToSetup, initAndBind, getClient, startSession, getIsolationScope, endSession, getCurrentScope } from '@sentry/core';\nimport { createStackParser, nodeStackLineParser, stackParserFromStackParserOptions, GLOBAL_OBJ, propagationContextFromHeaders } from '@sentry/utils';\nimport { setNodeAsyncContextStrategy } from './async/index.js';\nimport { NodeClient } from './client.js';\nimport { consoleIntegration } from './integrations/console.js';\nimport { nodeContextIntegration } from './integrations/context.js';\nimport { contextLinesIntegration } from './integrations/contextlines.js';\nimport { httpIntegration } from './integrations/http.js';\nimport { localVariablesIntegration } from './integrations/local-variables/index.js';\nimport { modulesIntegration } from './integrations/modules.js';\nimport { onUncaughtExceptionIntegration } from './integrations/onuncaughtexception.js';\nimport { onUnhandledRejectionIntegration } from './integrations/onunhandledrejection.js';\nimport { spotlightIntegration } from './integrations/spotlight.js';\nimport { nativeNodeFetchintegration } from './integrations/undici/index.js';\nimport { createGetModuleFromFilename } from './module.js';\nimport { makeNodeTransport } from './transports/http.js';\n\n/* eslint-disable max-lines */\n\n/** @deprecated Use `getDefaultIntegrations(options)` instead. */\nconst defaultIntegrations = [\n// Common\ninboundFiltersIntegration(), functionToStringIntegration(), linkedErrorsIntegration(), requestDataIntegration(),\n// Native Wrappers\nconsoleIntegration(), httpIntegration(), nativeNodeFetchintegration(),\n// Global Handlers\nonUncaughtExceptionIntegration(), onUnhandledRejectionIntegration(),\n// Event Info\ncontextLinesIntegration(), localVariablesIntegration(), nodeContextIntegration(), modulesIntegration()];\n\n/** Get the default integrations for the Node SDK. */\nfunction getDefaultIntegrations(_options) {\n  const carrier = getMainCarrier();\n  const autoloadedIntegrations = _optionalChain([carrier, 'access', _ => _.__SENTRY__, 'optionalAccess', _2 => _2.integrations]) || [];\n  return [\n  // eslint-disable-next-line deprecation/deprecation\n  ...defaultIntegrations, ...autoloadedIntegrations];\n}\n\n/**\n * The Sentry Node SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * main entry module. To set context information or send manual events, use the\n * provided methods.\n *\n * @example\n * ```\n *\n * const { init } = require('@sentry/node');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { configureScope } = require('@sentry/node');\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { addBreadcrumb } = require('@sentry/node');\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const Sentry = require('@sentry/node');\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link NodeOptions} for documentation on configuration options.\n */\n// eslint-disable-next-line complexity\nfunction init(options = {}) {\n  setNodeAsyncContextStrategy();\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrations();\n  }\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n  const sentryTracesSampleRate = process.env.SENTRY_TRACES_SAMPLE_RATE;\n  if (options.tracesSampleRate === undefined && sentryTracesSampleRate) {\n    const tracesSampleRate = parseFloat(sentryTracesSampleRate);\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n  if (options.release === undefined) {\n    const detectedRelease = getSentryRelease();\n    if (detectedRelease !== undefined) {\n      options.release = detectedRelease;\n    } else {\n      // If release is not provided, then we should disable autoSessionTracking\n      options.autoSessionTracking = false;\n    }\n  }\n  if (options.environment === undefined && process.env.SENTRY_ENVIRONMENT) {\n    options.environment = process.env.SENTRY_ENVIRONMENT;\n  }\n  if (options.autoSessionTracking === undefined && options.dsn !== undefined) {\n    options.autoSessionTracking = true;\n  }\n  if (options.instrumenter === undefined) {\n    options.instrumenter = 'sentry';\n  }\n\n  // TODO(v7): Refactor this to reduce the logic above\n  const clientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || makeNodeTransport\n  };\n  initAndBind(options.clientClass || NodeClient, clientOptions);\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n  updateScopeFromEnvVariables();\n  if (options.spotlight) {\n    const client = getClient();\n    if (client && client.addIntegration) {\n      // force integrations to be setup even if no DSN was set\n      // If they have already been added before, they will be ignored anyhow\n      const integrations = client.getOptions().integrations;\n      for (const integration of integrations) {\n        client.addIntegration(integration);\n      }\n      client.addIntegration(spotlightIntegration({\n        sidecarUrl: typeof options.spotlight === 'string' ? options.spotlight : undefined\n      }));\n    }\n  }\n}\n\n/**\n * Function that takes an instance of NodeClient and checks if autoSessionTracking option is enabled for that client\n */\nfunction isAutoSessionTrackingEnabled(client) {\n  if (client === undefined) {\n    return false;\n  }\n  const clientOptions = client && client.getOptions();\n  if (clientOptions && clientOptions.autoSessionTracking !== undefined) {\n    return clientOptions.autoSessionTracking;\n  }\n  return false;\n}\n\n/**\n * Returns a release dynamically from environment variables.\n */\nfunction getSentryRelease(fallback) {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (GLOBAL_OBJ.SENTRY_RELEASE && GLOBAL_OBJ.SENTRY_RELEASE.id) {\n    return GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n  return (\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env.GITHUB_SHA ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env.COMMIT_REF ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env.VERCEL_GIT_COMMIT_SHA || process.env.VERCEL_GITHUB_COMMIT_SHA || process.env.VERCEL_GITLAB_COMMIT_SHA || process.env.VERCEL_BITBUCKET_COMMIT_SHA ||\n    // Zeit (now known as Vercel)\n    process.env.ZEIT_GITHUB_COMMIT_SHA || process.env.ZEIT_GITLAB_COMMIT_SHA || process.env.ZEIT_BITBUCKET_COMMIT_SHA ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env.CF_PAGES_COMMIT_SHA || fallback\n  );\n}\n\n/** Node.js stack parser */\nconst defaultStackParser = createStackParser(nodeStackLineParser(createGetModuleFromFilename()));\n\n/**\n * Enable automatic Session Tracking for the node process.\n */\nfunction startSessionTracking() {\n  startSession();\n  // Emitted in the case of healthy sessions, error of `mechanism.handled: true` and unhandledrejections because\n  // The 'beforeExit' event is not emitted for conditions causing explicit termination,\n  // such as calling process.exit() or uncaught exceptions.\n  // Ref: https://nodejs.org/api/process.html#process_event_beforeexit\n  process.on('beforeExit', () => {\n    const session = getIsolationScope().getSession();\n    const terminalStates = ['exited', 'crashed'];\n    // Only call endSession, if the Session exists on Scope and SessionStatus is not a\n    // Terminal Status i.e. Exited or Crashed because\n    // \"When a session is moved away from ok it must not be updated anymore.\"\n    // Ref: https://develop.sentry.dev/sdk/sessions/\n    if (session && !terminalStates.includes(session.status)) {\n      endSession();\n    }\n  });\n}\n\n/**\n * Update scope and propagation context based on environmental variables.\n *\n * See https://github.com/getsentry/rfcs/blob/main/text/0071-continue-trace-over-process-boundaries.md\n * for more details.\n */\nfunction updateScopeFromEnvVariables() {\n  const sentryUseEnvironment = (process.env.SENTRY_USE_ENVIRONMENT || '').toLowerCase();\n  if (!['false', 'n', 'no', 'off', '0'].includes(sentryUseEnvironment)) {\n    const sentryTraceEnv = process.env.SENTRY_TRACE;\n    const baggageEnv = process.env.SENTRY_BAGGAGE;\n    const propagationContext = propagationContextFromHeaders(sentryTraceEnv, baggageEnv);\n    getCurrentScope().setPropagationContext(propagationContext);\n  }\n}\nexport { defaultIntegrations, defaultStackParser, getDefaultIntegrations, getSentryRelease, init, isAutoSessionTrackingEnabled };","map":{"version":3,"names":["defaultIntegrations","inboundFiltersIntegration","functionToStringIntegration","linkedErrorsIntegration","requestDataIntegration","consoleIntegration","httpIntegration","nativeNodeFetchintegration","onUncaughtExceptionIntegration","onUnhandledRejectionIntegration","contextLinesIntegration","localVariablesIntegration","nodeContextIntegration","modulesIntegration","getDefaultIntegrations","_options","carrier","getMainCarrier","autoloadedIntegrations","_optionalChain","_","__SENTRY__","_2","integrations","init","options","setNodeAsyncContextStrategy","undefined","dsn","process","env","SENTRY_DSN","sentryTracesSampleRate","SENTRY_TRACES_SAMPLE_RATE","tracesSampleRate","parseFloat","isFinite","release","detectedRelease","getSentryRelease","autoSessionTracking","environment","SENTRY_ENVIRONMENT","instrumenter","clientOptions","stackParser","stackParserFromStackParserOptions","defaultStackParser","getIntegrationsToSetup","transport","makeNodeTransport","initAndBind","clientClass","NodeClient","startSessionTracking","updateScopeFromEnvVariables","spotlight","client","getClient","addIntegration","getOptions","integration","spotlightIntegration","sidecarUrl","isAutoSessionTrackingEnabled","fallback","SENTRY_RELEASE","GLOBAL_OBJ","id","GITHUB_SHA","COMMIT_REF","VERCEL_GIT_COMMIT_SHA","VERCEL_GITHUB_COMMIT_SHA","VERCEL_GITLAB_COMMIT_SHA","VERCEL_BITBUCKET_COMMIT_SHA","ZEIT_GITHUB_COMMIT_SHA","ZEIT_GITLAB_COMMIT_SHA","ZEIT_BITBUCKET_COMMIT_SHA","CF_PAGES_COMMIT_SHA","createStackParser","nodeStackLineParser","createGetModuleFromFilename","startSession","on","session","getIsolationScope","getSession","terminalStates","includes","status","endSession","sentryUseEnvironment","SENTRY_USE_ENVIRONMENT","toLowerCase","sentryTraceEnv","SENTRY_TRACE","baggageEnv","SENTRY_BAGGAGE","propagationContext","propagationContextFromHeaders","getCurrentScope","setPropagationContext"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\sdk.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport {\n  endSession,\n  functionToStringIntegration,\n  getClient,\n  getCurrentScope,\n  getIntegrationsToSetup,\n  getIsolationScope,\n  getMainCarrier,\n  inboundFiltersIntegration,\n  initAndBind,\n  linkedErrorsIntegration,\n  requestDataIntegration,\n  startSession,\n} from '@sentry/core';\nimport type { Integration, Options, SessionStatus, StackParser } from '@sentry/types';\nimport {\n  GLOBAL_OBJ,\n  createStackParser,\n  nodeStackLineParser,\n  propagationContextFromHeaders,\n  stackParserFromStackParserOptions,\n} from '@sentry/utils';\n\nimport { setNodeAsyncContextStrategy } from './async';\nimport { NodeClient } from './client';\nimport { consoleIntegration } from './integrations/console';\nimport { nodeContextIntegration } from './integrations/context';\nimport { contextLinesIntegration } from './integrations/contextlines';\nimport { httpIntegration } from './integrations/http';\nimport { localVariablesIntegration } from './integrations/local-variables';\nimport { modulesIntegration } from './integrations/modules';\nimport { onUncaughtExceptionIntegration } from './integrations/onuncaughtexception';\nimport { onUnhandledRejectionIntegration } from './integrations/onunhandledrejection';\nimport { spotlightIntegration } from './integrations/spotlight';\nimport { nativeNodeFetchintegration } from './integrations/undici';\nimport { createGetModuleFromFilename } from './module';\nimport { makeNodeTransport } from './transports';\nimport type { NodeClientOptions, NodeOptions } from './types';\n\n/** @deprecated Use `getDefaultIntegrations(options)` instead. */\nexport const defaultIntegrations = [\n  // Common\n  inboundFiltersIntegration(),\n  functionToStringIntegration(),\n  linkedErrorsIntegration(),\n  requestDataIntegration(),\n  // Native Wrappers\n  consoleIntegration(),\n  httpIntegration(),\n  nativeNodeFetchintegration(),\n  // Global Handlers\n  onUncaughtExceptionIntegration(),\n  onUnhandledRejectionIntegration(),\n  // Event Info\n  contextLinesIntegration(),\n  localVariablesIntegration(),\n  nodeContextIntegration(),\n  modulesIntegration(),\n];\n\n/** Get the default integrations for the Node SDK. */\nexport function getDefaultIntegrations(_options: Options): Integration[] {\n  const carrier = getMainCarrier();\n\n  const autoloadedIntegrations = carrier.__SENTRY__?.integrations || [];\n\n  return [\n    // eslint-disable-next-line deprecation/deprecation\n    ...defaultIntegrations,\n    ...autoloadedIntegrations,\n  ];\n}\n\n/**\n * The Sentry Node SDK Client.\n *\n * To use this SDK, call the {@link init} function as early as possible in the\n * main entry module. To set context information or send manual events, use the\n * provided methods.\n *\n * @example\n * ```\n *\n * const { init } = require('@sentry/node');\n *\n * init({\n *   dsn: '__DSN__',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { configureScope } = require('@sentry/node');\n * configureScope((scope: Scope) => {\n *   scope.setExtra({ battery: 0.7 });\n *   scope.setTag({ user_mode: 'admin' });\n *   scope.setUser({ id: '4711' });\n * });\n * ```\n *\n * @example\n * ```\n *\n * const { addBreadcrumb } = require('@sentry/node');\n * addBreadcrumb({\n *   message: 'My Breadcrumb',\n *   // ...\n * });\n * ```\n *\n * @example\n * ```\n *\n * const Sentry = require('@sentry/node');\n * Sentry.captureMessage('Hello, world!');\n * Sentry.captureException(new Error('Good bye'));\n * Sentry.captureEvent({\n *   message: 'Manual',\n *   stacktrace: [\n *     // ...\n *   ],\n * });\n * ```\n *\n * @see {@link NodeOptions} for documentation on configuration options.\n */\n// eslint-disable-next-line complexity\nexport function init(options: NodeOptions = {}): void {\n  setNodeAsyncContextStrategy();\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrations(options);\n  }\n\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n\n  const sentryTracesSampleRate = process.env.SENTRY_TRACES_SAMPLE_RATE;\n  if (options.tracesSampleRate === undefined && sentryTracesSampleRate) {\n    const tracesSampleRate = parseFloat(sentryTracesSampleRate);\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n\n  if (options.release === undefined) {\n    const detectedRelease = getSentryRelease();\n    if (detectedRelease !== undefined) {\n      options.release = detectedRelease;\n    } else {\n      // If release is not provided, then we should disable autoSessionTracking\n      options.autoSessionTracking = false;\n    }\n  }\n\n  if (options.environment === undefined && process.env.SENTRY_ENVIRONMENT) {\n    options.environment = process.env.SENTRY_ENVIRONMENT;\n  }\n\n  if (options.autoSessionTracking === undefined && options.dsn !== undefined) {\n    options.autoSessionTracking = true;\n  }\n\n  if (options.instrumenter === undefined) {\n    options.instrumenter = 'sentry';\n  }\n\n  // TODO(v7): Refactor this to reduce the logic above\n  const clientOptions: NodeClientOptions = {\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || defaultStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || makeNodeTransport,\n  };\n\n  initAndBind(options.clientClass || NodeClient, clientOptions);\n\n  if (options.autoSessionTracking) {\n    startSessionTracking();\n  }\n\n  updateScopeFromEnvVariables();\n\n  if (options.spotlight) {\n    const client = getClient();\n    if (client && client.addIntegration) {\n      // force integrations to be setup even if no DSN was set\n      // If they have already been added before, they will be ignored anyhow\n      const integrations = client.getOptions().integrations;\n      for (const integration of integrations) {\n        client.addIntegration(integration);\n      }\n      client.addIntegration(\n        spotlightIntegration({ sidecarUrl: typeof options.spotlight === 'string' ? options.spotlight : undefined }),\n      );\n    }\n  }\n}\n\n/**\n * Function that takes an instance of NodeClient and checks if autoSessionTracking option is enabled for that client\n */\nexport function isAutoSessionTrackingEnabled(client?: NodeClient): boolean {\n  if (client === undefined) {\n    return false;\n  }\n  const clientOptions = client && client.getOptions();\n  if (clientOptions && clientOptions.autoSessionTracking !== undefined) {\n    return clientOptions.autoSessionTracking;\n  }\n  return false;\n}\n\n/**\n * Returns a release dynamically from environment variables.\n */\nexport function getSentryRelease(fallback?: string): string | undefined {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (GLOBAL_OBJ.SENTRY_RELEASE && GLOBAL_OBJ.SENTRY_RELEASE.id) {\n    return GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  return (\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env.GITHUB_SHA ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env.COMMIT_REF ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env.VERCEL_GIT_COMMIT_SHA ||\n    process.env.VERCEL_GITHUB_COMMIT_SHA ||\n    process.env.VERCEL_GITLAB_COMMIT_SHA ||\n    process.env.VERCEL_BITBUCKET_COMMIT_SHA ||\n    // Zeit (now known as Vercel)\n    process.env.ZEIT_GITHUB_COMMIT_SHA ||\n    process.env.ZEIT_GITLAB_COMMIT_SHA ||\n    process.env.ZEIT_BITBUCKET_COMMIT_SHA ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env.CF_PAGES_COMMIT_SHA ||\n    fallback\n  );\n}\n\n/** Node.js stack parser */\nexport const defaultStackParser: StackParser = createStackParser(nodeStackLineParser(createGetModuleFromFilename()));\n\n/**\n * Enable automatic Session Tracking for the node process.\n */\nfunction startSessionTracking(): void {\n  startSession();\n  // Emitted in the case of healthy sessions, error of `mechanism.handled: true` and unhandledrejections because\n  // The 'beforeExit' event is not emitted for conditions causing explicit termination,\n  // such as calling process.exit() or uncaught exceptions.\n  // Ref: https://nodejs.org/api/process.html#process_event_beforeexit\n  process.on('beforeExit', () => {\n    const session = getIsolationScope().getSession();\n    const terminalStates: SessionStatus[] = ['exited', 'crashed'];\n    // Only call endSession, if the Session exists on Scope and SessionStatus is not a\n    // Terminal Status i.e. Exited or Crashed because\n    // \"When a session is moved away from ok it must not be updated anymore.\"\n    // Ref: https://develop.sentry.dev/sdk/sessions/\n    if (session && !terminalStates.includes(session.status)) {\n      endSession();\n    }\n  });\n}\n\n/**\n * Update scope and propagation context based on environmental variables.\n *\n * See https://github.com/getsentry/rfcs/blob/main/text/0071-continue-trace-over-process-boundaries.md\n * for more details.\n */\nfunction updateScopeFromEnvVariables(): void {\n  const sentryUseEnvironment = (process.env.SENTRY_USE_ENVIRONMENT || '').toLowerCase();\n  if (!['false', 'n', 'no', 'off', '0'].includes(sentryUseEnvironment)) {\n    const sentryTraceEnv = process.env.SENTRY_TRACE;\n    const baggageEnv = process.env.SENTRY_BAGGAGE;\n    const propagationContext = propagationContextFromHeaders(sentryTraceEnv, baggageEnv);\n    getCurrentScope().setPropagationContext(propagationContext);\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}