{"ast":null,"code":"import { posix, sep } from 'path';\nimport { dirname } from '@sentry/utils';\n\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path) {\n  return path.replace(/^[A-Z]:/, '') // remove Windows-style prefix\n  .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n/** Creates a function that gets the module name from a filename */\nfunction createGetModuleFromFilename(basePath = process.argv[1] ? dirname(process.argv[1]) : process.cwd(), isWindows = sep === '\\\\') {\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n  return filename => {\n    if (!filename) {\n      return;\n    }\n    const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n\n    // eslint-disable-next-line prefer-const\n    let {\n      dir,\n      base: file,\n      ext\n    } = posix.parse(normalizedFilename);\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n      file = file.slice(0, ext.length * -1);\n    }\n    if (!dir) {\n      // No dirname whatsoever\n      dir = '.';\n    }\n    const n = dir.lastIndexOf('/node_modules');\n    if (n > -1) {\n      return `${dir.slice(n + 14).replace(/\\//g, '.')}:${file}`;\n    }\n\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    if (dir.startsWith(normalizedBase)) {\n      let moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\n      if (moduleName) {\n        moduleName += ':';\n      }\n      moduleName += file;\n      return moduleName;\n    }\n    return file;\n  };\n}\nexport { createGetModuleFromFilename };","map":{"version":3,"names":["normalizeWindowsPath","path","replace","createGetModuleFromFilename","basePath","process","argv","dirname","cwd","isWindows","sep","normalizedBase","filename","normalizedFilename","dir","base","file","ext","posix","parse","slice","length","n","lastIndexOf","startsWith","moduleName"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\module.ts"],"sourcesContent":["import { posix, sep } from 'path';\nimport { dirname } from '@sentry/utils';\n\n/** normalizes Windows paths */\nfunction normalizeWindowsPath(path: string): string {\n  return path\n    .replace(/^[A-Z]:/, '') // remove Windows-style prefix\n    .replace(/\\\\/g, '/'); // replace all `\\` instances with `/`\n}\n\n/** Creates a function that gets the module name from a filename */\nexport function createGetModuleFromFilename(\n  basePath: string = process.argv[1] ? dirname(process.argv[1]) : process.cwd(),\n  isWindows: boolean = sep === '\\\\',\n): (filename: string | undefined) => string | undefined {\n  const normalizedBase = isWindows ? normalizeWindowsPath(basePath) : basePath;\n\n  return (filename: string | undefined) => {\n    if (!filename) {\n      return;\n    }\n\n    const normalizedFilename = isWindows ? normalizeWindowsPath(filename) : filename;\n\n    // eslint-disable-next-line prefer-const\n    let { dir, base: file, ext } = posix.parse(normalizedFilename);\n\n    if (ext === '.js' || ext === '.mjs' || ext === '.cjs') {\n      file = file.slice(0, ext.length * -1);\n    }\n\n    if (!dir) {\n      // No dirname whatsoever\n      dir = '.';\n    }\n\n    const n = dir.lastIndexOf('/node_modules');\n    if (n > -1) {\n      return `${dir.slice(n + 14).replace(/\\//g, '.')}:${file}`;\n    }\n\n    // Let's see if it's a part of the main module\n    // To be a part of main module, it has to share the same base\n    if (dir.startsWith(normalizedBase)) {\n      let moduleName = dir.slice(normalizedBase.length + 1).replace(/\\//g, '.');\n\n      if (moduleName) {\n        moduleName += ':';\n      }\n      moduleName += file;\n\n      return moduleName;\n    }\n\n    return file;\n  };\n}\n"],"mappings":";;;AAGA;AACA,SAASA,oBAAoBA,CAACC,IAAI,EAAkB;EAClD,OAAOA,IAAA,CACJC,OAAO,CAAC,SAAS,EAAE,EAAE;EAAA,CACrBA,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;AACxB;;AAEA;AACO,SAASC,2BAA2BA,CACzCC,QAAQ,GAAWC,OAAO,CAACC,IAAI,CAAC,CAAC,CAAE,GAAEC,OAAO,CAACF,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,IAAID,OAAO,CAACG,GAAG,EAAE,EAC7EC,SAAS,GAAYC,GAAA,KAAQ,IAAI,EACqB;EACtD,MAAMC,cAAe,GAAEF,SAAU,GAAET,oBAAoB,CAACI,QAAQ,CAAE,GAAEA,QAAQ;EAE5E,OAAQQ,QAAQ,IAAyB;IACvC,IAAI,CAACA,QAAQ,EAAE;MACb;IACN;IAEI,MAAMC,kBAAmB,GAAEJ,SAAU,GAAET,oBAAoB,CAACY,QAAQ,CAAE,GAAEA,QAAQ;;IAEpF;IACI,IAAI;MAAEE,GAAG;MAAEC,IAAI,EAAEC,IAAI;MAAEC;IAAI,IAAIC,KAAK,CAACC,KAAK,CAACN,kBAAkB,CAAC;IAE9D,IAAII,GAAI,KAAI,KAAM,IAAGA,GAAI,KAAI,MAAO,IAAGA,GAAI,KAAI,MAAM,EAAE;MACrDD,IAAK,GAAEA,IAAI,CAACI,KAAK,CAAC,CAAC,EAAEH,GAAG,CAACI,MAAA,GAAS,CAAC,CAAC,CAAC;IAC3C;IAEI,IAAI,CAACP,GAAG,EAAE;MACd;MACMA,GAAA,GAAM,GAAG;IACf;IAEI,MAAMQ,CAAA,GAAIR,GAAG,CAACS,WAAW,CAAC,eAAe,CAAC;IAC1C,IAAID,CAAA,GAAI,CAAC,CAAC,EAAE;MACV,OAAQ,GAAAR,GAAA,CAAAM,KAAA,CAAAE,CAAA,OAAApB,OAAA,gBAAAc,IAAA;IACA;;IAEA;IACA;IACA,IAAAF,GAAA,CAAAU,UAAA,CAAAb,cAAA;MACA,IAAAc,UAAA,GAAAX,GAAA,CAAAM,KAAA,CAAAT,cAAA,CAAAU,MAAA,MAAAnB,OAAA;MAEA,IAAAuB,UAAA;QACAA,UAAA;MACA;MACAA,UAAA,IAAAT,IAAA;MAEA,OAAAS,UAAA;IACA;IAEA,OAAAT,IAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}