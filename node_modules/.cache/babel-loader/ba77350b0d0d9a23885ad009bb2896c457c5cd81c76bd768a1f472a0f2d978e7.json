{"ast":null,"code":"import { _optionalChain } from '@sentry/utils';\nimport { getCurrentScope, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, captureException, getClient } from '@sentry/core';\nimport { normalize, isThenable } from '@sentry/utils';\n\n/**\n * Sentry tRPC middleware that names the handling transaction after the called procedure.\n *\n * Use the Sentry tRPC middleware in combination with the Sentry server integration,\n * e.g. Express Request Handlers or Next.js SDK.\n */\nfunction trpcMiddleware(options = {}) {\n  return function ({\n    path,\n    type,\n    next,\n    rawInput\n  }) {\n    const clientOptions = _optionalChain([getClient, 'call', _ => _(), 'optionalAccess', _2 => _2.getOptions, 'call', _3 => _3()]);\n    // eslint-disable-next-line deprecation/deprecation\n    const sentryTransaction = getCurrentScope().getTransaction();\n    if (sentryTransaction) {\n      sentryTransaction.updateName(`trpc/${path}`);\n      sentryTransaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'route');\n      sentryTransaction.op = 'rpc.server';\n      const trpcContext = {\n        procedure_type: type\n      };\n      if (options.attachRpcInput !== undefined ? options.attachRpcInput : _optionalChain([clientOptions, 'optionalAccess', _4 => _4.sendDefaultPii])) {\n        trpcContext.input = normalize(rawInput);\n      }\n\n      // TODO: Can we rewrite this to an attribute? Or set this on the scope?\n      // eslint-disable-next-line deprecation/deprecation\n      sentryTransaction.setContext('trpc', trpcContext);\n    }\n    function captureIfError(nextResult) {\n      if (!nextResult.ok) {\n        captureException(nextResult.error, {\n          mechanism: {\n            handled: false,\n            data: {\n              function: 'trpcMiddleware'\n            }\n          }\n        });\n      }\n    }\n    let maybePromiseResult;\n    try {\n      maybePromiseResult = next();\n    } catch (e) {\n      captureException(e, {\n        mechanism: {\n          handled: false,\n          data: {\n            function: 'trpcMiddleware'\n          }\n        }\n      });\n      throw e;\n    }\n    if (isThenable(maybePromiseResult)) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      Promise.resolve(maybePromiseResult).then(nextResult => {\n        captureIfError(nextResult);\n      }, e => {\n        captureException(e, {\n          mechanism: {\n            handled: false,\n            data: {\n              function: 'trpcMiddleware'\n            }\n          }\n        });\n      });\n    } else {\n      captureIfError(maybePromiseResult);\n    }\n\n    // We return the original promise just to be safe.\n    return maybePromiseResult;\n  };\n}\nexport { trpcMiddleware };","map":{"version":3,"names":["trpcMiddleware","options","path","type","next","rawInput","clientOptions","_optionalChain","getClient","_","_2","getOptions","_3","sentryTransaction","getCurrentScope","getTransaction","updateName","setAttribute","SEMANTIC_ATTRIBUTE_SENTRY_SOURCE","op","trpcContext","procedure_type","attachRpcInput","undefined","_4","sendDefaultPii","input","normalize","setContext","captureIfError","nextResult","ok","captureException","error","mechanism","handled","data","function","maybePromiseResult","e","isThenable","Promise","resolve","then"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\trpc.ts"],"sourcesContent":["import { SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, captureException, getClient, getCurrentScope } from '@sentry/core';\nimport { isThenable, normalize } from '@sentry/utils';\n\ninterface SentryTrpcMiddlewareOptions {\n  /** Whether to include procedure inputs in reported events. Defaults to `false`. */\n  attachRpcInput?: boolean;\n}\n\ninterface TrpcMiddlewareArguments<T> {\n  path: string;\n  type: string;\n  next: () => T;\n  rawInput: unknown;\n}\n\n/**\n * Sentry tRPC middleware that names the handling transaction after the called procedure.\n *\n * Use the Sentry tRPC middleware in combination with the Sentry server integration,\n * e.g. Express Request Handlers or Next.js SDK.\n */\nexport function trpcMiddleware(options: SentryTrpcMiddlewareOptions = {}) {\n  return function <T>({ path, type, next, rawInput }: TrpcMiddlewareArguments<T>): T {\n    const clientOptions = getClient()?.getOptions();\n    // eslint-disable-next-line deprecation/deprecation\n    const sentryTransaction = getCurrentScope().getTransaction();\n\n    if (sentryTransaction) {\n      sentryTransaction.updateName(`trpc/${path}`);\n      sentryTransaction.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, 'route');\n      sentryTransaction.op = 'rpc.server';\n\n      const trpcContext: Record<string, unknown> = {\n        procedure_type: type,\n      };\n\n      if (options.attachRpcInput !== undefined ? options.attachRpcInput : clientOptions?.sendDefaultPii) {\n        trpcContext.input = normalize(rawInput);\n      }\n\n      // TODO: Can we rewrite this to an attribute? Or set this on the scope?\n      // eslint-disable-next-line deprecation/deprecation\n      sentryTransaction.setContext('trpc', trpcContext);\n    }\n\n    function captureIfError(nextResult: { ok: false; error?: Error } | { ok: true }): void {\n      if (!nextResult.ok) {\n        captureException(nextResult.error, { mechanism: { handled: false, data: { function: 'trpcMiddleware' } } });\n      }\n    }\n\n    let maybePromiseResult;\n    try {\n      maybePromiseResult = next();\n    } catch (e) {\n      captureException(e, { mechanism: { handled: false, data: { function: 'trpcMiddleware' } } });\n      throw e;\n    }\n\n    if (isThenable(maybePromiseResult)) {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      Promise.resolve(maybePromiseResult).then(\n        nextResult => {\n          captureIfError(nextResult as any);\n        },\n        e => {\n          captureException(e, { mechanism: { handled: false, data: { function: 'trpcMiddleware' } } });\n        },\n      );\n    } else {\n      captureIfError(maybePromiseResult as any);\n    }\n\n    // We return the original promise just to be safe.\n    return maybePromiseResult;\n  };\n}\n"],"mappings":";;;;AAeA;;;;;;AAMO,SAASA,cAAcA,CAACC,OAAO,GAAgC,EAAE,EAAE;EACxE,OAAO,UAAa;IAAEC,IAAI;IAAEC,IAAI;IAAEC,IAAI;IAAEC;EAAS,CAAC,EAAiC;IACjF,MAAMC,aAAA,GAAgBC,cAAA,EAAAC,SAAS,UAAAC,CAAA,IAAAA,CAAA,CAAE,qBAAAC,EAAA,IAAAA,EAAA,CAAEC,UAAU,UAAAC,EAAA,IAAAA,EAAA,CAAE;IACnD;IACI,MAAMC,iBAAA,GAAoBC,eAAe,EAAE,CAACC,cAAc,EAAE;IAE5D,IAAIF,iBAAiB,EAAE;MACrBA,iBAAiB,CAACG,UAAU,CAAE,QAAOd,IAAK;MACAW,iBAAA,CAAAI,YAAA,CAAAC,gCAAA;MACAL,iBAAA,CAAAM,EAAA;MAEA,MAAAC,WAAA;QACAC,cAAA,EAAAlB;MACA;MAEA,IAAAF,OAAA,CAAAqB,cAAA,KAAAC,SAAA,GAAAtB,OAAA,CAAAqB,cAAA,GAAAf,cAAA,EAAAD,aAAA,oBAAAkB,EAAA,IAAAA,EAAA,CAAAC,cAAA;QACAL,WAAA,CAAAM,KAAA,GAAAC,SAAA,CAAAtB,QAAA;MACA;;MAEA;MACA;MACAQ,iBAAA,CAAAe,UAAA,SAAAR,WAAA;IACA;IAEA,SAAAS,eAAAC,UAAA;MACA,KAAAA,UAAA,CAAAC,EAAA;QACAC,gBAAA,CAAAF,UAAA,CAAAG,KAAA;UAAAC,SAAA;YAAAC,OAAA;YAAAC,IAAA;cAAAC,QAAA;YAAA;UAAA;QAAA;MACA;IACA;IAEA,IAAAC,kBAAA;IACA;MACAA,kBAAA,GAAAlC,IAAA;IACA,SAAAmC,CAAA;MACAP,gBAAA,CAAAO,CAAA;QAAAL,SAAA;UAAAC,OAAA;UAAAC,IAAA;YAAAC,QAAA;UAAA;QAAA;MAAA;MACA,MAAAE,CAAA;IACA;IAEA,IAAAC,UAAA,CAAAF,kBAAA;MACA;MACAG,OAAA,CAAAC,OAAA,CAAAJ,kBAAA,EAAAK,IAAA,CACAb,UAAA;QACAD,cAAA,CAAAC,UAAA;MACA,GACAS,CAAA;QACAP,gBAAA,CAAAO,CAAA;UAAAL,SAAA;YAAAC,OAAA;YAAAC,IAAA;cAAAC,QAAA;YAAA;UAAA;QAAA;MACA,CACA;IACA;MACAR,cAAA,CAAAS,kBAAA;IACA;;IAEA;IACA,OAAAA,kBAAA;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}