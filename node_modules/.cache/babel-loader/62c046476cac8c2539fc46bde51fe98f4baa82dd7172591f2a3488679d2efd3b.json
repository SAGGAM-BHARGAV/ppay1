{"ast":null,"code":"/* tslint:disable */\n/* eslint-disable */\n/**\n * Cashfree Payment Gateway APIs\n * Cashfree\\'s Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.\n *\n * The version of the OpenAPI document: 2023-08-01\n * Contact: developers@cashfree.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { assertParamExists, setApiKeyToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport { CFEnvironment } from './configuration';\nimport * as Sentry from \"@sentry/node\";\nimport * as crypto from \"crypto\";\nexport const ApiErrorTypeEnum = {\n  API_ERROR: 'api_error',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const ApiError404TypeEnum = {\n  INVALID_REQUEST_ERROR: 'invalid_request_error',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const ApiError409TypeEnum = {\n  INVALID_REQUEST_ERROR: 'invalid_request_error',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const ApiError502TypeEnum = {\n  API_ERROR: 'api_error',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const AppProviderEnum = {\n  GPAY: 'gpay',\n  PHONEPE: 'phonepe',\n  OLA: 'ola',\n  PAYTM: 'paytm',\n  AMAZON: 'amazon',\n  AIRTEL: 'airtel',\n  FREECHARGE: 'freecharge',\n  MOBIKWIK: 'mobikwik',\n  JIO: 'jio',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const AuthorizationInPaymentsEntityActionEnum = {\n  CAPTURE: 'CAPTURE',\n  VOID: 'VOID',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const AuthorizationInPaymentsEntityStatusEnum = {\n  SUCCESS: 'SUCCESS',\n  PENDING: 'PENDING',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const AuthorizeOrderRequestActionEnum = {\n  CAPTURE: 'CAPTURE',\n  VOID: 'VOID',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const BadRequestErrorTypeEnum = {\n  INVALID_REQUEST_ERROR: 'invalid_request_error',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const CardChannelEnum = {\n  LINK: 'link',\n  POST: 'post',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const CardTokenTypeEnum = {\n  ISSUER_TOKEN: 'ISSUER_TOKEN',\n  NETWORK_GC_TOKEN: 'NETWORK_GC_TOKEN',\n  ISSUER_GC_TOKEN: 'ISSUER_GC_TOKEN',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const CardCardBankNameEnum = {\n  KOTAK: 'Kotak',\n  ICICI: 'ICICI',\n  RBL: 'RBL',\n  BOB: 'BOB',\n  STANDARD_CHARTERED: 'Standard Chartered',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const CardEMICardBankNameEnum = {\n  HDFC: 'hdfc',\n  KOTAK: 'kotak',\n  ICICI: 'icici',\n  RBL: 'rbl',\n  BOB: 'bob',\n  STANDARD_CHARTERED: 'standard chartered',\n  AXIS: 'axis',\n  AU: 'au',\n  YES: 'yes',\n  SBI: 'sbi',\n  FED: 'fed',\n  HSBC: 'hsbc',\n  CITI: 'citi',\n  AMEX: 'amex',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const CardlessEMIProviderEnum = {\n  FLEXMONEY: 'flexmoney',\n  ZESTMONEY: 'zestmoney',\n  HDFC: 'hdfc',\n  ICICI: 'icici',\n  CASHE: 'cashe',\n  IDFC: 'idfc',\n  KOTAK: 'kotak',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const CashbackDetailsCashbackTypeEnum = {\n  FLAT: 'flat',\n  PERCENTAGE: 'percentage',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const DiscountDetailsDiscountTypeEnum = {\n  FLAT: 'flat',\n  PERCENTAGE: 'percentage',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const IdempotencyErrorTypeEnum = {\n  IDEMPOTENCY_ERROR: 'idempotency_error',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const InstrumentEntityInstrumentTypeEnum = {\n  CARD: 'card',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const InstrumentEntityInstrumentStatusEnum = {\n  ACTIVE: 'ACTIVE',\n  INACTIVE: 'INACTIVE',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const OfferDetailsOfferTypeEnum = {\n  DISCOUNT: 'DISCOUNT',\n  CASHBACK: 'CASHBACK',\n  DISCOUNT_AND_CASHBACK: 'DISCOUNT_AND_CASHBACK',\n  NO_COST_EMI: 'NO_COST_EMI',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const OfferTncOfferTncTypeEnum = {\n  TEXT: 'text',\n  LINK: 'link',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\n/**\n * Offer Type Object\n * @export\n * @enum {string}\n */\nexport const OfferType = {\n  DISCOUNT: 'DISCOUNT',\n  CASHBACK: 'CASHBACK',\n  DISCOUNT_AND_CASHBACK: 'DISCOUNT_AND_CASHBACK',\n  NO_COST_EMI: 'NO_COST_EMI',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const OrderAuthenticateEntityActionEnum = {\n  SUBMIT_OTP: 'SUBMIT_OTP',\n  RESEND_OTP: 'RESEND_OTP',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const OrderAuthenticateEntityAuthenticateStatusEnum = {\n  FAILED: 'FAILED',\n  SUCCESS: 'SUCCESS',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const OrderAuthenticatePaymentRequestActionEnum = {\n  SUBMIT_OTP: 'SUBMIT_OTP',\n  RESEND_OTP: 'RESEND_OTP',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const OrderCreateRefundRequestRefundSpeedEnum = {\n  STANDARD: 'STANDARD',\n  INSTANT: 'INSTANT',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const PayOrderEntityPaymentMethodEnum = {\n  NETBANKING: 'netbanking',\n  CARD: 'card',\n  UPI: 'upi',\n  APP: 'app',\n  CARDLESS_EMI: 'cardless_emi',\n  PAYLATER: 'paylater',\n  BANKTRANSFER: 'banktransfer',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const PayOrderEntityChannelEnum = {\n  LINK: 'link',\n  COLLECT: 'collect',\n  QRCODE: 'qrcode',\n  POST: 'post',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const PayOrderEntityActionEnum = {\n  LINK: 'link',\n  CUSTOM: 'custom',\n  FORM: 'form',\n  POST: 'post',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const PaylaterProviderEnum = {\n  KOTAK: 'kotak',\n  FLEXIPAY: 'flexipay',\n  ZESTMONEY: 'zestmoney',\n  LAZYPAY: 'lazypay',\n  OLAPOSTPAID: 'olapostpaid',\n  SIMPL: 'simpl',\n  FREECHARGEPAYLATER: 'freechargepaylater',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const PaymentEntityPaymentStatusEnum = {\n  SUCCESS: 'SUCCESS',\n  NOT_ATTEMPTED: 'NOT_ATTEMPTED',\n  FAILED: 'FAILED',\n  USER_DROPPED: 'USER_DROPPED',\n  VOID: 'VOID',\n  CANCELLED: 'CANCELLED',\n  PENDING: 'PENDING',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const RateLimitErrorTypeEnum = {\n  RATE_LIMIT_ERROR: 'rate_limit_error',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const RefundEntityEntityEnum = {\n  REFUND: 'refund',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const RefundEntityRefundStatusEnum = {\n  SUCCESS: 'SUCCESS',\n  PENDING: 'PENDING',\n  CANCELLED: 'CANCELLED',\n  ONHOLD: 'ONHOLD',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const RefundEntityRefundTypeEnum = {\n  PAYMENT_AUTO_REFUND: 'PAYMENT_AUTO_REFUND',\n  MERCHANT_INITIATED: 'MERCHANT_INITIATED',\n  UNRECONCILED_AUTO_REFUND: 'UNRECONCILED_AUTO_REFUND',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const RefundEntityRefundModeEnum = {\n  STANDARD: 'STANDARD',\n  INSTANT: 'INSTANT',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const TerminalPaymentEntityPaymentStatusEnum = {\n  SUCCESS: 'SUCCESS',\n  NOT_ATTEMPTED: 'NOT_ATTEMPTED',\n  FAILED: 'FAILED',\n  USER_DROPPED: 'USER_DROPPED',\n  VOID: 'VOID',\n  CANCELLED: 'CANCELLED',\n  PENDING: 'PENDING',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const UpiChannelEnum = {\n  LINK: 'link',\n  COLLECT: 'collect',\n  QRCODE: 'qrcode',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\n/**\n * CustomersApi - axios parameter creator\n * @export\n */\nconst CustomersApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * Create Customer at Cashfree\n     * @summary Create Customer at Cashfree\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateCustomerRequest} CreateCustomerRequest Request to create a new customer at Cashfree\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGCreateCustomer: (x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGCreateCustomer', 'x_api_version', x_api_version);\n      // verify required parameter 'CreateCustomerRequest' is not null or undefined\n      assertParamExists('pGCreateCustomer', 'CreateCustomerRequest', CreateCustomerRequest);\n      const localVarPath = `/customers`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(CreateCustomerRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    })\n  };\n};\n/**\n * CustomersApi - functional programming interface\n * @export\n */\nconst CustomersApiFp = function (configuration) {\n  const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Create Customer at Cashfree\n     * @summary Create Customer at Cashfree\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateCustomerRequest} CreateCustomerRequest Request to create a new customer at Cashfree\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    }\n  };\n};\n/**\n * CustomersApi - object-oriented interface\n * @export\n * @class CustomersApi\n * @extends {BaseAPI}\n */\n/**\n * EasySplitApi - axios parameter creator\n * @export\n */\nconst EasySplitApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * The Create On Demand Transfer API will create a new on-demand request either from to the merchant or from to the vendor.\n     * @summary Create On Demand Transfer\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {AdjustVendorBalanceRequest} [AdjustVendorBalanceRequest] Adjust Vendor Balance Request Body.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGESCreateOnDemandTransfer: (x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGESCreateOnDemandTransfer', 'x_api_version', x_api_version);\n      // verify required parameter 'vendor_id' is not null or undefined\n      assertParamExists('pGESCreateOnDemandTransfer', 'vendor_id', vendor_id);\n      const localVarPath = `/easy-split/vendors/{vendor_id}/transfer`.replace(`{${\"vendor_id\"}}`, encodeURIComponent(String(vendor_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(AdjustVendorBalanceRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to create a new vendor to your EasySplit account along with the KYC details. Provide KYC details such as account_type, business_type, gst, cin, pan, passport number and so on.\n     * @summary Create vendor\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {CreateVendorRequest} [CreateVendorRequest] Create Vendor Request Body.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * CreateVendorRequest?: CreateVendorRequest,\n     */\n    pGESCreateVendors: (x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGESCreateVendors', 'x_api_version', x_api_version);\n      const localVarPath = `/easy-split/vendors`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(CreateVendorRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to download the uploaded KYC documents of that particular vendor. Provide the document type. Click the link from the sample request to download the KYC document.\n     * @summary Download Vendor Documents\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} doc_type Mention the document type that has to be downloaded. Only an uploaded document can be downloaded.\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGESDownloadVendorsDocs: (x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGESDownloadVendorsDocs', 'x_api_version', x_api_version);\n      // verify required parameter 'doc_type' is not null or undefined\n      assertParamExists('pGESDownloadVendorsDocs', 'doc_type', doc_type);\n      // verify required parameter 'vendor_id' is not null or undefined\n      assertParamExists('pGESDownloadVendorsDocs', 'vendor_id', vendor_id);\n      const localVarPath = `/easy-split/vendor-docs/{vendor_id}/download/{doc_type}`.replace(`{${\"doc_type\"}}`, encodeURIComponent(String(doc_type))).replace(`{${\"vendor_id\"}}`, encodeURIComponent(String(vendor_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to get the details of a specific vendor associated with your Easy Split account.\n     * @summary Get Vendor All Details\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGESFetchVendors: (x_api_version, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGESFetchVendors', 'x_api_version', x_api_version);\n      // verify required parameter 'vendor_id' is not null or undefined\n      assertParamExists('pGESFetchVendors', 'vendor_id', vendor_id);\n      const localVarPath = `/easy-split/vendors/{vendor_id}`.replace(`{${\"vendor_id\"}}`, encodeURIComponent(String(vendor_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * This API fetches the available amount with the merchant, vendor, and the unsettled amount for the merchant as well as the vendor.\n     * @summary Get On Demand Balance\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGESGetVendorBalance: (x_api_version, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGESGetVendorBalance', 'x_api_version', x_api_version);\n      // verify required parameter 'vendor_id' is not null or undefined\n      assertParamExists('pGESGetVendorBalance', 'vendor_id', vendor_id);\n      const localVarPath = `/easy-split/vendors/{vendor_id}/balances`.replace(`{${\"vendor_id\"}}`, encodeURIComponent(String(vendor_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * This API returns the applicable service charge and service tax for a vendor balance transfer, based on the provided amount and rate type.\n     * @summary Get Vendor Balance Transfer Charges\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {number} amount Specify the amount for which you want to view the service charges and service taxes in the response.\n     * @param {string} rate_type Mention the type of rate for which you want to check the charges. Possible value: VENDOR_ON_DEMAND\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGESGetVendorBalanceTransferCharges: (x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGESGetVendorBalanceTransferCharges', 'x_api_version', x_api_version);\n      // verify required parameter 'amount' is not null or undefined\n      assertParamExists('pGESGetVendorBalanceTransferCharges', 'amount', amount);\n      // verify required parameter 'rate_type' is not null or undefined\n      assertParamExists('pGESGetVendorBalanceTransferCharges', 'rate_type', rate_type);\n      const localVarPath = `/easy-split/amount/{amount}/charges`.replace(`{${\"amount\"}}`, encodeURIComponent(String(amount)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      if (rate_type !== undefined) {\n        localVarQueryParameter['rate_type'] = rate_type;\n      }\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to fetch the details of all the KYC details of a particular vendor.\n     * @summary Get Vendor All Documents Status\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGESGetVendorsDocs: (x_api_version, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGESGetVendorsDocs', 'x_api_version', x_api_version);\n      // verify required parameter 'vendor_id' is not null or undefined\n      assertParamExists('pGESGetVendorsDocs', 'vendor_id', vendor_id);\n      const localVarPath = `/easy-split/vendor-docs/{vendor_id}`.replace(`{${\"vendor_id\"}}`, encodeURIComponent(String(vendor_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to get all the split details, settled and unsettled transactions details of each vendor who were part of a particular order by providing order Id or start date and end date.\n     * @summary Get Split and Settlement Details by OrderID v2.0\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {ESOrderReconRequest} [ESOrderReconRequest] Get Split and Settlement Details by OrderID v2.0\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * ESOrderReconRequest?: ESOrderReconRequest,\n     */\n    pGESOrderRecon: (x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGESOrderRecon', 'x_api_version', x_api_version);\n      const localVarPath = `/split/order/vendor/recon`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(ESOrderReconRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to edit the existing vendor details added to your EasySplit account. You can edit vendor details such as name, email, phone number, upi details, and any of the KYC details.\n     * @summary Update vendor Details\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {UpdateVendorRequest} [UpdateVendorRequest] Create Vendor Request Body.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGESUpdateVendors: (x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGESUpdateVendors', 'x_api_version', x_api_version);\n      // verify required parameter 'vendor_id' is not null or undefined\n      assertParamExists('pGESUpdateVendors', 'vendor_id', vendor_id);\n      const localVarPath = `/easy-split/vendors/{vendor_id}`.replace(`{${\"vendor_id\"}}`, encodeURIComponent(String(vendor_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'PATCH'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(UpdateVendorRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to upload KYC documents of a specific vendor.\n     * @summary Upload Vendor Docs\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {string} [doc_type] Mention the type of the document you are uploading. Possible values: UIDAI_FRONT, UIDAI_BACK, UIDAI_NUMBER, DL, DL_NUMBER, PASSPORT_FRONT, PASSPORT_BACK, PASSPORT_NUMBER, VOTER_ID, VOTER_ID_NUMBER, PAN, PAN_NUMBER, GST, GSTIN_NUMBER, CIN, CIN_NUMBER, NBFC_CERTIFICATE. If the doc type ends with a number you should add the doc value else upload the doc file.\n     * @param {string} [doc_value] Enter the display name of the uploaded file.\n     * @param {File} [file] Select the document that should be uploaded or provide the path of that file. You cannot upload a file that is more than 2MB in size.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGESUploadVendorsDocs: (x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGESUploadVendorsDocs', 'x_api_version', x_api_version);\n      // verify required parameter 'vendor_id' is not null or undefined\n      assertParamExists('pGESUploadVendorsDocs', 'vendor_id', vendor_id);\n      const localVarPath = `/easy-split/vendor-docs/{vendor_id}`.replace(`{${\"vendor_id\"}}`, encodeURIComponent(String(vendor_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      const localVarFormParams = new (configuration && configuration.formDataCtor || FormData)();\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      if (doc_type !== undefined) {\n        localVarFormParams.append('doc_type', doc_type);\n      }\n      if (doc_value !== undefined) {\n        localVarFormParams.append('doc_value', doc_value);\n      }\n      if (file !== undefined) {\n        localVarFormParams.append('file', file);\n      }\n      localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = localVarFormParams;\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Split After Payment API splits the payments to vendors after successful payment from the customers.\n     * @summary Split After Payment\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {SplitAfterPaymentRequest} [SplitAfterPaymentRequest] Request Body to Create Split for an order.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGOrderSplitAfterPayment: (x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGOrderSplitAfterPayment', 'x_api_version', x_api_version);\n      // verify required parameter 'order_id' is not null or undefined\n      assertParamExists('pGOrderSplitAfterPayment', 'order_id', order_id);\n      const localVarPath = `/easy-split/orders/{order_id}/split`.replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(SplitAfterPaymentRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * This API will create a static split scheme wherein you can define the split type and the vendor-wise split percentage.\n     * @summary Create Static Split Configuration\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {StaticSplitRequest} [StaticSplitRequest] Static Split\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * StaticSplitRequest?: StaticSplitRequest,\n     */\n    pGOrderStaticSplit: (x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGOrderStaticSplit', 'x_api_version', x_api_version);\n      const localVarPath = `/easy-split/static-split`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(StaticSplitRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    })\n  };\n};\n/**\n * EasySplitApi - functional programming interface\n * @export\n */\nconst EasySplitApiFp = function (configuration) {\n  const localVarAxiosParamCreator = EasySplitApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * The Create On Demand Transfer API will create a new on-demand request either from to the merchant or from to the vendor.\n     * @summary Create On Demand Transfer\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {AdjustVendorBalanceRequest} [AdjustVendorBalanceRequest] Adjust Vendor Balance Request Body.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGESCreateOnDemandTransfer(x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESCreateOnDemandTransfer(x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to create a new vendor to your EasySplit account along with the KYC details. Provide KYC details such as account_type, business_type, gst, cin, pan, passport number and so on.\n     * @summary Create vendor\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {CreateVendorRequest} [CreateVendorRequest] Create Vendor Request Body.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGESCreateVendors(x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESCreateVendors(x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to download the uploaded KYC documents of that particular vendor. Provide the document type. Click the link from the sample request to download the KYC document.\n     * @summary Download Vendor Documents\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} doc_type Mention the document type that has to be downloaded. Only an uploaded document can be downloaded.\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGESDownloadVendorsDocs(x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESDownloadVendorsDocs(x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to get the details of a specific vendor associated with your Easy Split account.\n     * @summary Get Vendor All Details\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGESFetchVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESFetchVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * This API fetches the available amount with the merchant, vendor, and the unsettled amount for the merchant as well as the vendor.\n     * @summary Get On Demand Balance\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGESGetVendorBalance(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESGetVendorBalance(x_api_version, vendor_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * This API returns the applicable service charge and service tax for a vendor balance transfer, based on the provided amount and rate type.\n     * @summary Get Vendor Balance Transfer Charges\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {number} amount Specify the amount for which you want to view the service charges and service taxes in the response.\n     * @param {string} rate_type Mention the type of rate for which you want to check the charges. Possible value: VENDOR_ON_DEMAND\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGESGetVendorBalanceTransferCharges(x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESGetVendorBalanceTransferCharges(x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to fetch the details of all the KYC details of a particular vendor.\n     * @summary Get Vendor All Documents Status\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGESGetVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESGetVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to get all the split details, settled and unsettled transactions details of each vendor who were part of a particular order by providing order Id or start date and end date.\n     * @summary Get Split and Settlement Details by OrderID v2.0\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {ESOrderReconRequest} [ESOrderReconRequest] Get Split and Settlement Details by OrderID v2.0\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGESOrderRecon(x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESOrderRecon(x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to edit the existing vendor details added to your EasySplit account. You can edit vendor details such as name, email, phone number, upi details, and any of the KYC details.\n     * @summary Update vendor Details\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {UpdateVendorRequest} [UpdateVendorRequest] Create Vendor Request Body.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGESUpdateVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESUpdateVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to upload KYC documents of a specific vendor.\n     * @summary Upload Vendor Docs\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {string} [doc_type] Mention the type of the document you are uploading. Possible values: UIDAI_FRONT, UIDAI_BACK, UIDAI_NUMBER, DL, DL_NUMBER, PASSPORT_FRONT, PASSPORT_BACK, PASSPORT_NUMBER, VOTER_ID, VOTER_ID_NUMBER, PAN, PAN_NUMBER, GST, GSTIN_NUMBER, CIN, CIN_NUMBER, NBFC_CERTIFICATE. If the doc type ends with a number you should add the doc value else upload the doc file.\n     * @param {string} [doc_value] Enter the display name of the uploaded file.\n     * @param {File} [file] Select the document that should be uploaded or provide the path of that file. You cannot upload a file that is more than 2MB in size.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGESUploadVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESUploadVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Split After Payment API splits the payments to vendors after successful payment from the customers.\n     * @summary Split After Payment\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {SplitAfterPaymentRequest} [SplitAfterPaymentRequest] Request Body to Create Split for an order.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGOrderSplitAfterPayment(x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderSplitAfterPayment(x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * This API will create a static split scheme wherein you can define the split type and the vendor-wise split percentage.\n     * @summary Create Static Split Configuration\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {StaticSplitRequest} [StaticSplitRequest] Static Split\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGOrderStaticSplit(x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderStaticSplit(x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    }\n  };\n};\n/**\n * EasySplitApi - object-oriented interface\n * @export\n * @class EasySplitApi\n * @extends {BaseAPI}\n */\n/**\n * EligibilityApi - axios parameter creator\n * @export\n */\nconst EligibilityApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * Use this API to get eligible Cardless EMI Payment Methods available for a customer on an order basis their phone number.\n     * @summary Get Eligible Cardless EMI Payment Methods for a customer on an order\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {EligibilityFetchCardlessEMIRequest} EligibilityFetchCardlessEMIRequest Request Body to get eligible cardless emi options for a customer and order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGEligibilityFetchCardlessEMI: (x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGEligibilityFetchCardlessEMI', 'x_api_version', x_api_version);\n      // verify required parameter 'EligibilityFetchCardlessEMIRequest' is not null or undefined\n      assertParamExists('pGEligibilityFetchCardlessEMI', 'EligibilityFetchCardlessEMIRequest', EligibilityFetchCardlessEMIRequest);\n      const localVarPath = `/eligibility/cardlessemi`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchCardlessEMIRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to get eligible offers for an order_id or order amount.\n     * @summary Get Eligible Offers for an Order\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {EligibilityFetchOffersRequest} EligibilityFetchOffersRequest Request Body to get eligible offers for a customer and order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGEligibilityFetchOffers: (x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGEligibilityFetchOffers', 'x_api_version', x_api_version);\n      // verify required parameter 'EligibilityFetchOffersRequest' is not null or undefined\n      assertParamExists('pGEligibilityFetchOffers', 'EligibilityFetchOffersRequest', EligibilityFetchOffersRequest);\n      const localVarPath = `/eligibility/offers`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchOffersRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to get eligible Paylater Payment Methods for a customer on an order.\n     * @summary Get Eligible Paylater for a customer on an order\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {EligibilityFetchPaylaterRequest} EligibilityFetchPaylaterRequest Request Body to get eligible paylater options for a customer and order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGEligibilityFetchPaylater: (x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGEligibilityFetchPaylater', 'x_api_version', x_api_version);\n      // verify required parameter 'EligibilityFetchPaylaterRequest' is not null or undefined\n      assertParamExists('pGEligibilityFetchPaylater', 'EligibilityFetchPaylaterRequest', EligibilityFetchPaylaterRequest);\n      const localVarPath = `/eligibility/paylater`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchPaylaterRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to get eligible Payment Methods\n     * @summary Get eligible Payment Methods\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {EligibilityFetchPaymentMethodsRequest} EligibilityFetchPaymentMethodsRequest Request Body to get eligible payment methods for an account and order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGEligibilityFetchPaymentMethods: (x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGEligibilityFetchPaymentMethods', 'x_api_version', x_api_version);\n      // verify required parameter 'EligibilityFetchPaymentMethodsRequest' is not null or undefined\n      assertParamExists('pGEligibilityFetchPaymentMethods', 'EligibilityFetchPaymentMethodsRequest', EligibilityFetchPaymentMethodsRequest);\n      const localVarPath = `/eligibility/payment_methods`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchPaymentMethodsRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    })\n  };\n};\n/**\n * EligibilityApi - functional programming interface\n * @export\n */\nconst EligibilityApiFp = function (configuration) {\n  const localVarAxiosParamCreator = EligibilityApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Use this API to get eligible Cardless EMI Payment Methods available for a customer on an order basis their phone number.\n     * @summary Get Eligible Cardless EMI Payment Methods for a customer on an order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {EligibilityFetchCardlessEMIRequest} EligibilityFetchCardlessEMIRequest Request Body to get eligible cardless emi options for a customer and order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to get eligible offers for an order_id or order amount.\n     * @summary Get Eligible Offers for an Order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {EligibilityFetchOffersRequest} EligibilityFetchOffersRequest Request Body to get eligible offers for a customer and order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to get eligible Paylater Payment Methods for a customer on an order.\n     * @summary Get Eligible Paylater for a customer on an order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {EligibilityFetchPaylaterRequest} EligibilityFetchPaylaterRequest Request Body to get eligible paylater options for a customer and order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to get eligible Payment Methods\n     * @summary Get eligible Payment Methods\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {EligibilityFetchPaymentMethodsRequest} EligibilityFetchPaymentMethodsRequest Request Body to get eligible payment methods for an account and order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    }\n  };\n};\n/**\n * EligibilityApi - object-oriented interface\n * @export\n * @class EligibilityApi\n * @extends {BaseAPI}\n */\n/**\n * OffersApi - axios parameter creator\n * @export\n */\nconst OffersApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * Use this API to create offers with Cashfree from your backend\n     * @summary Create Offer\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateOfferRequest} CreateOfferRequest Request body to create an offer at Cashfree\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGCreateOffer: (x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGCreateOffer', 'x_api_version', x_api_version);\n      // verify required parameter 'CreateOfferRequest' is not null or undefined\n      assertParamExists('pGCreateOffer', 'CreateOfferRequest', CreateOfferRequest);\n      const localVarPath = `/offers`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(CreateOfferRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to get offer by offer_id\n     * @summary Get Offer by ID\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} offer_id The offer ID for which you want to view the offer details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGFetchOffer: (x_api_version, offer_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGFetchOffer', 'x_api_version', x_api_version);\n      // verify required parameter 'offer_id' is not null or undefined\n      assertParamExists('pGFetchOffer', 'offer_id', offer_id);\n      const localVarPath = `/offers/{offer_id}`.replace(`{${\"offer_id\"}}`, encodeURIComponent(String(offer_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    })\n  };\n};\n/**\n * OffersApi - functional programming interface\n * @export\n */\nconst OffersApiFp = function (configuration) {\n  const localVarAxiosParamCreator = OffersApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Use this API to create offers with Cashfree from your backend\n     * @summary Create Offer\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateOfferRequest} CreateOfferRequest Request body to create an offer at Cashfree\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to get offer by offer_id\n     * @summary Get Offer by ID\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} offer_id The offer ID for which you want to view the offer details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    }\n  };\n};\n/**\n * OffersApi - object-oriented interface\n * @export\n * @class OffersApi\n * @extends {BaseAPI}\n */\n/**\n * OrdersApi - axios parameter creator\n * @export\n */\nconst OrdersApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * ### Order An order is an entity which has a amount and currency associated with it. It is something for which you want to collect payment for. Use this API to create orders with Cashfree from your backend to get a `payment_sessions_id`.  You can use the `payment_sessions_id` to create a transaction for the order.\n     * @summary Create Order\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateOrderRequest} CreateOrderRequest Request body to create an order at cashfree\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGCreateOrder: (x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGCreateOrder', 'x_api_version', x_api_version);\n      // verify required parameter 'CreateOrderRequest' is not null or undefined\n      assertParamExists('pGCreateOrder', 'CreateOrderRequest', CreateOrderRequest);\n      const localVarPath = `/orders`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(CreateOrderRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to fetch the order that was created at Cashfree\\'s using the `order_id`.  ## When to use this API - To check the status of your order - Once the order is PAID - Once your customer returns to `return_url`\n     * @summary Get Order\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGFetchOrder: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGFetchOrder', 'x_api_version', x_api_version);\n      // verify required parameter 'order_id' is not null or undefined\n      assertParamExists('pGFetchOrder', 'order_id', order_id);\n      const localVarPath = `/orders/{order_id}`.replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to terminate the order that was created at Cashfree\\'s using the `order_id`.\n     * @summary Terminate Order\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {TerminateOrderRequest} TerminateOrderRequest Request body to terminate an order at cashfree\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGTerminateOrder: (x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGTerminateOrder', 'x_api_version', x_api_version);\n      // verify required parameter 'order_id' is not null or undefined\n      assertParamExists('pGTerminateOrder', 'order_id', order_id);\n      // verify required parameter 'TerminateOrderRequest' is not null or undefined\n      assertParamExists('pGTerminateOrder', 'TerminateOrderRequest', TerminateOrderRequest);\n      const localVarPath = `/orders/{order_id}`.replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'PATCH'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(TerminateOrderRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    })\n  };\n};\n/**\n * OrdersApi - functional programming interface\n * @export\n */\nconst OrdersApiFp = function (configuration) {\n  const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * ### Order An order is an entity which has a amount and currency associated with it. It is something for which you want to collect payment for. Use this API to create orders with Cashfree from your backend to get a `payment_sessions_id`.  You can use the `payment_sessions_id` to create a transaction for the order.\n     * @summary Create Order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateOrderRequest} CreateOrderRequest Request body to create an order at cashfree\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to fetch the order that was created at Cashfree\\'s using the `order_id`.  ## When to use this API - To check the status of your order - Once the order is PAID - Once your customer returns to `return_url`\n     * @summary Get Order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to terminate the order that was created at Cashfree\\'s using the `order_id`.\n     * @summary Terminate Order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {TerminateOrderRequest} TerminateOrderRequest Request body to terminate an order at cashfree\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    }\n  };\n};\n/**\n * OrdersApi - object-oriented interface\n * @export\n * @class OrdersApi\n * @extends {BaseAPI}\n */\n/**\n * PGReconciliationApi - axios parameter creator\n * @export\n */\nconst PGReconciliationApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * - Use this API to get the payment gateway reconciliation details with date range. - It will have events for your payment account\n     * @summary PG Reconciliation\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {FetchReconRequest} FetchReconRequest Request Body for the reconciliation\n     * @param {string} [Content_Type] application/json\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {string} [Accept] application/json\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGFetchRecon: (x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGFetchRecon', 'x_api_version', x_api_version);\n      // verify required parameter 'FetchReconRequest' is not null or undefined\n      assertParamExists('pGFetchRecon', 'FetchReconRequest', FetchReconRequest);\n      const localVarPath = `/recon`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(FetchReconRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    })\n  };\n};\n/**\n * PGReconciliationApi - functional programming interface\n * @export\n */\nconst PGReconciliationApiFp = function (configuration) {\n  const localVarAxiosParamCreator = PGReconciliationApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * - Use this API to get the payment gateway reconciliation details with date range. - It will have events for your payment account\n     * @summary PG Reconciliation\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {FetchReconRequest} FetchReconRequest Request Body for the reconciliation\n     * @param {string} [Content_Type] application/json\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {string} [Accept] application/json\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    }\n  };\n};\n/**\n * PGReconciliationApi - object-oriented interface\n * @export\n * @class PGReconciliationApi\n * @extends {BaseAPI}\n */\n/**\n * PaymentLinksApi - axios parameter creator\n * @export\n */\nconst PaymentLinksApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.\n     * @summary Cancel Payment Link\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} link_id The payment link ID for which you want to view the details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGCancelLink: (x_api_version, link_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGCancelLink', 'x_api_version', x_api_version);\n      // verify required parameter 'link_id' is not null or undefined\n      assertParamExists('pGCancelLink', 'link_id', link_id);\n      const localVarPath = `/links/{link_id}/cancel`.replace(`{${\"link_id\"}}`, encodeURIComponent(String(link_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.\n     * @summary Create Payment Link\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateLinkRequest} CreateLinkRequest Request Body to Create Payment Links\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGCreateLink: (x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGCreateLink', 'x_api_version', x_api_version);\n      // verify required parameter 'CreateLinkRequest' is not null or undefined\n      assertParamExists('pGCreateLink', 'CreateLinkRequest', CreateLinkRequest);\n      const localVarPath = `/links`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(CreateLinkRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to view all details and status of a payment link.\n     * @summary Fetch Payment Link Details\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} link_id The payment link ID for which you want to view the details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGFetchLink: (x_api_version, link_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGFetchLink', 'x_api_version', x_api_version);\n      // verify required parameter 'link_id' is not null or undefined\n      assertParamExists('pGFetchLink', 'link_id', link_id);\n      const localVarPath = `/links/{link_id}`.replace(`{${\"link_id\"}}`, encodeURIComponent(String(link_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to view all order details for a payment link.\n     * @summary Get Orders for a Payment Link\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} link_id The payment link ID for which you want to view the details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGLinkFetchOrders: (x_api_version, link_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGLinkFetchOrders', 'x_api_version', x_api_version);\n      // verify required parameter 'link_id' is not null or undefined\n      assertParamExists('pGLinkFetchOrders', 'link_id', link_id);\n      const localVarPath = `/links/{link_id}/orders`.replace(`{${\"link_id\"}}`, encodeURIComponent(String(link_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    })\n  };\n};\n/**\n * PaymentLinksApi - functional programming interface\n * @export\n */\nconst PaymentLinksApiFp = function (configuration) {\n  const localVarAxiosParamCreator = PaymentLinksApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.\n     * @summary Cancel Payment Link\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} link_id The payment link ID for which you want to view the details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.\n     * @summary Create Payment Link\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateLinkRequest} CreateLinkRequest Request Body to Create Payment Links\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to view all details and status of a payment link.\n     * @summary Fetch Payment Link Details\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} link_id The payment link ID for which you want to view the details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to view all order details for a payment link.\n     * @summary Get Orders for a Payment Link\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} link_id The payment link ID for which you want to view the details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    }\n  };\n};\n/**\n * PaymentLinksApi - object-oriented interface\n * @export\n * @class PaymentLinksApi\n * @extends {BaseAPI}\n */\n/**\n * PaymentsApi - axios parameter creator\n * @export\n */\nconst PaymentsApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * Use this API to capture or void a preauthorized payment\n     * @summary Preauthorization\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {AuthorizeOrderRequest} AuthorizeOrderRequest Request to Capture or Void Transactions\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGAuthorizeOrder: (x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGAuthorizeOrder', 'x_api_version', x_api_version);\n      // verify required parameter 'order_id' is not null or undefined\n      assertParamExists('pGAuthorizeOrder', 'order_id', order_id);\n      // verify required parameter 'AuthorizeOrderRequest' is not null or undefined\n      assertParamExists('pGAuthorizeOrder', 'AuthorizeOrderRequest', AuthorizeOrderRequest);\n      const localVarPath = `/orders/{order_id}/authorization`.replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(AuthorizeOrderRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * If you accept OTP on your own page, you can use the below API to send OTP to Cashfree.\n     * @summary Submit or Resend OTP\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} cf_payment_id The Cashfree payment or transaction ID.\n     * @param {OrderAuthenticatePaymentRequest} OrderAuthenticatePaymentRequest Request body to submit/resend headless OTP. To use this API make sure you have headless OTP enabled for your account\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGOrderAuthenticatePayment: (x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGOrderAuthenticatePayment', 'x_api_version', x_api_version);\n      // verify required parameter 'cf_payment_id' is not null or undefined\n      assertParamExists('pGOrderAuthenticatePayment', 'cf_payment_id', cf_payment_id);\n      // verify required parameter 'OrderAuthenticatePaymentRequest' is not null or undefined\n      assertParamExists('pGOrderAuthenticatePayment', 'OrderAuthenticatePaymentRequest', OrderAuthenticatePaymentRequest);\n      const localVarPath = `/orders/pay/authenticate/{cf_payment_id}`.replace(`{${\"cf_payment_id\"}}`, encodeURIComponent(String(cf_payment_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(OrderAuthenticatePaymentRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to view payment details of an order for a payment ID.\n     * @summary Get Payment by ID\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} cf_payment_id The Cashfree payment or transaction ID.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGOrderFetchPayment: (x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGOrderFetchPayment', 'x_api_version', x_api_version);\n      // verify required parameter 'order_id' is not null or undefined\n      assertParamExists('pGOrderFetchPayment', 'order_id', order_id);\n      // verify required parameter 'cf_payment_id' is not null or undefined\n      assertParamExists('pGOrderFetchPayment', 'cf_payment_id', cf_payment_id);\n      const localVarPath = `/orders/{order_id}/payments/{cf_payment_id}`.replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id))).replace(`{${\"cf_payment_id\"}}`, encodeURIComponent(String(cf_payment_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to view all payment details for an order.\n     * @summary Get Payments for an Order\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGOrderFetchPayments: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGOrderFetchPayments', 'x_api_version', x_api_version);\n      // verify required parameter 'order_id' is not null or undefined\n      assertParamExists('pGOrderFetchPayments', 'order_id', order_id);\n      const localVarPath = `/orders/{order_id}/payments`.replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API when you have already created the orders and want Cashfree to process the payment. To use this API S2S flag needs to be enabled from the backend. In case you want to use the cards payment option the PCI DSS flag is required, for more information send an email to \\\"care@cashfree.com\\\".\n     * @summary Order Pay\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {PayOrderRequest} PayOrderRequest Request body to create a transaction at cashfree using &#x60;payment_session_id&#x60;\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGPayOrder: (x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGPayOrder', 'x_api_version', x_api_version);\n      // verify required parameter 'PayOrderRequest' is not null or undefined\n      assertParamExists('pGPayOrder', 'PayOrderRequest', PayOrderRequest);\n      const localVarPath = `/orders/sessions`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(PayOrderRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    })\n  };\n};\n/**\n * PaymentsApi - functional programming interface\n * @export\n */\nconst PaymentsApiFp = function (configuration) {\n  const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Use this API to capture or void a preauthorized payment\n     * @summary Preauthorization\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {AuthorizeOrderRequest} AuthorizeOrderRequest Request to Capture or Void Transactions\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * If you accept OTP on your own page, you can use the below API to send OTP to Cashfree.\n     * @summary Submit or Resend OTP\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} cf_payment_id The Cashfree payment or transaction ID.\n     * @param {OrderAuthenticatePaymentRequest} OrderAuthenticatePaymentRequest Request body to submit/resend headless OTP. To use this API make sure you have headless OTP enabled for your account\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to view payment details of an order for a payment ID.\n     * @summary Get Payment by ID\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} cf_payment_id The Cashfree payment or transaction ID.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to view all payment details for an order.\n     * @summary Get Payments for an Order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API when you have already created the orders and want Cashfree to process the payment. To use this API S2S flag needs to be enabled from the backend. In case you want to use the cards payment option the PCI DSS flag is required, for more information send an email to \\\"care@cashfree.com\\\".\n     * @summary Order Pay\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {PayOrderRequest} PayOrderRequest Request body to create a transaction at cashfree using &#x60;payment_session_id&#x60;\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    }\n  };\n};\n/**\n * PaymentsApi - object-oriented interface\n * @export\n * @class PaymentsApi\n * @extends {BaseAPI}\n */\n/**\n * RefundsApi - axios parameter creator\n * @export\n */\nconst RefundsApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * Use this API to initiate refunds.\n     * @summary Create Refund\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {OrderCreateRefundRequest} OrderCreateRefundRequest Request Body to Create Refunds\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGOrderCreateRefund: (x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGOrderCreateRefund', 'x_api_version', x_api_version);\n      // verify required parameter 'order_id' is not null or undefined\n      assertParamExists('pGOrderCreateRefund', 'order_id', order_id);\n      // verify required parameter 'OrderCreateRefundRequest' is not null or undefined\n      assertParamExists('pGOrderCreateRefund', 'OrderCreateRefundRequest', OrderCreateRefundRequest);\n      const localVarPath = `/orders/{order_id}/refunds`.replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(OrderCreateRefundRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to fetch a specific refund processed on your Cashfree Account.\n     * @summary Get Refund\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} refund_id Refund Id of the refund you want to fetch.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGOrderFetchRefund: (x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGOrderFetchRefund', 'x_api_version', x_api_version);\n      // verify required parameter 'order_id' is not null or undefined\n      assertParamExists('pGOrderFetchRefund', 'order_id', order_id);\n      // verify required parameter 'refund_id' is not null or undefined\n      assertParamExists('pGOrderFetchRefund', 'refund_id', refund_id);\n      const localVarPath = `/orders/{order_id}/refunds/{refund_id}`.replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id))).replace(`{${\"refund_id\"}}`, encodeURIComponent(String(refund_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to fetch all refunds processed against an order.\n     * @summary Get All Refunds for an Order\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGOrderFetchRefunds: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGOrderFetchRefunds', 'x_api_version', x_api_version);\n      // verify required parameter 'order_id' is not null or undefined\n      assertParamExists('pGOrderFetchRefunds', 'order_id', order_id);\n      const localVarPath = `/orders/{order_id}/refunds`.replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    })\n  };\n};\n/**\n * RefundsApi - functional programming interface\n * @export\n */\nconst RefundsApiFp = function (configuration) {\n  const localVarAxiosParamCreator = RefundsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Use this API to initiate refunds.\n     * @summary Create Refund\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {OrderCreateRefundRequest} OrderCreateRefundRequest Request Body to Create Refunds\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to fetch a specific refund processed on your Cashfree Account.\n     * @summary Get Refund\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} refund_id Refund Id of the refund you want to fetch.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to fetch all refunds processed against an order.\n     * @summary Get All Refunds for an Order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    }\n  };\n};\n/**\n * RefundsApi - object-oriented interface\n * @export\n * @class RefundsApi\n * @extends {BaseAPI}\n */\n/**\n * SettlementReconciliationApi - axios parameter creator\n * @export\n */\nconst SettlementReconciliationApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * Use this API to get all settlement details by specifying the settlement ID, settlement UTR or date range.\n     * @summary Get All Settlements\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {FetchSettlementsRequest} FetchSettlementsRequest Request Body to get the settlements\n     * @param {string} [Content_Type] application/json\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {string} [Accept] application/json\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGFetchSettlements: (x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGFetchSettlements', 'x_api_version', x_api_version);\n      // verify required parameter 'FetchSettlementsRequest' is not null or undefined\n      assertParamExists('pGFetchSettlements', 'FetchSettlementsRequest', FetchSettlementsRequest);\n      const localVarPath = `/settlements`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(FetchSettlementsRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * - Use this API to get settlement reconciliation details using Settlement ID, settlement UTR or date range. - This API will return events for the settlement IDs you want\n     * @summary Settlement Reconciliation\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {SettlementFetchReconRequest} SettlementFetchReconRequest Request Body for the settlement reconciliation\n     * @param {string} [Content_Type] application/json\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {string} [Accept] application/json\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGSettlementFetchRecon: (x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGSettlementFetchRecon', 'x_api_version', x_api_version);\n      // verify required parameter 'SettlementFetchReconRequest' is not null or undefined\n      assertParamExists('pGSettlementFetchRecon', 'SettlementFetchReconRequest', SettlementFetchReconRequest);\n      const localVarPath = `/settlement/recon`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(SettlementFetchReconRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    })\n  };\n};\n/**\n * SettlementReconciliationApi - functional programming interface\n * @export\n */\nconst SettlementReconciliationApiFp = function (configuration) {\n  const localVarAxiosParamCreator = SettlementReconciliationApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Use this API to get all settlement details by specifying the settlement ID, settlement UTR or date range.\n     * @summary Get All Settlements\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {FetchSettlementsRequest} FetchSettlementsRequest Request Body to get the settlements\n     * @param {string} [Content_Type] application/json\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {string} [Accept] application/json\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * - Use this API to get settlement reconciliation details using Settlement ID, settlement UTR or date range. - This API will return events for the settlement IDs you want\n     * @summary Settlement Reconciliation\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {SettlementFetchReconRequest} SettlementFetchReconRequest Request Body for the settlement reconciliation\n     * @param {string} [Content_Type] application/json\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {string} [Accept] application/json\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    }\n  };\n};\n/**\n * SettlementReconciliationApi - object-oriented interface\n * @export\n * @class SettlementReconciliationApi\n * @extends {BaseAPI}\n */\n/**\n * SettlementsApi - axios parameter creator\n * @export\n */\nconst SettlementsApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * Use this API to view all the settlements of a particular order.\n     * @summary Get Settlements by Order ID\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    pGOrderFetchSettlement: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGOrderFetchSettlement', 'x_api_version', x_api_version);\n      // verify required parameter 'order_id' is not null or undefined\n      assertParamExists('pGOrderFetchSettlement', 'order_id', order_id);\n      const localVarPath = `/orders/{order_id}/settlements`.replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    })\n  };\n};\n/**\n * SettlementsApi - functional programming interface\n * @export\n */\nconst SettlementsApiFp = function (configuration) {\n  const localVarAxiosParamCreator = SettlementsApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Use this API to view all the settlements of a particular order.\n     * @summary Get Settlements by Order ID\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    }\n  };\n};\n/**\n * SettlementsApi - object-oriented interface\n * @export\n * @class SettlementsApi\n * @extends {BaseAPI}\n */\n/**\n * SoftPOSApi - axios parameter creator\n * @export\n */\nconst SoftPOSApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * Use this API to create new terminals to use softPOS.\n     * @summary Create Terminal\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateTerminalRequest} CreateTerminalRequest Request Body to Create Terminal for SPOS\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    sposCreateTerminal: (x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('sposCreateTerminal', 'x_api_version', x_api_version);\n      // verify required parameter 'CreateTerminalRequest' is not null or undefined\n      assertParamExists('sposCreateTerminal', 'CreateTerminalRequest', CreateTerminalRequest);\n      const localVarPath = `/terminal`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(CreateTerminalRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to create a new terminal transaction. To use this API you should first create an order using the Create Order API. Also, you need to enter the terminal details while creating the order and pass the same terminal information while creating a transaction using the below mentioned API.\n     * @summary Create Terminal Transaction\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateTerminalTransactionRequest} CreateTerminalTransactionRequest Request body to create a terminal transaction\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    sposCreateTerminalTransaction: (x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('sposCreateTerminalTransaction', 'x_api_version', x_api_version);\n      // verify required parameter 'CreateTerminalTransactionRequest' is not null or undefined\n      assertParamExists('sposCreateTerminalTransaction', 'CreateTerminalTransactionRequest', CreateTerminalTransactionRequest);\n      const localVarPath = `/terminal/transactions`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(CreateTerminalTransactionRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to view all details of a terminal.\n     * @summary Get Terminal Status using Phone Number\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} terminal_phone_no The terminal for which you want to view the order details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_idempotency_key?: string,\n     */\n    sposFetchTerminal: (x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('sposFetchTerminal', 'x_api_version', x_api_version);\n      // verify required parameter 'terminal_phone_no' is not null or undefined\n      assertParamExists('sposFetchTerminal', 'terminal_phone_no', terminal_phone_no);\n      const localVarPath = `/terminal/{terminal_phone_no}`.replace(`{${\"terminal_phone_no\"}}`, encodeURIComponent(String(terminal_phone_no)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * You can fetch all the StaticQRs corresponding to given terminal id or phone number. Provide either the terminal_phone_no or terminal_id in the request.\n     * @summary Fetch Terminal QR Codes\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} terminal_phone_no Phone number assigned to the terminal. Required if you are not providing the cf_terminal_id in the request.\n     * @param {string} cf_terminal_id Cashfree terminal id for which you want to get staticQRs. Required if you are not providing the terminal_phone_number in the request.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    sposFetchTerminalQRCodes: (x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('sposFetchTerminalQRCodes', 'x_api_version', x_api_version);\n      // verify required parameter 'terminal_phone_no' is not null or undefined\n      assertParamExists('sposFetchTerminalQRCodes', 'terminal_phone_no', terminal_phone_no);\n      // verify required parameter 'cf_terminal_id' is not null or undefined\n      assertParamExists('sposFetchTerminalQRCodes', 'cf_terminal_id', cf_terminal_id);\n      const localVarPath = `/terminal/qrcodes`;\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      if (terminal_phone_no !== undefined) {\n        localVarQueryParameter['terminal_phone_no'] = terminal_phone_no;\n      }\n      if (cf_terminal_id !== undefined) {\n        localVarQueryParameter['cf_terminal_id'] = cf_terminal_id;\n      }\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to get  terminal transaction.\n     * @summary Get Terminal Transaction\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} utr Utr of the transaction.\n     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    sposFetchTerminalTransaction: (x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('sposFetchTerminalTransaction', 'x_api_version', x_api_version);\n      // verify required parameter 'utr' is not null or undefined\n      assertParamExists('sposFetchTerminalTransaction', 'utr', utr);\n      // verify required parameter 'cf_terminal_id' is not null or undefined\n      assertParamExists('sposFetchTerminalTransaction', 'cf_terminal_id', cf_terminal_id);\n      const localVarPath = `/terminal/{cf_terminal_id}/payments`.replace(`{${\"cf_terminal_id\"}}`, encodeURIComponent(String(cf_terminal_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      if (utr !== undefined) {\n        localVarQueryParameter['utr'] = utr;\n      }\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to update the terminal details. Email, Phone Number, and Terminal Meta are updatable for \\\"Storefront\\\". Only account status change is possible in case of \\\"Agent\\\".\n     * @summary Update Terminal\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n     * @param {UpdateTerminalRequest} UpdateTerminalRequest Request Body to update terminal for SPOS.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    sposUpdateTerminal: (x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('sposUpdateTerminal', 'x_api_version', x_api_version);\n      // verify required parameter 'cf_terminal_id' is not null or undefined\n      assertParamExists('sposUpdateTerminal', 'cf_terminal_id', cf_terminal_id);\n      // verify required parameter 'UpdateTerminalRequest' is not null or undefined\n      assertParamExists('sposUpdateTerminal', 'UpdateTerminalRequest', UpdateTerminalRequest);\n      const localVarPath = `/terminal/{cf_terminal_id}`.replace(`{${\"cf_terminal_id\"}}`, encodeURIComponent(String(cf_terminal_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'PATCH'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(UpdateTerminalRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to update the terminal status.\n     * @summary Update Terminal Status\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n     * @param {UpdateTerminalStatusRequest} UpdateTerminalStatusRequest Request Body to update terminal status for SPOS.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    sposUpdateTerminalStatus: (x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('sposUpdateTerminalStatus', 'x_api_version', x_api_version);\n      // verify required parameter 'cf_terminal_id' is not null or undefined\n      assertParamExists('sposUpdateTerminalStatus', 'cf_terminal_id', cf_terminal_id);\n      // verify required parameter 'UpdateTerminalStatusRequest' is not null or undefined\n      assertParamExists('sposUpdateTerminalStatus', 'UpdateTerminalStatusRequest', UpdateTerminalStatusRequest);\n      const localVarPath = `/terminal/{cf_terminal_id}/status`.replace(`{${\"cf_terminal_id\"}}`, encodeURIComponent(String(cf_terminal_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'PATCH'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(UpdateTerminalStatusRequest, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to upload the terminal documents.\n     * @summary Upload Terminal Docs\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n     * @param {UploadTerminalDocs} UploadTerminalDocs Request Body to update terminal documents for SPOS.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    sposUploadTerminalDocs: (x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('sposUploadTerminalDocs', 'x_api_version', x_api_version);\n      // verify required parameter 'cf_terminal_id' is not null or undefined\n      assertParamExists('sposUploadTerminalDocs', 'cf_terminal_id', cf_terminal_id);\n      // verify required parameter 'UploadTerminalDocs' is not null or undefined\n      assertParamExists('sposUploadTerminalDocs', 'UploadTerminalDocs', UploadTerminalDocs);\n      const localVarPath = `/terminal/{cf_terminal_id}/docs`.replace(`{${\"cf_terminal_id\"}}`, encodeURIComponent(String(cf_terminal_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'POST'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['Content-Type'] = 'application/json';\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      localVarRequestOptions.data = serializeDataIfNeeded(UploadTerminalDocs, localVarRequestOptions, configuration);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    })\n  };\n};\n/**\n * SoftPOSApi - functional programming interface\n * @export\n */\nconst SoftPOSApiFp = function (configuration) {\n  const localVarAxiosParamCreator = SoftPOSApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Use this API to create new terminals to use softPOS.\n     * @summary Create Terminal\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateTerminalRequest} CreateTerminalRequest Request Body to Create Terminal for SPOS\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to create a new terminal transaction. To use this API you should first create an order using the Create Order API. Also, you need to enter the terminal details while creating the order and pass the same terminal information while creating a transaction using the below mentioned API.\n     * @summary Create Terminal Transaction\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateTerminalTransactionRequest} CreateTerminalTransactionRequest Request body to create a terminal transaction\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to view all details of a terminal.\n     * @summary Get Terminal Status using Phone Number\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} terminal_phone_no The terminal for which you want to view the order details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * You can fetch all the StaticQRs corresponding to given terminal id or phone number. Provide either the terminal_phone_no or terminal_id in the request.\n     * @summary Fetch Terminal QR Codes\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} terminal_phone_no Phone number assigned to the terminal. Required if you are not providing the cf_terminal_id in the request.\n     * @param {string} cf_terminal_id Cashfree terminal id for which you want to get staticQRs. Required if you are not providing the terminal_phone_number in the request.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to get  terminal transaction.\n     * @summary Get Terminal Transaction\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} utr Utr of the transaction.\n     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sposFetchTerminalTransaction(x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminalTransaction(x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to update the terminal details. Email, Phone Number, and Terminal Meta are updatable for \\\"Storefront\\\". Only account status change is possible in case of \\\"Agent\\\".\n     * @summary Update Terminal\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n     * @param {UpdateTerminalRequest} UpdateTerminalRequest Request Body to update terminal for SPOS.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to update the terminal status.\n     * @summary Update Terminal Status\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n     * @param {UpdateTerminalStatusRequest} UpdateTerminalStatusRequest Request Body to update terminal status for SPOS.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to upload the terminal documents.\n     * @summary Upload Terminal Docs\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n     * @param {UploadTerminalDocs} UploadTerminalDocs Request Body to update terminal documents for SPOS.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    sposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    }\n  };\n};\n/**\n * SoftPOSApi - object-oriented interface\n * @export\n * @class SoftPOSApi\n * @extends {BaseAPI}\n */\n/**\n * TokenVaultApi - axios parameter creator\n * @export\n */\nconst TokenVaultApiAxiosParamCreator = function (configuration) {\n  return {\n    /**\n     * Use this API to delete a saved card instrument for a customer_id and instrument_id\n     * @summary Delete Saved Card Instrument\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n     * @param {string} instrument_id The instrument_id which needs to be deleted\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGCustomerDeleteInstrument: (x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGCustomerDeleteInstrument', 'x_api_version', x_api_version);\n      // verify required parameter 'customer_id' is not null or undefined\n      assertParamExists('pGCustomerDeleteInstrument', 'customer_id', customer_id);\n      // verify required parameter 'instrument_id' is not null or undefined\n      assertParamExists('pGCustomerDeleteInstrument', 'instrument_id', instrument_id);\n      const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}`.replace(`{${\"customer_id\"}}`, encodeURIComponent(String(customer_id))).replace(`{${\"instrument_id\"}}`, encodeURIComponent(String(instrument_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'DELETE'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to fetch a single specific saved card for a customer_id by it\\'s instrument_id\n     * @summary Fetch Specific Saved Card Instrument\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n     * @param {string} instrument_id The instrument_id of the saved instrument which needs to be queried\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGCustomerFetchInstrument: (x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGCustomerFetchInstrument', 'x_api_version', x_api_version);\n      // verify required parameter 'customer_id' is not null or undefined\n      assertParamExists('pGCustomerFetchInstrument', 'customer_id', customer_id);\n      // verify required parameter 'instrument_id' is not null or undefined\n      assertParamExists('pGCustomerFetchInstrument', 'instrument_id', instrument_id);\n      const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}`.replace(`{${\"customer_id\"}}`, encodeURIComponent(String(customer_id))).replace(`{${\"instrument_id\"}}`, encodeURIComponent(String(instrument_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API to fetch saved cards for a customer_id\n     * @summary Fetch All Saved Card Instrument\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n     * @param {PGCustomerFetchInstrumentsInstrumentTypeEnum} instrument_type Payment mode or type of saved instrument\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGCustomerFetchInstruments: (x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGCustomerFetchInstruments', 'x_api_version', x_api_version);\n      // verify required parameter 'customer_id' is not null or undefined\n      assertParamExists('pGCustomerFetchInstruments', 'customer_id', customer_id);\n      // verify required parameter 'instrument_type' is not null or undefined\n      assertParamExists('pGCustomerFetchInstruments', 'instrument_type', instrument_type);\n      const localVarPath = `/customers/{customer_id}/instruments`.replace(`{${\"customer_id\"}}`, encodeURIComponent(String(customer_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      if (instrument_type !== undefined) {\n        localVarQueryParameter['instrument_type'] = instrument_type;\n      }\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    }),\n    /**\n     * Use this API To get the card network token, token expiry and cryptogram for a saved card instrument using instrument id\n     * @summary Fetch cryptogram for a saved card instrument\n     \n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n     * @param {string} instrument_id The instrument_id of the saved card instrument which needs to be queried\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * x_request_id?: string,\n     */\n    pGCustomerInstrumentsFetchCryptogram: (x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n      // verify required parameter 'x_api_version' is not null or undefined\n      assertParamExists('pGCustomerInstrumentsFetchCryptogram', 'x_api_version', x_api_version);\n      // verify required parameter 'customer_id' is not null or undefined\n      assertParamExists('pGCustomerInstrumentsFetchCryptogram', 'customer_id', customer_id);\n      // verify required parameter 'instrument_id' is not null or undefined\n      assertParamExists('pGCustomerInstrumentsFetchCryptogram', 'instrument_id', instrument_id);\n      const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}/cryptogram`.replace(`{${\"customer_id\"}}`, encodeURIComponent(String(customer_id))).replace(`{${\"instrument_id\"}}`, encodeURIComponent(String(instrument_id)));\n      // use dummy base URL string because the URL constructor only accepts absolute URLs.\n      var url = \"https://sandbox.cashfree.com/pg\";\n      if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n        url = \"https://api.cashfree.com/pg\";\n      }\n      const localVarUrlObj = new URL(localVarPath, url);\n      let baseOptions;\n      if (configuration) {\n        baseOptions = configuration.baseOptions;\n      }\n      const localVarRequestOptions = Object.assign(Object.assign({\n        method: 'GET'\n      }, baseOptions), options);\n      const localVarHeaderParameter = {};\n      const localVarQueryParameter = {};\n      // authentication XPartnerAPIKey required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n      // authentication XClientSecret required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n      // authentication XPartnerMerchantID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n      // authentication XClientID required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n      // authentication XClientSignatureHeader required\n      yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n      localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n      if (x_api_version != null && x_api_version != undefined) {\n        localVarHeaderParameter['x-api-version'] = x_api_version;\n      }\n      if (x_request_id != null && x_request_id != undefined) {\n        localVarHeaderParameter['x-request-id'] = x_request_id;\n      }\n      if (x_idempotency_key != null && x_idempotency_key != undefined) {\n        localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n      }\n      setSearchParams(localVarUrlObj, localVarQueryParameter);\n      let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n      localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n      return {\n        url: toPathString(localVarUrlObj),\n        options: localVarRequestOptions\n      };\n    })\n  };\n};\n/**\n * TokenVaultApi - functional programming interface\n * @export\n */\nconst TokenVaultApiFp = function (configuration) {\n  const localVarAxiosParamCreator = TokenVaultApiAxiosParamCreator(configuration);\n  return {\n    /**\n     * Use this API to delete a saved card instrument for a customer_id and instrument_id\n     * @summary Delete Saved Card Instrument\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n     * @param {string} instrument_id The instrument_id which needs to be deleted\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to fetch a single specific saved card for a customer_id by it\\'s instrument_id\n     * @summary Fetch Specific Saved Card Instrument\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n     * @param {string} instrument_id The instrument_id of the saved instrument which needs to be queried\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API to fetch saved cards for a customer_id\n     * @summary Fetch All Saved Card Instrument\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n     * @param {PGCustomerFetchInstrumentsInstrumentTypeEnum} instrument_type Payment mode or type of saved instrument\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    },\n    /**\n     * Use this API To get the card network token, token expiry and cryptogram for a saved card instrument using instrument id\n     * @summary Fetch cryptogram for a saved card instrument\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n     * @param {string} instrument_id The instrument_id of the saved card instrument which needs to be queried\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     */\n    pGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {\n      return __awaiter(this, void 0, void 0, function* () {\n        const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);\n        var url = \"https://sandbox.cashfree.com/pg\";\n        if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n          url = \"https://api.cashfree.com/pg\";\n        }\n        return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n      });\n    }\n  };\n};\n/**\n * TokenVaultApi - object-oriented interface\n * @export\n * @class TokenVaultApi\n * @extends {BaseAPI}\n */\n/**\n * @export\n */\nexport const PGCustomerFetchInstrumentsInstrumentTypeEnum = {\n  CARD: 'card',\n  UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nclass Environment {\n  constructor() {\n    this.PRODUCTION = CFEnvironment.PRODUCTION;\n    this.SANDBOX = CFEnvironment.SANDBOX;\n  }\n}\nexport class PGWebhookEvent {\n  constructor(type, rawBody, object) {\n    this.type = type;\n    this.raw = rawBody;\n    this.object = object;\n  }\n}\nexport class Cashfree {\n  /**\n   * Use this API to verify your webhook signature once you receive from Cashfree's server.\n   * @summary Verify Webhook Signatures\n   * @param {string} signature that is present in the header of the webhook (\"x-webhook-signature\")\n   * @param {string} rawBody is the entire body sent to the server in string format\n   * @param {string} timestamp that is present in the header of the webhook (\"x-webhook-timestamp\")\n   * @throws {Error}\n   */\n  static PGVerifyWebhookSignature(signature, rawBody, timestamp) {\n    const body = timestamp + rawBody;\n    const secretKey = Cashfree.XClientSecret;\n    let generatedSignature = crypto.createHmac('sha256', secretKey).update(body).digest(\"base64\");\n    if (generatedSignature === signature) {\n      let jsonObject = JSON.parse(rawBody);\n      return new PGWebhookEvent(jsonObject.type, rawBody, jsonObject);\n    }\n    throw new Error(\"Generated signature and received signature did not match.\");\n  }\n  /**\n   * Create Customer at Cashfree\n   * @summary Create Customer at Cashfree\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {CreateCustomerRequest} CreateCustomerRequest Request to create a new customer at Cashfree\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof CustomersApi\n   */\n  static PGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return CustomersApiFp().pGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * The Create On Demand Transfer API will create a new on-demand request either from to the merchant or from to the vendor.\n   * @summary Create On Demand Transfer\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} vendor_id The id which uniquely identifies your vendor.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {AdjustVendorBalanceRequest} [AdjustVendorBalanceRequest] Adjust Vendor Balance Request Body.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EasySplitApi\n   */\n  static PGESCreateOnDemandTransfer(x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EasySplitApiFp().pGESCreateOnDemandTransfer(x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to create a new vendor to your EasySplit account along with the KYC details. Provide KYC details such as account_type, business_type, gst, cin, pan, passport number and so on.\n   * @summary Create vendor\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {CreateVendorRequest} [CreateVendorRequest] Create Vendor Request Body.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EasySplitApi\n   */\n  static PGESCreateVendors(x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EasySplitApiFp().pGESCreateVendors(x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to download the uploaded KYC documents of that particular vendor. Provide the document type. Click the link from the sample request to download the KYC document.\n   * @summary Download Vendor Documents\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} doc_type Mention the document type that has to be downloaded. Only an uploaded document can be downloaded.\n   * @param {string} vendor_id The id which uniquely identifies your vendor.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EasySplitApi\n   */\n  static PGESDownloadVendorsDocs(x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EasySplitApiFp().pGESDownloadVendorsDocs(x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to get the details of a specific vendor associated with your Easy Split account.\n   * @summary Get Vendor All Details\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} vendor_id The id which uniquely identifies your vendor.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EasySplitApi\n   */\n  static PGESFetchVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EasySplitApiFp().pGESFetchVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * This API fetches the available amount with the merchant, vendor, and the unsettled amount for the merchant as well as the vendor.\n   * @summary Get On Demand Balance\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} vendor_id The id which uniquely identifies your vendor.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EasySplitApi\n   */\n  static PGESGetVendorBalance(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EasySplitApiFp().pGESGetVendorBalance(x_api_version, vendor_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * This API returns the applicable service charge and service tax for a vendor balance transfer, based on the provided amount and rate type.\n   * @summary Get Vendor Balance Transfer Charges\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {number} amount Specify the amount for which you want to view the service charges and service taxes in the response.\n   * @param {string} rate_type Mention the type of rate for which you want to check the charges. Possible value: VENDOR_ON_DEMAND\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EasySplitApi\n   */\n  static PGESGetVendorBalanceTransferCharges(x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EasySplitApiFp().pGESGetVendorBalanceTransferCharges(x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to fetch the details of all the KYC details of a particular vendor.\n   * @summary Get Vendor All Documents Status\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} vendor_id The id which uniquely identifies your vendor.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EasySplitApi\n   */\n  static PGESGetVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EasySplitApiFp().pGESGetVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to get all the split details, settled and unsettled transactions details of each vendor who were part of a particular order by providing order Id or start date and end date.\n   * @summary Get Split and Settlement Details by OrderID v2.0\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {ESOrderReconRequest} [ESOrderReconRequest] Get Split and Settlement Details by OrderID v2.0\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EasySplitApi\n   */\n  static PGESOrderRecon(x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EasySplitApiFp().pGESOrderRecon(x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to edit the existing vendor details added to your EasySplit account. You can edit vendor details such as name, email, phone number, upi details, and any of the KYC details.\n   * @summary Update vendor Details\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} vendor_id The id which uniquely identifies your vendor.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {UpdateVendorRequest} [UpdateVendorRequest] Create Vendor Request Body.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EasySplitApi\n   */\n  static PGESUpdateVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EasySplitApiFp().pGESUpdateVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to upload KYC documents of a specific vendor.\n   * @summary Upload Vendor Docs\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} vendor_id The id which uniquely identifies your vendor.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {string} [doc_type] Mention the type of the document you are uploading. Possible values: UIDAI_FRONT, UIDAI_BACK, UIDAI_NUMBER, DL, DL_NUMBER, PASSPORT_FRONT, PASSPORT_BACK, PASSPORT_NUMBER, VOTER_ID, VOTER_ID_NUMBER, PAN, PAN_NUMBER, GST, GSTIN_NUMBER, CIN, CIN_NUMBER, NBFC_CERTIFICATE. If the doc type ends with a number you should add the doc value else upload the doc file.\n   * @param {string} [doc_value] Enter the display name of the uploaded file.\n   * @param {File} [file] Select the document that should be uploaded or provide the path of that file. You cannot upload a file that is more than 2MB in size.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EasySplitApi\n   */\n  static PGESUploadVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EasySplitApiFp().pGESUploadVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Split After Payment API splits the payments to vendors after successful payment from the customers.\n   * @summary Split After Payment\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} order_id The id which uniquely identifies your order\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {SplitAfterPaymentRequest} [SplitAfterPaymentRequest] Request Body to Create Split for an order.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EasySplitApi\n   */\n  static PGOrderSplitAfterPayment(x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EasySplitApiFp().pGOrderSplitAfterPayment(x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * This API will create a static split scheme wherein you can define the split type and the vendor-wise split percentage.\n   * @summary Create Static Split Configuration\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {StaticSplitRequest} [StaticSplitRequest] Static Split\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EasySplitApi\n   */\n  static PGOrderStaticSplit(x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EasySplitApiFp().pGOrderStaticSplit(x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to get eligible Cardless EMI Payment Methods available for a customer on an order basis their phone number.\n   * @summary Get Eligible Cardless EMI Payment Methods for a customer on an order\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {EligibilityFetchCardlessEMIRequest} EligibilityFetchCardlessEMIRequest Request Body to get eligible cardless emi options for a customer and order\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EligibilityApi\n   */\n  static PGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EligibilityApiFp().pGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to get eligible offers for an order_id or order amount.\n   * @summary Get Eligible Offers for an Order\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {EligibilityFetchOffersRequest} EligibilityFetchOffersRequest Request Body to get eligible offers for a customer and order\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EligibilityApi\n   */\n  static PGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EligibilityApiFp().pGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to get eligible Paylater Payment Methods for a customer on an order.\n   * @summary Get Eligible Paylater for a customer on an order\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {EligibilityFetchPaylaterRequest} EligibilityFetchPaylaterRequest Request Body to get eligible paylater options for a customer and order\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EligibilityApi\n   */\n  static PGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EligibilityApiFp().pGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to get eligible Payment Methods\n   * @summary Get eligible Payment Methods\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {EligibilityFetchPaymentMethodsRequest} EligibilityFetchPaymentMethodsRequest Request Body to get eligible payment methods for an account and order\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof EligibilityApi\n   */\n  static PGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return EligibilityApiFp().pGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to create offers with Cashfree from your backend\n   * @summary Create Offer\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {CreateOfferRequest} CreateOfferRequest Request body to create an offer at Cashfree\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OffersApi\n   */\n  static PGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return OffersApiFp().pGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to get offer by offer_id\n   * @summary Get Offer by ID\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} offer_id The offer ID for which you want to view the offer details.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OffersApi\n   */\n  static PGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return OffersApiFp().pGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * ### Order An order is an entity which has a amount and currency associated with it. It is something for which you want to collect payment for. Use this API to create orders with Cashfree from your backend to get a `payment_sessions_id`.  You can use the `payment_sessions_id` to create a transaction for the order.\n   * @summary Create Order\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {CreateOrderRequest} CreateOrderRequest Request body to create an order at cashfree\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrdersApi\n   */\n  static PGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return OrdersApiFp().pGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to fetch the order that was created at Cashfree\\'s using the `order_id`.  ## When to use this API - To check the status of your order - Once the order is PAID - Once your customer returns to `return_url`\n   * @summary Get Order\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} order_id The id which uniquely identifies your order\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrdersApi\n   */\n  static PGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return OrdersApiFp().pGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to terminate the order that was created at Cashfree\\'s using the `order_id`.\n   * @summary Terminate Order\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} order_id The id which uniquely identifies your order\n   * @param {TerminateOrderRequest} TerminateOrderRequest Request body to terminate an order at cashfree\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof OrdersApi\n   */\n  static PGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return OrdersApiFp().pGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * - Use this API to get the payment gateway reconciliation details with date range. - It will have events for your payment account\n   * @summary PG Reconciliation\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {FetchReconRequest} FetchReconRequest Request Body for the reconciliation\n   * @param {string} [Content_Type] application/json\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {string} [Accept] application/json\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PGReconciliationApi\n   */\n  static PGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return PGReconciliationApiFp().pGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.\n   * @summary Cancel Payment Link\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} link_id The payment link ID for which you want to view the details.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentLinksApi\n   */\n  static PGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return PaymentLinksApiFp().pGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.\n   * @summary Create Payment Link\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {CreateLinkRequest} CreateLinkRequest Request Body to Create Payment Links\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentLinksApi\n   */\n  static PGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return PaymentLinksApiFp().pGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to view all details and status of a payment link.\n   * @summary Fetch Payment Link Details\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} link_id The payment link ID for which you want to view the details.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentLinksApi\n   */\n  static PGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return PaymentLinksApiFp().pGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to view all order details for a payment link.\n   * @summary Get Orders for a Payment Link\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} link_id The payment link ID for which you want to view the details.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentLinksApi\n   */\n  static PGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return PaymentLinksApiFp().pGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to capture or void a preauthorized payment\n   * @summary Preauthorization\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} order_id The id which uniquely identifies your order\n   * @param {AuthorizeOrderRequest} AuthorizeOrderRequest Request to Capture or Void Transactions\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentsApi\n   */\n  static PGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return PaymentsApiFp().pGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * If you accept OTP on your own page, you can use the below API to send OTP to Cashfree.\n   * @summary Submit or Resend OTP\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} cf_payment_id The Cashfree payment or transaction ID.\n   * @param {OrderAuthenticatePaymentRequest} OrderAuthenticatePaymentRequest Request body to submit/resend headless OTP. To use this API make sure you have headless OTP enabled for your account\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentsApi\n   */\n  static PGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return PaymentsApiFp().pGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to view payment details of an order for a payment ID.\n   * @summary Get Payment by ID\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} order_id The id which uniquely identifies your order\n   * @param {string} cf_payment_id The Cashfree payment or transaction ID.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentsApi\n   */\n  static PGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return PaymentsApiFp().pGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to view all payment details for an order.\n   * @summary Get Payments for an Order\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} order_id The id which uniquely identifies your order\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentsApi\n   */\n  static PGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return PaymentsApiFp().pGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API when you have already created the orders and want Cashfree to process the payment. To use this API S2S flag needs to be enabled from the backend. In case you want to use the cards payment option the PCI DSS flag is required, for more information send an email to \\\"care@cashfree.com\\\".\n   * @summary Order Pay\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {PayOrderRequest} PayOrderRequest Request body to create a transaction at cashfree using &#x60;payment_session_id&#x60;\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof PaymentsApi\n   */\n  static PGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return PaymentsApiFp().pGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to initiate refunds.\n   * @summary Create Refund\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} order_id The id which uniquely identifies your order\n   * @param {OrderCreateRefundRequest} OrderCreateRefundRequest Request Body to Create Refunds\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RefundsApi\n   */\n  static PGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return RefundsApiFp().pGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to fetch a specific refund processed on your Cashfree Account.\n   * @summary Get Refund\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} order_id The id which uniquely identifies your order\n   * @param {string} refund_id Refund Id of the refund you want to fetch.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RefundsApi\n   */\n  static PGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return RefundsApiFp().pGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to fetch all refunds processed against an order.\n   * @summary Get All Refunds for an Order\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} order_id The id which uniquely identifies your order\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof RefundsApi\n   */\n  static PGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return RefundsApiFp().pGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to get all settlement details by specifying the settlement ID, settlement UTR or date range.\n   * @summary Get All Settlements\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {FetchSettlementsRequest} FetchSettlementsRequest Request Body to get the settlements\n   * @param {string} [Content_Type] application/json\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {string} [Accept] application/json\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SettlementReconciliationApi\n   */\n  static PGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return SettlementReconciliationApiFp().pGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * - Use this API to get settlement reconciliation details using Settlement ID, settlement UTR or date range. - This API will return events for the settlement IDs you want\n   * @summary Settlement Reconciliation\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {SettlementFetchReconRequest} SettlementFetchReconRequest Request Body for the settlement reconciliation\n   * @param {string} [Content_Type] application/json\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {string} [Accept] application/json\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SettlementReconciliationApi\n   */\n  static PGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return SettlementReconciliationApiFp().pGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to view all the settlements of a particular order.\n   * @summary Get Settlements by Order ID\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} order_id The id which uniquely identifies your order\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SettlementsApi\n   */\n  static PGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return SettlementsApiFp().pGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to create new terminals to use softPOS.\n   * @summary Create Terminal\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {CreateTerminalRequest} CreateTerminalRequest Request Body to Create Terminal for SPOS\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SoftPOSApi\n   */\n  static SposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return SoftPOSApiFp().sposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to create a new terminal transaction. To use this API you should first create an order using the Create Order API. Also, you need to enter the terminal details while creating the order and pass the same terminal information while creating a transaction using the below mentioned API.\n   * @summary Create Terminal Transaction\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {CreateTerminalTransactionRequest} CreateTerminalTransactionRequest Request body to create a terminal transaction\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SoftPOSApi\n   */\n  static SposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return SoftPOSApiFp().sposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to view all details of a terminal.\n   * @summary Get Terminal Status using Phone Number\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} terminal_phone_no The terminal for which you want to view the order details.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SoftPOSApi\n   */\n  static SposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return SoftPOSApiFp().sposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * You can fetch all the StaticQRs corresponding to given terminal id or phone number. Provide either the terminal_phone_no or terminal_id in the request.\n   * @summary Fetch Terminal QR Codes\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} terminal_phone_no Phone number assigned to the terminal. Required if you are not providing the cf_terminal_id in the request.\n   * @param {string} cf_terminal_id Cashfree terminal id for which you want to get staticQRs. Required if you are not providing the terminal_phone_number in the request.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SoftPOSApi\n   */\n  static SposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return SoftPOSApiFp().sposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to get  terminal transaction.\n   * @summary Get Terminal Transaction\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} utr Utr of the transaction.\n   * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SoftPOSApi\n   */\n  static SposFetchTerminalTransaction(x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return SoftPOSApiFp().sposFetchTerminalTransaction(x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to update the terminal details. Email, Phone Number, and Terminal Meta are updatable for \\\"Storefront\\\". Only account status change is possible in case of \\\"Agent\\\".\n   * @summary Update Terminal\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n   * @param {UpdateTerminalRequest} UpdateTerminalRequest Request Body to update terminal for SPOS.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SoftPOSApi\n   */\n  static SposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return SoftPOSApiFp().sposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to update the terminal status.\n   * @summary Update Terminal Status\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n   * @param {UpdateTerminalStatusRequest} UpdateTerminalStatusRequest Request Body to update terminal status for SPOS.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SoftPOSApi\n   */\n  static SposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return SoftPOSApiFp().sposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to upload the terminal documents.\n   * @summary Upload Terminal Docs\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n   * @param {UploadTerminalDocs} UploadTerminalDocs Request Body to update terminal documents for SPOS.\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof SoftPOSApi\n   */\n  static SposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return SoftPOSApiFp().sposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to delete a saved card instrument for a customer_id and instrument_id\n   * @summary Delete Saved Card Instrument\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n   * @param {string} instrument_id The instrument_id which needs to be deleted\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TokenVaultApi\n   */\n  static PGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return TokenVaultApiFp().pGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to fetch a single specific saved card for a customer_id by it\\'s instrument_id\n   * @summary Fetch Specific Saved Card Instrument\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n   * @param {string} instrument_id The instrument_id of the saved instrument which needs to be queried\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TokenVaultApi\n   */\n  static PGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return TokenVaultApiFp().pGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API to fetch saved cards for a customer_id\n   * @summary Fetch All Saved Card Instrument\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n   * @param {PGCustomerFetchInstrumentsInstrumentTypeEnum} instrument_type Payment mode or type of saved instrument\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TokenVaultApi\n   */\n  static PGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return TokenVaultApiFp().pGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n  /**\n   * Use this API To get the card network token, token expiry and cryptogram for a saved card instrument using instrument id\n   * @summary Fetch cryptogram for a saved card instrument\n   * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n   * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n   * @param {string} instrument_id The instrument_id of the saved card instrument which needs to be queried\n   * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n   * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n   * @param {*} [options] Override http request option.\n   * @throws {RequiredError}\n   * @memberof TokenVaultApi\n   */\n  static PGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {\n    if (Cashfree.XEnableErrorAnalytics) {\n      Sentry.init({\n        dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n        // Performance Monitoring\n        tracesSampleRate: 1.0,\n        // Set sampling rate for profiling - this is relative to tracesSampleRate\n        profilesSampleRate: 1.0,\n        attachStacktrace: true,\n        enableTracing: true,\n        beforeSend: event => {\n          delete event.contexts.os;\n          delete event.contexts.device;\n          delete event.server_name;\n          if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n            const stackTrace = event.exception.values[0].stacktrace;\n            if (stackTrace && stackTrace.frames) {\n              const filteredDomains = stackTrace.frames.filter(x => x.filename.includes(\"cashfree-pg\")).map(x => x.filename);\n              if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                if (Cashfree.XEnableErrorAnalytics) {\n                  return event;\n                }\n                return null;\n              }\n            }\n          }\n          return null;\n        }\n      });\n      Sentry.configureScope(scope => {\n        if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n          scope.setExtra('environment', 'sandbox');\n        } else {\n          scope.setExtra('environment', 'production');\n        }\n        scope.setExtra('release', \"4.1.2\");\n      });\n    }\n    try {\n      return TokenVaultApiFp().pGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then(request => request(Cashfree.axios, Cashfree.basePath));\n    } catch (error) {\n      if (Cashfree.XEnableErrorAnalytics) {\n        Sentry.captureException(error);\n      }\n      throw error;\n    }\n  }\n}\nCashfree.XEnableErrorAnalytics = true;\nCashfree.XApiVersion = \"2023-08-01\";\nCashfree.Environment = new Environment();","map":{"version":3,"names":["__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","e","rejected","result","done","then","apply","globalAxios","assertParamExists","setApiKeyToObject","setSearchParams","serializeDataIfNeeded","toPathString","createRequestFunction","CFEnvironment","Sentry","crypto","ApiErrorTypeEnum","API_ERROR","UNKNOWN_DEFAULT_OPEN_API","ApiError404TypeEnum","INVALID_REQUEST_ERROR","ApiError409TypeEnum","ApiError502TypeEnum","AppProviderEnum","GPAY","PHONEPE","OLA","PAYTM","AMAZON","AIRTEL","FREECHARGE","MOBIKWIK","JIO","AuthorizationInPaymentsEntityActionEnum","CAPTURE","VOID","AuthorizationInPaymentsEntityStatusEnum","SUCCESS","PENDING","AuthorizeOrderRequestActionEnum","BadRequestErrorTypeEnum","CardChannelEnum","LINK","POST","CardTokenTypeEnum","ISSUER_TOKEN","NETWORK_GC_TOKEN","ISSUER_GC_TOKEN","CardCardBankNameEnum","KOTAK","ICICI","RBL","BOB","STANDARD_CHARTERED","CardEMICardBankNameEnum","HDFC","AXIS","AU","YES","SBI","FED","HSBC","CITI","AMEX","CardlessEMIProviderEnum","FLEXMONEY","ZESTMONEY","CASHE","IDFC","CashbackDetailsCashbackTypeEnum","FLAT","PERCENTAGE","DiscountDetailsDiscountTypeEnum","IdempotencyErrorTypeEnum","IDEMPOTENCY_ERROR","InstrumentEntityInstrumentTypeEnum","CARD","InstrumentEntityInstrumentStatusEnum","ACTIVE","INACTIVE","OfferDetailsOfferTypeEnum","DISCOUNT","CASHBACK","DISCOUNT_AND_CASHBACK","NO_COST_EMI","OfferTncOfferTncTypeEnum","TEXT","OfferType","OrderAuthenticateEntityActionEnum","SUBMIT_OTP","RESEND_OTP","OrderAuthenticateEntityAuthenticateStatusEnum","FAILED","OrderAuthenticatePaymentRequestActionEnum","OrderCreateRefundRequestRefundSpeedEnum","STANDARD","INSTANT","PayOrderEntityPaymentMethodEnum","NETBANKING","UPI","APP","CARDLESS_EMI","PAYLATER","BANKTRANSFER","PayOrderEntityChannelEnum","COLLECT","QRCODE","PayOrderEntityActionEnum","CUSTOM","FORM","PaylaterProviderEnum","FLEXIPAY","LAZYPAY","OLAPOSTPAID","SIMPL","FREECHARGEPAYLATER","PaymentEntityPaymentStatusEnum","NOT_ATTEMPTED","USER_DROPPED","CANCELLED","RateLimitErrorTypeEnum","RATE_LIMIT_ERROR","RefundEntityEntityEnum","REFUND","RefundEntityRefundStatusEnum","ONHOLD","RefundEntityRefundTypeEnum","PAYMENT_AUTO_REFUND","MERCHANT_INITIATED","UNRECONCILED_AUTO_REFUND","RefundEntityRefundModeEnum","TerminalPaymentEntityPaymentStatusEnum","UpiChannelEnum","CustomersApiAxiosParamCreator","configuration","pGCreateCustomer","x_api_version","CreateCustomerRequest","x_request_id","x_idempotency_key","options","localVarPath","url","Cashfree","XEnvironment","PRODUCTION","localVarUrlObj","URL","baseOptions","localVarRequestOptions","Object","assign","method","localVarHeaderParameter","localVarQueryParameter","undefined","headersFromBaseOptions","headers","data","CustomersApiFp","localVarAxiosParamCreator","localVarAxiosArgs","EasySplitApiAxiosParamCreator","pGESCreateOnDemandTransfer","vendor_id","AdjustVendorBalanceRequest","replace","encodeURIComponent","String","pGESCreateVendors","CreateVendorRequest","pGESDownloadVendorsDocs","doc_type","pGESFetchVendors","pGESGetVendorBalance","pGESGetVendorBalanceTransferCharges","amount","rate_type","pGESGetVendorsDocs","pGESOrderRecon","ESOrderReconRequest","pGESUpdateVendors","UpdateVendorRequest","pGESUploadVendorsDocs","doc_value","file","localVarFormParams","formDataCtor","FormData","append","pGOrderSplitAfterPayment","order_id","SplitAfterPaymentRequest","pGOrderStaticSplit","StaticSplitRequest","EasySplitApiFp","EligibilityApiAxiosParamCreator","pGEligibilityFetchCardlessEMI","EligibilityFetchCardlessEMIRequest","pGEligibilityFetchOffers","EligibilityFetchOffersRequest","pGEligibilityFetchPaylater","EligibilityFetchPaylaterRequest","pGEligibilityFetchPaymentMethods","EligibilityFetchPaymentMethodsRequest","EligibilityApiFp","OffersApiAxiosParamCreator","pGCreateOffer","CreateOfferRequest","pGFetchOffer","offer_id","OffersApiFp","OrdersApiAxiosParamCreator","pGCreateOrder","CreateOrderRequest","pGFetchOrder","pGTerminateOrder","TerminateOrderRequest","OrdersApiFp","PGReconciliationApiAxiosParamCreator","pGFetchRecon","FetchReconRequest","Content_Type","Accept","PGReconciliationApiFp","PaymentLinksApiAxiosParamCreator","pGCancelLink","link_id","pGCreateLink","CreateLinkRequest","pGFetchLink","pGLinkFetchOrders","PaymentLinksApiFp","PaymentsApiAxiosParamCreator","pGAuthorizeOrder","AuthorizeOrderRequest","pGOrderAuthenticatePayment","cf_payment_id","OrderAuthenticatePaymentRequest","pGOrderFetchPayment","pGOrderFetchPayments","pGPayOrder","PayOrderRequest","PaymentsApiFp","RefundsApiAxiosParamCreator","pGOrderCreateRefund","OrderCreateRefundRequest","pGOrderFetchRefund","refund_id","pGOrderFetchRefunds","RefundsApiFp","SettlementReconciliationApiAxiosParamCreator","pGFetchSettlements","FetchSettlementsRequest","pGSettlementFetchRecon","SettlementFetchReconRequest","SettlementReconciliationApiFp","SettlementsApiAxiosParamCreator","pGOrderFetchSettlement","SettlementsApiFp","SoftPOSApiAxiosParamCreator","sposCreateTerminal","CreateTerminalRequest","sposCreateTerminalTransaction","CreateTerminalTransactionRequest","sposFetchTerminal","terminal_phone_no","sposFetchTerminalQRCodes","cf_terminal_id","sposFetchTerminalTransaction","utr","sposUpdateTerminal","UpdateTerminalRequest","sposUpdateTerminalStatus","UpdateTerminalStatusRequest","sposUploadTerminalDocs","UploadTerminalDocs","SoftPOSApiFp","TokenVaultApiAxiosParamCreator","pGCustomerDeleteInstrument","customer_id","instrument_id","pGCustomerFetchInstrument","pGCustomerFetchInstruments","instrument_type","pGCustomerInstrumentsFetchCryptogram","TokenVaultApiFp","PGCustomerFetchInstrumentsInstrumentTypeEnum","Environment","constructor","SANDBOX","PGWebhookEvent","type","rawBody","object","raw","PGVerifyWebhookSignature","signature","timestamp","body","secretKey","XClientSecret","generatedSignature","createHmac","update","digest","jsonObject","JSON","parse","Error","PGCreateCustomer","XEnableErrorAnalytics","init","dsn","tracesSampleRate","profilesSampleRate","attachStacktrace","enableTracing","beforeSend","event","contexts","os","device","server_name","exception","values","length","stacktrace","stackTrace","frames","filteredDomains","filter","x","filename","includes","map","configureScope","scope","setExtra","request","axios","basePath","error","captureException","PGESCreateOnDemandTransfer","PGESCreateVendors","PGESDownloadVendorsDocs","PGESFetchVendors","PGESGetVendorBalance","PGESGetVendorBalanceTransferCharges","PGESGetVendorsDocs","PGESOrderRecon","PGESUpdateVendors","PGESUploadVendorsDocs","PGOrderSplitAfterPayment","PGOrderStaticSplit","PGEligibilityFetchCardlessEMI","PGEligibilityFetchOffers","PGEligibilityFetchPaylater","PGEligibilityFetchPaymentMethods","PGCreateOffer","PGFetchOffer","PGCreateOrder","PGFetchOrder","PGTerminateOrder","PGFetchRecon","PGCancelLink","PGCreateLink","PGFetchLink","PGLinkFetchOrders","PGAuthorizeOrder","PGOrderAuthenticatePayment","PGOrderFetchPayment","PGOrderFetchPayments","PGPayOrder","PGOrderCreateRefund","PGOrderFetchRefund","PGOrderFetchRefunds","PGFetchSettlements","PGSettlementFetchRecon","PGOrderFetchSettlement","SposCreateTerminal","SposCreateTerminalTransaction","SposFetchTerminal","SposFetchTerminalQRCodes","SposFetchTerminalTransaction","SposUpdateTerminal","SposUpdateTerminalStatus","SposUploadTerminalDocs","PGCustomerDeleteInstrument","PGCustomerFetchInstrument","PGCustomerFetchInstruments","PGCustomerInstrumentsFetchCryptogram","XApiVersion"],"sources":["C:/Users/kotha/OneDrive/Desktop/3/vbn/node_modules/cashfree-pg/dist/esm/api.js"],"sourcesContent":["/* tslint:disable */\n/* eslint-disable */\n/**\n * Cashfree Payment Gateway APIs\n * Cashfree\\'s Payment Gateway APIs provide developers with a streamlined pathway to integrate advanced payment processing capabilities into their applications, platforms and websites.\n *\n * The version of the OpenAPI document: 2023-08-01\n * Contact: developers@cashfree.com\n *\n * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).\n * https://openapi-generator.tech\n * Do not edit the class manually.\n */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport globalAxios from 'axios';\n// Some imports not used depending on template conditions\n// @ts-ignore\nimport { assertParamExists, setApiKeyToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';\nimport { CFEnvironment } from './configuration';\nimport * as Sentry from \"@sentry/node\";\nimport * as crypto from \"crypto\";\nexport const ApiErrorTypeEnum = {\n    API_ERROR: 'api_error',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const ApiError404TypeEnum = {\n    INVALID_REQUEST_ERROR: 'invalid_request_error',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const ApiError409TypeEnum = {\n    INVALID_REQUEST_ERROR: 'invalid_request_error',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const ApiError502TypeEnum = {\n    API_ERROR: 'api_error',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const AppProviderEnum = {\n    GPAY: 'gpay',\n    PHONEPE: 'phonepe',\n    OLA: 'ola',\n    PAYTM: 'paytm',\n    AMAZON: 'amazon',\n    AIRTEL: 'airtel',\n    FREECHARGE: 'freecharge',\n    MOBIKWIK: 'mobikwik',\n    JIO: 'jio',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const AuthorizationInPaymentsEntityActionEnum = {\n    CAPTURE: 'CAPTURE',\n    VOID: 'VOID',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const AuthorizationInPaymentsEntityStatusEnum = {\n    SUCCESS: 'SUCCESS',\n    PENDING: 'PENDING',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const AuthorizeOrderRequestActionEnum = {\n    CAPTURE: 'CAPTURE',\n    VOID: 'VOID',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const BadRequestErrorTypeEnum = {\n    INVALID_REQUEST_ERROR: 'invalid_request_error',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const CardChannelEnum = {\n    LINK: 'link',\n    POST: 'post',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const CardTokenTypeEnum = {\n    ISSUER_TOKEN: 'ISSUER_TOKEN',\n    NETWORK_GC_TOKEN: 'NETWORK_GC_TOKEN',\n    ISSUER_GC_TOKEN: 'ISSUER_GC_TOKEN',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const CardCardBankNameEnum = {\n    KOTAK: 'Kotak',\n    ICICI: 'ICICI',\n    RBL: 'RBL',\n    BOB: 'BOB',\n    STANDARD_CHARTERED: 'Standard Chartered',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const CardEMICardBankNameEnum = {\n    HDFC: 'hdfc',\n    KOTAK: 'kotak',\n    ICICI: 'icici',\n    RBL: 'rbl',\n    BOB: 'bob',\n    STANDARD_CHARTERED: 'standard chartered',\n    AXIS: 'axis',\n    AU: 'au',\n    YES: 'yes',\n    SBI: 'sbi',\n    FED: 'fed',\n    HSBC: 'hsbc',\n    CITI: 'citi',\n    AMEX: 'amex',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const CardlessEMIProviderEnum = {\n    FLEXMONEY: 'flexmoney',\n    ZESTMONEY: 'zestmoney',\n    HDFC: 'hdfc',\n    ICICI: 'icici',\n    CASHE: 'cashe',\n    IDFC: 'idfc',\n    KOTAK: 'kotak',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const CashbackDetailsCashbackTypeEnum = {\n    FLAT: 'flat',\n    PERCENTAGE: 'percentage',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const DiscountDetailsDiscountTypeEnum = {\n    FLAT: 'flat',\n    PERCENTAGE: 'percentage',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const IdempotencyErrorTypeEnum = {\n    IDEMPOTENCY_ERROR: 'idempotency_error',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const InstrumentEntityInstrumentTypeEnum = {\n    CARD: 'card',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const InstrumentEntityInstrumentStatusEnum = {\n    ACTIVE: 'ACTIVE',\n    INACTIVE: 'INACTIVE',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const OfferDetailsOfferTypeEnum = {\n    DISCOUNT: 'DISCOUNT',\n    CASHBACK: 'CASHBACK',\n    DISCOUNT_AND_CASHBACK: 'DISCOUNT_AND_CASHBACK',\n    NO_COST_EMI: 'NO_COST_EMI',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const OfferTncOfferTncTypeEnum = {\n    TEXT: 'text',\n    LINK: 'link',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\n/**\n * Offer Type Object\n * @export\n * @enum {string}\n */\nexport const OfferType = {\n    DISCOUNT: 'DISCOUNT',\n    CASHBACK: 'CASHBACK',\n    DISCOUNT_AND_CASHBACK: 'DISCOUNT_AND_CASHBACK',\n    NO_COST_EMI: 'NO_COST_EMI',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const OrderAuthenticateEntityActionEnum = {\n    SUBMIT_OTP: 'SUBMIT_OTP',\n    RESEND_OTP: 'RESEND_OTP',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const OrderAuthenticateEntityAuthenticateStatusEnum = {\n    FAILED: 'FAILED',\n    SUCCESS: 'SUCCESS',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const OrderAuthenticatePaymentRequestActionEnum = {\n    SUBMIT_OTP: 'SUBMIT_OTP',\n    RESEND_OTP: 'RESEND_OTP',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const OrderCreateRefundRequestRefundSpeedEnum = {\n    STANDARD: 'STANDARD',\n    INSTANT: 'INSTANT',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const PayOrderEntityPaymentMethodEnum = {\n    NETBANKING: 'netbanking',\n    CARD: 'card',\n    UPI: 'upi',\n    APP: 'app',\n    CARDLESS_EMI: 'cardless_emi',\n    PAYLATER: 'paylater',\n    BANKTRANSFER: 'banktransfer',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const PayOrderEntityChannelEnum = {\n    LINK: 'link',\n    COLLECT: 'collect',\n    QRCODE: 'qrcode',\n    POST: 'post',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const PayOrderEntityActionEnum = {\n    LINK: 'link',\n    CUSTOM: 'custom',\n    FORM: 'form',\n    POST: 'post',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const PaylaterProviderEnum = {\n    KOTAK: 'kotak',\n    FLEXIPAY: 'flexipay',\n    ZESTMONEY: 'zestmoney',\n    LAZYPAY: 'lazypay',\n    OLAPOSTPAID: 'olapostpaid',\n    SIMPL: 'simpl',\n    FREECHARGEPAYLATER: 'freechargepaylater',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const PaymentEntityPaymentStatusEnum = {\n    SUCCESS: 'SUCCESS',\n    NOT_ATTEMPTED: 'NOT_ATTEMPTED',\n    FAILED: 'FAILED',\n    USER_DROPPED: 'USER_DROPPED',\n    VOID: 'VOID',\n    CANCELLED: 'CANCELLED',\n    PENDING: 'PENDING',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const RateLimitErrorTypeEnum = {\n    RATE_LIMIT_ERROR: 'rate_limit_error',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const RefundEntityEntityEnum = {\n    REFUND: 'refund',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const RefundEntityRefundStatusEnum = {\n    SUCCESS: 'SUCCESS',\n    PENDING: 'PENDING',\n    CANCELLED: 'CANCELLED',\n    ONHOLD: 'ONHOLD',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const RefundEntityRefundTypeEnum = {\n    PAYMENT_AUTO_REFUND: 'PAYMENT_AUTO_REFUND',\n    MERCHANT_INITIATED: 'MERCHANT_INITIATED',\n    UNRECONCILED_AUTO_REFUND: 'UNRECONCILED_AUTO_REFUND',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const RefundEntityRefundModeEnum = {\n    STANDARD: 'STANDARD',\n    INSTANT: 'INSTANT',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const TerminalPaymentEntityPaymentStatusEnum = {\n    SUCCESS: 'SUCCESS',\n    NOT_ATTEMPTED: 'NOT_ATTEMPTED',\n    FAILED: 'FAILED',\n    USER_DROPPED: 'USER_DROPPED',\n    VOID: 'VOID',\n    CANCELLED: 'CANCELLED',\n    PENDING: 'PENDING',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nexport const UpiChannelEnum = {\n    LINK: 'link',\n    COLLECT: 'collect',\n    QRCODE: 'qrcode',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\n/**\n * CustomersApi - axios parameter creator\n * @export\n */\nconst CustomersApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Create Customer at Cashfree\n         * @summary Create Customer at Cashfree\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {CreateCustomerRequest} CreateCustomerRequest Request to create a new customer at Cashfree\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGCreateCustomer: (x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGCreateCustomer', 'x_api_version', x_api_version);\n            // verify required parameter 'CreateCustomerRequest' is not null or undefined\n            assertParamExists('pGCreateCustomer', 'CreateCustomerRequest', CreateCustomerRequest);\n            const localVarPath = `/customers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(CreateCustomerRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * CustomersApi - functional programming interface\n * @export\n */\nconst CustomersApiFp = function (configuration) {\n    const localVarAxiosParamCreator = CustomersApiAxiosParamCreator(configuration);\n    return {\n        /**\n         * Create Customer at Cashfree\n         * @summary Create Customer at Cashfree\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {CreateCustomerRequest} CreateCustomerRequest Request to create a new customer at Cashfree\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n    };\n};\n/**\n * CustomersApi - object-oriented interface\n * @export\n * @class CustomersApi\n * @extends {BaseAPI}\n */\n/**\n * EasySplitApi - axios parameter creator\n * @export\n */\nconst EasySplitApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * The Create On Demand Transfer API will create a new on-demand request either from to the merchant or from to the vendor.\n         * @summary Create On Demand Transfer\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} vendor_id The id which uniquely identifies your vendor.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {AdjustVendorBalanceRequest} [AdjustVendorBalanceRequest] Adjust Vendor Balance Request Body.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGESCreateOnDemandTransfer: (x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGESCreateOnDemandTransfer', 'x_api_version', x_api_version);\n            // verify required parameter 'vendor_id' is not null or undefined\n            assertParamExists('pGESCreateOnDemandTransfer', 'vendor_id', vendor_id);\n            const localVarPath = `/easy-split/vendors/{vendor_id}/transfer`\n                .replace(`{${\"vendor_id\"}}`, encodeURIComponent(String(vendor_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(AdjustVendorBalanceRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to create a new vendor to your EasySplit account along with the KYC details. Provide KYC details such as account_type, business_type, gst, cin, pan, passport number and so on.\n         * @summary Create vendor\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {CreateVendorRequest} [CreateVendorRequest] Create Vendor Request Body.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * CreateVendorRequest?: CreateVendorRequest,\n         */\n        pGESCreateVendors: (x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGESCreateVendors', 'x_api_version', x_api_version);\n            const localVarPath = `/easy-split/vendors`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(CreateVendorRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to download the uploaded KYC documents of that particular vendor. Provide the document type. Click the link from the sample request to download the KYC document.\n         * @summary Download Vendor Documents\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} doc_type Mention the document type that has to be downloaded. Only an uploaded document can be downloaded.\n         * @param {string} vendor_id The id which uniquely identifies your vendor.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGESDownloadVendorsDocs: (x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGESDownloadVendorsDocs', 'x_api_version', x_api_version);\n            // verify required parameter 'doc_type' is not null or undefined\n            assertParamExists('pGESDownloadVendorsDocs', 'doc_type', doc_type);\n            // verify required parameter 'vendor_id' is not null or undefined\n            assertParamExists('pGESDownloadVendorsDocs', 'vendor_id', vendor_id);\n            const localVarPath = `/easy-split/vendor-docs/{vendor_id}/download/{doc_type}`\n                .replace(`{${\"doc_type\"}}`, encodeURIComponent(String(doc_type)))\n                .replace(`{${\"vendor_id\"}}`, encodeURIComponent(String(vendor_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to get the details of a specific vendor associated with your Easy Split account.\n         * @summary Get Vendor All Details\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} vendor_id The id which uniquely identifies your vendor.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGESFetchVendors: (x_api_version, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGESFetchVendors', 'x_api_version', x_api_version);\n            // verify required parameter 'vendor_id' is not null or undefined\n            assertParamExists('pGESFetchVendors', 'vendor_id', vendor_id);\n            const localVarPath = `/easy-split/vendors/{vendor_id}`\n                .replace(`{${\"vendor_id\"}}`, encodeURIComponent(String(vendor_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * This API fetches the available amount with the merchant, vendor, and the unsettled amount for the merchant as well as the vendor.\n         * @summary Get On Demand Balance\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} vendor_id The id which uniquely identifies your vendor.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGESGetVendorBalance: (x_api_version, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGESGetVendorBalance', 'x_api_version', x_api_version);\n            // verify required parameter 'vendor_id' is not null or undefined\n            assertParamExists('pGESGetVendorBalance', 'vendor_id', vendor_id);\n            const localVarPath = `/easy-split/vendors/{vendor_id}/balances`\n                .replace(`{${\"vendor_id\"}}`, encodeURIComponent(String(vendor_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * This API returns the applicable service charge and service tax for a vendor balance transfer, based on the provided amount and rate type.\n         * @summary Get Vendor Balance Transfer Charges\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {number} amount Specify the amount for which you want to view the service charges and service taxes in the response.\n         * @param {string} rate_type Mention the type of rate for which you want to check the charges. Possible value: VENDOR_ON_DEMAND\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGESGetVendorBalanceTransferCharges: (x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGESGetVendorBalanceTransferCharges', 'x_api_version', x_api_version);\n            // verify required parameter 'amount' is not null or undefined\n            assertParamExists('pGESGetVendorBalanceTransferCharges', 'amount', amount);\n            // verify required parameter 'rate_type' is not null or undefined\n            assertParamExists('pGESGetVendorBalanceTransferCharges', 'rate_type', rate_type);\n            const localVarPath = `/easy-split/amount/{amount}/charges`\n                .replace(`{${\"amount\"}}`, encodeURIComponent(String(amount)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            if (rate_type !== undefined) {\n                localVarQueryParameter['rate_type'] = rate_type;\n            }\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to fetch the details of all the KYC details of a particular vendor.\n         * @summary Get Vendor All Documents Status\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} vendor_id The id which uniquely identifies your vendor.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGESGetVendorsDocs: (x_api_version, vendor_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGESGetVendorsDocs', 'x_api_version', x_api_version);\n            // verify required parameter 'vendor_id' is not null or undefined\n            assertParamExists('pGESGetVendorsDocs', 'vendor_id', vendor_id);\n            const localVarPath = `/easy-split/vendor-docs/{vendor_id}`\n                .replace(`{${\"vendor_id\"}}`, encodeURIComponent(String(vendor_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to get all the split details, settled and unsettled transactions details of each vendor who were part of a particular order by providing order Id or start date and end date.\n         * @summary Get Split and Settlement Details by OrderID v2.0\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {ESOrderReconRequest} [ESOrderReconRequest] Get Split and Settlement Details by OrderID v2.0\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * ESOrderReconRequest?: ESOrderReconRequest,\n         */\n        pGESOrderRecon: (x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGESOrderRecon', 'x_api_version', x_api_version);\n            const localVarPath = `/split/order/vendor/recon`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(ESOrderReconRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to edit the existing vendor details added to your EasySplit account. You can edit vendor details such as name, email, phone number, upi details, and any of the KYC details.\n         * @summary Update vendor Details\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} vendor_id The id which uniquely identifies your vendor.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {UpdateVendorRequest} [UpdateVendorRequest] Create Vendor Request Body.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGESUpdateVendors: (x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGESUpdateVendors', 'x_api_version', x_api_version);\n            // verify required parameter 'vendor_id' is not null or undefined\n            assertParamExists('pGESUpdateVendors', 'vendor_id', vendor_id);\n            const localVarPath = `/easy-split/vendors/{vendor_id}`\n                .replace(`{${\"vendor_id\"}}`, encodeURIComponent(String(vendor_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(UpdateVendorRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to upload KYC documents of a specific vendor.\n         * @summary Upload Vendor Docs\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} vendor_id The id which uniquely identifies your vendor.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {string} [doc_type] Mention the type of the document you are uploading. Possible values: UIDAI_FRONT, UIDAI_BACK, UIDAI_NUMBER, DL, DL_NUMBER, PASSPORT_FRONT, PASSPORT_BACK, PASSPORT_NUMBER, VOTER_ID, VOTER_ID_NUMBER, PAN, PAN_NUMBER, GST, GSTIN_NUMBER, CIN, CIN_NUMBER, NBFC_CERTIFICATE. If the doc type ends with a number you should add the doc value else upload the doc file.\n         * @param {string} [doc_value] Enter the display name of the uploaded file.\n         * @param {File} [file] Select the document that should be uploaded or provide the path of that file. You cannot upload a file that is more than 2MB in size.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGESUploadVendorsDocs: (x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGESUploadVendorsDocs', 'x_api_version', x_api_version);\n            // verify required parameter 'vendor_id' is not null or undefined\n            assertParamExists('pGESUploadVendorsDocs', 'vendor_id', vendor_id);\n            const localVarPath = `/easy-split/vendor-docs/{vendor_id}`\n                .replace(`{${\"vendor_id\"}}`, encodeURIComponent(String(vendor_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            if (doc_type !== undefined) {\n                localVarFormParams.append('doc_type', doc_type);\n            }\n            if (doc_value !== undefined) {\n                localVarFormParams.append('doc_value', doc_value);\n            }\n            if (file !== undefined) {\n                localVarFormParams.append('file', file);\n            }\n            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = localVarFormParams;\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Split After Payment API splits the payments to vendors after successful payment from the customers.\n         * @summary Split After Payment\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {SplitAfterPaymentRequest} [SplitAfterPaymentRequest] Request Body to Create Split for an order.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGOrderSplitAfterPayment: (x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGOrderSplitAfterPayment', 'x_api_version', x_api_version);\n            // verify required parameter 'order_id' is not null or undefined\n            assertParamExists('pGOrderSplitAfterPayment', 'order_id', order_id);\n            const localVarPath = `/easy-split/orders/{order_id}/split`\n                .replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(SplitAfterPaymentRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * This API will create a static split scheme wherein you can define the split type and the vendor-wise split percentage.\n         * @summary Create Static Split Configuration\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {StaticSplitRequest} [StaticSplitRequest] Static Split\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * StaticSplitRequest?: StaticSplitRequest,\n         */\n        pGOrderStaticSplit: (x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGOrderStaticSplit', 'x_api_version', x_api_version);\n            const localVarPath = `/easy-split/static-split`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(StaticSplitRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * EasySplitApi - functional programming interface\n * @export\n */\nconst EasySplitApiFp = function (configuration) {\n    const localVarAxiosParamCreator = EasySplitApiAxiosParamCreator(configuration);\n    return {\n        /**\n         * The Create On Demand Transfer API will create a new on-demand request either from to the merchant or from to the vendor.\n         * @summary Create On Demand Transfer\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} vendor_id The id which uniquely identifies your vendor.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {AdjustVendorBalanceRequest} [AdjustVendorBalanceRequest] Adjust Vendor Balance Request Body.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGESCreateOnDemandTransfer(x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESCreateOnDemandTransfer(x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to create a new vendor to your EasySplit account along with the KYC details. Provide KYC details such as account_type, business_type, gst, cin, pan, passport number and so on.\n         * @summary Create vendor\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {CreateVendorRequest} [CreateVendorRequest] Create Vendor Request Body.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGESCreateVendors(x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESCreateVendors(x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to download the uploaded KYC documents of that particular vendor. Provide the document type. Click the link from the sample request to download the KYC document.\n         * @summary Download Vendor Documents\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} doc_type Mention the document type that has to be downloaded. Only an uploaded document can be downloaded.\n         * @param {string} vendor_id The id which uniquely identifies your vendor.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGESDownloadVendorsDocs(x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESDownloadVendorsDocs(x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to get the details of a specific vendor associated with your Easy Split account.\n         * @summary Get Vendor All Details\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} vendor_id The id which uniquely identifies your vendor.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGESFetchVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESFetchVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * This API fetches the available amount with the merchant, vendor, and the unsettled amount for the merchant as well as the vendor.\n         * @summary Get On Demand Balance\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} vendor_id The id which uniquely identifies your vendor.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGESGetVendorBalance(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESGetVendorBalance(x_api_version, vendor_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * This API returns the applicable service charge and service tax for a vendor balance transfer, based on the provided amount and rate type.\n         * @summary Get Vendor Balance Transfer Charges\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {number} amount Specify the amount for which you want to view the service charges and service taxes in the response.\n         * @param {string} rate_type Mention the type of rate for which you want to check the charges. Possible value: VENDOR_ON_DEMAND\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGESGetVendorBalanceTransferCharges(x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESGetVendorBalanceTransferCharges(x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to fetch the details of all the KYC details of a particular vendor.\n         * @summary Get Vendor All Documents Status\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} vendor_id The id which uniquely identifies your vendor.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGESGetVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESGetVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to get all the split details, settled and unsettled transactions details of each vendor who were part of a particular order by providing order Id or start date and end date.\n         * @summary Get Split and Settlement Details by OrderID v2.0\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {ESOrderReconRequest} [ESOrderReconRequest] Get Split and Settlement Details by OrderID v2.0\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGESOrderRecon(x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESOrderRecon(x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to edit the existing vendor details added to your EasySplit account. You can edit vendor details such as name, email, phone number, upi details, and any of the KYC details.\n         * @summary Update vendor Details\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} vendor_id The id which uniquely identifies your vendor.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {UpdateVendorRequest} [UpdateVendorRequest] Create Vendor Request Body.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGESUpdateVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESUpdateVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to upload KYC documents of a specific vendor.\n         * @summary Upload Vendor Docs\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} vendor_id The id which uniquely identifies your vendor.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {string} [doc_type] Mention the type of the document you are uploading. Possible values: UIDAI_FRONT, UIDAI_BACK, UIDAI_NUMBER, DL, DL_NUMBER, PASSPORT_FRONT, PASSPORT_BACK, PASSPORT_NUMBER, VOTER_ID, VOTER_ID_NUMBER, PAN, PAN_NUMBER, GST, GSTIN_NUMBER, CIN, CIN_NUMBER, NBFC_CERTIFICATE. If the doc type ends with a number you should add the doc value else upload the doc file.\n         * @param {string} [doc_value] Enter the display name of the uploaded file.\n         * @param {File} [file] Select the document that should be uploaded or provide the path of that file. You cannot upload a file that is more than 2MB in size.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGESUploadVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGESUploadVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Split After Payment API splits the payments to vendors after successful payment from the customers.\n         * @summary Split After Payment\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {SplitAfterPaymentRequest} [SplitAfterPaymentRequest] Request Body to Create Split for an order.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGOrderSplitAfterPayment(x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderSplitAfterPayment(x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * This API will create a static split scheme wherein you can define the split type and the vendor-wise split percentage.\n         * @summary Create Static Split Configuration\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {StaticSplitRequest} [StaticSplitRequest] Static Split\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGOrderStaticSplit(x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderStaticSplit(x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n    };\n};\n/**\n * EasySplitApi - object-oriented interface\n * @export\n * @class EasySplitApi\n * @extends {BaseAPI}\n */\n/**\n * EligibilityApi - axios parameter creator\n * @export\n */\nconst EligibilityApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Use this API to get eligible Cardless EMI Payment Methods available for a customer on an order basis their phone number.\n         * @summary Get Eligible Cardless EMI Payment Methods for a customer on an order\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {EligibilityFetchCardlessEMIRequest} EligibilityFetchCardlessEMIRequest Request Body to get eligible cardless emi options for a customer and order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGEligibilityFetchCardlessEMI: (x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGEligibilityFetchCardlessEMI', 'x_api_version', x_api_version);\n            // verify required parameter 'EligibilityFetchCardlessEMIRequest' is not null or undefined\n            assertParamExists('pGEligibilityFetchCardlessEMI', 'EligibilityFetchCardlessEMIRequest', EligibilityFetchCardlessEMIRequest);\n            const localVarPath = `/eligibility/cardlessemi`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchCardlessEMIRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to get eligible offers for an order_id or order amount.\n         * @summary Get Eligible Offers for an Order\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {EligibilityFetchOffersRequest} EligibilityFetchOffersRequest Request Body to get eligible offers for a customer and order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGEligibilityFetchOffers: (x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGEligibilityFetchOffers', 'x_api_version', x_api_version);\n            // verify required parameter 'EligibilityFetchOffersRequest' is not null or undefined\n            assertParamExists('pGEligibilityFetchOffers', 'EligibilityFetchOffersRequest', EligibilityFetchOffersRequest);\n            const localVarPath = `/eligibility/offers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchOffersRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to get eligible Paylater Payment Methods for a customer on an order.\n         * @summary Get Eligible Paylater for a customer on an order\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {EligibilityFetchPaylaterRequest} EligibilityFetchPaylaterRequest Request Body to get eligible paylater options for a customer and order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGEligibilityFetchPaylater: (x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGEligibilityFetchPaylater', 'x_api_version', x_api_version);\n            // verify required parameter 'EligibilityFetchPaylaterRequest' is not null or undefined\n            assertParamExists('pGEligibilityFetchPaylater', 'EligibilityFetchPaylaterRequest', EligibilityFetchPaylaterRequest);\n            const localVarPath = `/eligibility/paylater`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchPaylaterRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to get eligible Payment Methods\n         * @summary Get eligible Payment Methods\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {EligibilityFetchPaymentMethodsRequest} EligibilityFetchPaymentMethodsRequest Request Body to get eligible payment methods for an account and order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGEligibilityFetchPaymentMethods: (x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGEligibilityFetchPaymentMethods', 'x_api_version', x_api_version);\n            // verify required parameter 'EligibilityFetchPaymentMethodsRequest' is not null or undefined\n            assertParamExists('pGEligibilityFetchPaymentMethods', 'EligibilityFetchPaymentMethodsRequest', EligibilityFetchPaymentMethodsRequest);\n            const localVarPath = `/eligibility/payment_methods`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(EligibilityFetchPaymentMethodsRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * EligibilityApi - functional programming interface\n * @export\n */\nconst EligibilityApiFp = function (configuration) {\n    const localVarAxiosParamCreator = EligibilityApiAxiosParamCreator(configuration);\n    return {\n        /**\n         * Use this API to get eligible Cardless EMI Payment Methods available for a customer on an order basis their phone number.\n         * @summary Get Eligible Cardless EMI Payment Methods for a customer on an order\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {EligibilityFetchCardlessEMIRequest} EligibilityFetchCardlessEMIRequest Request Body to get eligible cardless emi options for a customer and order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to get eligible offers for an order_id or order amount.\n         * @summary Get Eligible Offers for an Order\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {EligibilityFetchOffersRequest} EligibilityFetchOffersRequest Request Body to get eligible offers for a customer and order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to get eligible Paylater Payment Methods for a customer on an order.\n         * @summary Get Eligible Paylater for a customer on an order\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {EligibilityFetchPaylaterRequest} EligibilityFetchPaylaterRequest Request Body to get eligible paylater options for a customer and order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to get eligible Payment Methods\n         * @summary Get eligible Payment Methods\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {EligibilityFetchPaymentMethodsRequest} EligibilityFetchPaymentMethodsRequest Request Body to get eligible payment methods for an account and order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n    };\n};\n/**\n * EligibilityApi - object-oriented interface\n * @export\n * @class EligibilityApi\n * @extends {BaseAPI}\n */\n/**\n * OffersApi - axios parameter creator\n * @export\n */\nconst OffersApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Use this API to create offers with Cashfree from your backend\n         * @summary Create Offer\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {CreateOfferRequest} CreateOfferRequest Request body to create an offer at Cashfree\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGCreateOffer: (x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGCreateOffer', 'x_api_version', x_api_version);\n            // verify required parameter 'CreateOfferRequest' is not null or undefined\n            assertParamExists('pGCreateOffer', 'CreateOfferRequest', CreateOfferRequest);\n            const localVarPath = `/offers`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(CreateOfferRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to get offer by offer_id\n         * @summary Get Offer by ID\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} offer_id The offer ID for which you want to view the offer details.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGFetchOffer: (x_api_version, offer_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGFetchOffer', 'x_api_version', x_api_version);\n            // verify required parameter 'offer_id' is not null or undefined\n            assertParamExists('pGFetchOffer', 'offer_id', offer_id);\n            const localVarPath = `/offers/{offer_id}`\n                .replace(`{${\"offer_id\"}}`, encodeURIComponent(String(offer_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * OffersApi - functional programming interface\n * @export\n */\nconst OffersApiFp = function (configuration) {\n    const localVarAxiosParamCreator = OffersApiAxiosParamCreator(configuration);\n    return {\n        /**\n         * Use this API to create offers with Cashfree from your backend\n         * @summary Create Offer\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {CreateOfferRequest} CreateOfferRequest Request body to create an offer at Cashfree\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to get offer by offer_id\n         * @summary Get Offer by ID\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} offer_id The offer ID for which you want to view the offer details.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n    };\n};\n/**\n * OffersApi - object-oriented interface\n * @export\n * @class OffersApi\n * @extends {BaseAPI}\n */\n/**\n * OrdersApi - axios parameter creator\n * @export\n */\nconst OrdersApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * ### Order An order is an entity which has a amount and currency associated with it. It is something for which you want to collect payment for. Use this API to create orders with Cashfree from your backend to get a `payment_sessions_id`.  You can use the `payment_sessions_id` to create a transaction for the order.\n         * @summary Create Order\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {CreateOrderRequest} CreateOrderRequest Request body to create an order at cashfree\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGCreateOrder: (x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGCreateOrder', 'x_api_version', x_api_version);\n            // verify required parameter 'CreateOrderRequest' is not null or undefined\n            assertParamExists('pGCreateOrder', 'CreateOrderRequest', CreateOrderRequest);\n            const localVarPath = `/orders`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(CreateOrderRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to fetch the order that was created at Cashfree\\'s using the `order_id`.  ## When to use this API - To check the status of your order - Once the order is PAID - Once your customer returns to `return_url`\n         * @summary Get Order\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGFetchOrder: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGFetchOrder', 'x_api_version', x_api_version);\n            // verify required parameter 'order_id' is not null or undefined\n            assertParamExists('pGFetchOrder', 'order_id', order_id);\n            const localVarPath = `/orders/{order_id}`\n                .replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to terminate the order that was created at Cashfree\\'s using the `order_id`.\n         * @summary Terminate Order\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {TerminateOrderRequest} TerminateOrderRequest Request body to terminate an order at cashfree\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGTerminateOrder: (x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGTerminateOrder', 'x_api_version', x_api_version);\n            // verify required parameter 'order_id' is not null or undefined\n            assertParamExists('pGTerminateOrder', 'order_id', order_id);\n            // verify required parameter 'TerminateOrderRequest' is not null or undefined\n            assertParamExists('pGTerminateOrder', 'TerminateOrderRequest', TerminateOrderRequest);\n            const localVarPath = `/orders/{order_id}`\n                .replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(TerminateOrderRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * OrdersApi - functional programming interface\n * @export\n */\nconst OrdersApiFp = function (configuration) {\n    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration);\n    return {\n        /**\n         * ### Order An order is an entity which has a amount and currency associated with it. It is something for which you want to collect payment for. Use this API to create orders with Cashfree from your backend to get a `payment_sessions_id`.  You can use the `payment_sessions_id` to create a transaction for the order.\n         * @summary Create Order\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {CreateOrderRequest} CreateOrderRequest Request body to create an order at cashfree\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to fetch the order that was created at Cashfree\\'s using the `order_id`.  ## When to use this API - To check the status of your order - Once the order is PAID - Once your customer returns to `return_url`\n         * @summary Get Order\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to terminate the order that was created at Cashfree\\'s using the `order_id`.\n         * @summary Terminate Order\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {TerminateOrderRequest} TerminateOrderRequest Request body to terminate an order at cashfree\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n    };\n};\n/**\n * OrdersApi - object-oriented interface\n * @export\n * @class OrdersApi\n * @extends {BaseAPI}\n */\n/**\n * PGReconciliationApi - axios parameter creator\n * @export\n */\nconst PGReconciliationApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * - Use this API to get the payment gateway reconciliation details with date range. - It will have events for your payment account\n         * @summary PG Reconciliation\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {FetchReconRequest} FetchReconRequest Request Body for the reconciliation\n         * @param {string} [Content_Type] application/json\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {string} [Accept] application/json\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGFetchRecon: (x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGFetchRecon', 'x_api_version', x_api_version);\n            // verify required parameter 'FetchReconRequest' is not null or undefined\n            assertParamExists('pGFetchRecon', 'FetchReconRequest', FetchReconRequest);\n            const localVarPath = `/recon`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(FetchReconRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * PGReconciliationApi - functional programming interface\n * @export\n */\nconst PGReconciliationApiFp = function (configuration) {\n    const localVarAxiosParamCreator = PGReconciliationApiAxiosParamCreator(configuration);\n    return {\n        /**\n         * - Use this API to get the payment gateway reconciliation details with date range. - It will have events for your payment account\n         * @summary PG Reconciliation\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {FetchReconRequest} FetchReconRequest Request Body for the reconciliation\n         * @param {string} [Content_Type] application/json\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {string} [Accept] application/json\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n    };\n};\n/**\n * PGReconciliationApi - object-oriented interface\n * @export\n * @class PGReconciliationApi\n * @extends {BaseAPI}\n */\n/**\n * PaymentLinksApi - axios parameter creator\n * @export\n */\nconst PaymentLinksApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.\n         * @summary Cancel Payment Link\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} link_id The payment link ID for which you want to view the details.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGCancelLink: (x_api_version, link_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGCancelLink', 'x_api_version', x_api_version);\n            // verify required parameter 'link_id' is not null or undefined\n            assertParamExists('pGCancelLink', 'link_id', link_id);\n            const localVarPath = `/links/{link_id}/cancel`\n                .replace(`{${\"link_id\"}}`, encodeURIComponent(String(link_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.\n         * @summary Create Payment Link\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {CreateLinkRequest} CreateLinkRequest Request Body to Create Payment Links\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGCreateLink: (x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGCreateLink', 'x_api_version', x_api_version);\n            // verify required parameter 'CreateLinkRequest' is not null or undefined\n            assertParamExists('pGCreateLink', 'CreateLinkRequest', CreateLinkRequest);\n            const localVarPath = `/links`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(CreateLinkRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to view all details and status of a payment link.\n         * @summary Fetch Payment Link Details\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} link_id The payment link ID for which you want to view the details.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGFetchLink: (x_api_version, link_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGFetchLink', 'x_api_version', x_api_version);\n            // verify required parameter 'link_id' is not null or undefined\n            assertParamExists('pGFetchLink', 'link_id', link_id);\n            const localVarPath = `/links/{link_id}`\n                .replace(`{${\"link_id\"}}`, encodeURIComponent(String(link_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to view all order details for a payment link.\n         * @summary Get Orders for a Payment Link\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} link_id The payment link ID for which you want to view the details.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGLinkFetchOrders: (x_api_version, link_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGLinkFetchOrders', 'x_api_version', x_api_version);\n            // verify required parameter 'link_id' is not null or undefined\n            assertParamExists('pGLinkFetchOrders', 'link_id', link_id);\n            const localVarPath = `/links/{link_id}/orders`\n                .replace(`{${\"link_id\"}}`, encodeURIComponent(String(link_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * PaymentLinksApi - functional programming interface\n * @export\n */\nconst PaymentLinksApiFp = function (configuration) {\n    const localVarAxiosParamCreator = PaymentLinksApiAxiosParamCreator(configuration);\n    return {\n        /**\n         * Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.\n         * @summary Cancel Payment Link\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} link_id The payment link ID for which you want to view the details.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.\n         * @summary Create Payment Link\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {CreateLinkRequest} CreateLinkRequest Request Body to Create Payment Links\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to view all details and status of a payment link.\n         * @summary Fetch Payment Link Details\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} link_id The payment link ID for which you want to view the details.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to view all order details for a payment link.\n         * @summary Get Orders for a Payment Link\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} link_id The payment link ID for which you want to view the details.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n    };\n};\n/**\n * PaymentLinksApi - object-oriented interface\n * @export\n * @class PaymentLinksApi\n * @extends {BaseAPI}\n */\n/**\n * PaymentsApi - axios parameter creator\n * @export\n */\nconst PaymentsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Use this API to capture or void a preauthorized payment\n         * @summary Preauthorization\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {AuthorizeOrderRequest} AuthorizeOrderRequest Request to Capture or Void Transactions\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGAuthorizeOrder: (x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGAuthorizeOrder', 'x_api_version', x_api_version);\n            // verify required parameter 'order_id' is not null or undefined\n            assertParamExists('pGAuthorizeOrder', 'order_id', order_id);\n            // verify required parameter 'AuthorizeOrderRequest' is not null or undefined\n            assertParamExists('pGAuthorizeOrder', 'AuthorizeOrderRequest', AuthorizeOrderRequest);\n            const localVarPath = `/orders/{order_id}/authorization`\n                .replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(AuthorizeOrderRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * If you accept OTP on your own page, you can use the below API to send OTP to Cashfree.\n         * @summary Submit or Resend OTP\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} cf_payment_id The Cashfree payment or transaction ID.\n         * @param {OrderAuthenticatePaymentRequest} OrderAuthenticatePaymentRequest Request body to submit/resend headless OTP. To use this API make sure you have headless OTP enabled for your account\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGOrderAuthenticatePayment: (x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGOrderAuthenticatePayment', 'x_api_version', x_api_version);\n            // verify required parameter 'cf_payment_id' is not null or undefined\n            assertParamExists('pGOrderAuthenticatePayment', 'cf_payment_id', cf_payment_id);\n            // verify required parameter 'OrderAuthenticatePaymentRequest' is not null or undefined\n            assertParamExists('pGOrderAuthenticatePayment', 'OrderAuthenticatePaymentRequest', OrderAuthenticatePaymentRequest);\n            const localVarPath = `/orders/pay/authenticate/{cf_payment_id}`\n                .replace(`{${\"cf_payment_id\"}}`, encodeURIComponent(String(cf_payment_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(OrderAuthenticatePaymentRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to view payment details of an order for a payment ID.\n         * @summary Get Payment by ID\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {string} cf_payment_id The Cashfree payment or transaction ID.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGOrderFetchPayment: (x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGOrderFetchPayment', 'x_api_version', x_api_version);\n            // verify required parameter 'order_id' is not null or undefined\n            assertParamExists('pGOrderFetchPayment', 'order_id', order_id);\n            // verify required parameter 'cf_payment_id' is not null or undefined\n            assertParamExists('pGOrderFetchPayment', 'cf_payment_id', cf_payment_id);\n            const localVarPath = `/orders/{order_id}/payments/{cf_payment_id}`\n                .replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)))\n                .replace(`{${\"cf_payment_id\"}}`, encodeURIComponent(String(cf_payment_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to view all payment details for an order.\n         * @summary Get Payments for an Order\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGOrderFetchPayments: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGOrderFetchPayments', 'x_api_version', x_api_version);\n            // verify required parameter 'order_id' is not null or undefined\n            assertParamExists('pGOrderFetchPayments', 'order_id', order_id);\n            const localVarPath = `/orders/{order_id}/payments`\n                .replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API when you have already created the orders and want Cashfree to process the payment. To use this API S2S flag needs to be enabled from the backend. In case you want to use the cards payment option the PCI DSS flag is required, for more information send an email to \\\"care@cashfree.com\\\".\n         * @summary Order Pay\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {PayOrderRequest} PayOrderRequest Request body to create a transaction at cashfree using &#x60;payment_session_id&#x60;\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGPayOrder: (x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGPayOrder', 'x_api_version', x_api_version);\n            // verify required parameter 'PayOrderRequest' is not null or undefined\n            assertParamExists('pGPayOrder', 'PayOrderRequest', PayOrderRequest);\n            const localVarPath = `/orders/sessions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(PayOrderRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * PaymentsApi - functional programming interface\n * @export\n */\nconst PaymentsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = PaymentsApiAxiosParamCreator(configuration);\n    return {\n        /**\n         * Use this API to capture or void a preauthorized payment\n         * @summary Preauthorization\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {AuthorizeOrderRequest} AuthorizeOrderRequest Request to Capture or Void Transactions\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * If you accept OTP on your own page, you can use the below API to send OTP to Cashfree.\n         * @summary Submit or Resend OTP\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} cf_payment_id The Cashfree payment or transaction ID.\n         * @param {OrderAuthenticatePaymentRequest} OrderAuthenticatePaymentRequest Request body to submit/resend headless OTP. To use this API make sure you have headless OTP enabled for your account\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to view payment details of an order for a payment ID.\n         * @summary Get Payment by ID\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {string} cf_payment_id The Cashfree payment or transaction ID.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to view all payment details for an order.\n         * @summary Get Payments for an Order\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API when you have already created the orders and want Cashfree to process the payment. To use this API S2S flag needs to be enabled from the backend. In case you want to use the cards payment option the PCI DSS flag is required, for more information send an email to \\\"care@cashfree.com\\\".\n         * @summary Order Pay\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {PayOrderRequest} PayOrderRequest Request body to create a transaction at cashfree using &#x60;payment_session_id&#x60;\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n    };\n};\n/**\n * PaymentsApi - object-oriented interface\n * @export\n * @class PaymentsApi\n * @extends {BaseAPI}\n */\n/**\n * RefundsApi - axios parameter creator\n * @export\n */\nconst RefundsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Use this API to initiate refunds.\n         * @summary Create Refund\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {OrderCreateRefundRequest} OrderCreateRefundRequest Request Body to Create Refunds\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGOrderCreateRefund: (x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGOrderCreateRefund', 'x_api_version', x_api_version);\n            // verify required parameter 'order_id' is not null or undefined\n            assertParamExists('pGOrderCreateRefund', 'order_id', order_id);\n            // verify required parameter 'OrderCreateRefundRequest' is not null or undefined\n            assertParamExists('pGOrderCreateRefund', 'OrderCreateRefundRequest', OrderCreateRefundRequest);\n            const localVarPath = `/orders/{order_id}/refunds`\n                .replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(OrderCreateRefundRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to fetch a specific refund processed on your Cashfree Account.\n         * @summary Get Refund\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {string} refund_id Refund Id of the refund you want to fetch.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGOrderFetchRefund: (x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGOrderFetchRefund', 'x_api_version', x_api_version);\n            // verify required parameter 'order_id' is not null or undefined\n            assertParamExists('pGOrderFetchRefund', 'order_id', order_id);\n            // verify required parameter 'refund_id' is not null or undefined\n            assertParamExists('pGOrderFetchRefund', 'refund_id', refund_id);\n            const localVarPath = `/orders/{order_id}/refunds/{refund_id}`\n                .replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)))\n                .replace(`{${\"refund_id\"}}`, encodeURIComponent(String(refund_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to fetch all refunds processed against an order.\n         * @summary Get All Refunds for an Order\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGOrderFetchRefunds: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGOrderFetchRefunds', 'x_api_version', x_api_version);\n            // verify required parameter 'order_id' is not null or undefined\n            assertParamExists('pGOrderFetchRefunds', 'order_id', order_id);\n            const localVarPath = `/orders/{order_id}/refunds`\n                .replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * RefundsApi - functional programming interface\n * @export\n */\nconst RefundsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = RefundsApiAxiosParamCreator(configuration);\n    return {\n        /**\n         * Use this API to initiate refunds.\n         * @summary Create Refund\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {OrderCreateRefundRequest} OrderCreateRefundRequest Request Body to Create Refunds\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to fetch a specific refund processed on your Cashfree Account.\n         * @summary Get Refund\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {string} refund_id Refund Id of the refund you want to fetch.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to fetch all refunds processed against an order.\n         * @summary Get All Refunds for an Order\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n    };\n};\n/**\n * RefundsApi - object-oriented interface\n * @export\n * @class RefundsApi\n * @extends {BaseAPI}\n */\n/**\n * SettlementReconciliationApi - axios parameter creator\n * @export\n */\nconst SettlementReconciliationApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Use this API to get all settlement details by specifying the settlement ID, settlement UTR or date range.\n         * @summary Get All Settlements\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {FetchSettlementsRequest} FetchSettlementsRequest Request Body to get the settlements\n         * @param {string} [Content_Type] application/json\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {string} [Accept] application/json\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGFetchSettlements: (x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGFetchSettlements', 'x_api_version', x_api_version);\n            // verify required parameter 'FetchSettlementsRequest' is not null or undefined\n            assertParamExists('pGFetchSettlements', 'FetchSettlementsRequest', FetchSettlementsRequest);\n            const localVarPath = `/settlements`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(FetchSettlementsRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * - Use this API to get settlement reconciliation details using Settlement ID, settlement UTR or date range. - This API will return events for the settlement IDs you want\n         * @summary Settlement Reconciliation\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {SettlementFetchReconRequest} SettlementFetchReconRequest Request Body for the settlement reconciliation\n         * @param {string} [Content_Type] application/json\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {string} [Accept] application/json\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGSettlementFetchRecon: (x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGSettlementFetchRecon', 'x_api_version', x_api_version);\n            // verify required parameter 'SettlementFetchReconRequest' is not null or undefined\n            assertParamExists('pGSettlementFetchRecon', 'SettlementFetchReconRequest', SettlementFetchReconRequest);\n            const localVarPath = `/settlement/recon`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(SettlementFetchReconRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * SettlementReconciliationApi - functional programming interface\n * @export\n */\nconst SettlementReconciliationApiFp = function (configuration) {\n    const localVarAxiosParamCreator = SettlementReconciliationApiAxiosParamCreator(configuration);\n    return {\n        /**\n         * Use this API to get all settlement details by specifying the settlement ID, settlement UTR or date range.\n         * @summary Get All Settlements\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {FetchSettlementsRequest} FetchSettlementsRequest Request Body to get the settlements\n         * @param {string} [Content_Type] application/json\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {string} [Accept] application/json\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * - Use this API to get settlement reconciliation details using Settlement ID, settlement UTR or date range. - This API will return events for the settlement IDs you want\n         * @summary Settlement Reconciliation\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {SettlementFetchReconRequest} SettlementFetchReconRequest Request Body for the settlement reconciliation\n         * @param {string} [Content_Type] application/json\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {string} [Accept] application/json\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n    };\n};\n/**\n * SettlementReconciliationApi - object-oriented interface\n * @export\n * @class SettlementReconciliationApi\n * @extends {BaseAPI}\n */\n/**\n * SettlementsApi - axios parameter creator\n * @export\n */\nconst SettlementsApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Use this API to view all the settlements of a particular order.\n         * @summary Get Settlements by Order ID\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        pGOrderFetchSettlement: (x_api_version, order_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGOrderFetchSettlement', 'x_api_version', x_api_version);\n            // verify required parameter 'order_id' is not null or undefined\n            assertParamExists('pGOrderFetchSettlement', 'order_id', order_id);\n            const localVarPath = `/orders/{order_id}/settlements`\n                .replace(`{${\"order_id\"}}`, encodeURIComponent(String(order_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * SettlementsApi - functional programming interface\n * @export\n */\nconst SettlementsApiFp = function (configuration) {\n    const localVarAxiosParamCreator = SettlementsApiAxiosParamCreator(configuration);\n    return {\n        /**\n         * Use this API to view all the settlements of a particular order.\n         * @summary Get Settlements by Order ID\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} order_id The id which uniquely identifies your order\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n    };\n};\n/**\n * SettlementsApi - object-oriented interface\n * @export\n * @class SettlementsApi\n * @extends {BaseAPI}\n */\n/**\n * SoftPOSApi - axios parameter creator\n * @export\n */\nconst SoftPOSApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Use this API to create new terminals to use softPOS.\n         * @summary Create Terminal\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {CreateTerminalRequest} CreateTerminalRequest Request Body to Create Terminal for SPOS\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        sposCreateTerminal: (x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('sposCreateTerminal', 'x_api_version', x_api_version);\n            // verify required parameter 'CreateTerminalRequest' is not null or undefined\n            assertParamExists('sposCreateTerminal', 'CreateTerminalRequest', CreateTerminalRequest);\n            const localVarPath = `/terminal`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(CreateTerminalRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to create a new terminal transaction. To use this API you should first create an order using the Create Order API. Also, you need to enter the terminal details while creating the order and pass the same terminal information while creating a transaction using the below mentioned API.\n         * @summary Create Terminal Transaction\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {CreateTerminalTransactionRequest} CreateTerminalTransactionRequest Request body to create a terminal transaction\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        sposCreateTerminalTransaction: (x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('sposCreateTerminalTransaction', 'x_api_version', x_api_version);\n            // verify required parameter 'CreateTerminalTransactionRequest' is not null or undefined\n            assertParamExists('sposCreateTerminalTransaction', 'CreateTerminalTransactionRequest', CreateTerminalTransactionRequest);\n            const localVarPath = `/terminal/transactions`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(CreateTerminalTransactionRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to view all details of a terminal.\n         * @summary Get Terminal Status using Phone Number\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} terminal_phone_no The terminal for which you want to view the order details.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_idempotency_key?: string,\n         */\n        sposFetchTerminal: (x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('sposFetchTerminal', 'x_api_version', x_api_version);\n            // verify required parameter 'terminal_phone_no' is not null or undefined\n            assertParamExists('sposFetchTerminal', 'terminal_phone_no', terminal_phone_no);\n            const localVarPath = `/terminal/{terminal_phone_no}`\n                .replace(`{${\"terminal_phone_no\"}}`, encodeURIComponent(String(terminal_phone_no)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * You can fetch all the StaticQRs corresponding to given terminal id or phone number. Provide either the terminal_phone_no or terminal_id in the request.\n         * @summary Fetch Terminal QR Codes\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} terminal_phone_no Phone number assigned to the terminal. Required if you are not providing the cf_terminal_id in the request.\n         * @param {string} cf_terminal_id Cashfree terminal id for which you want to get staticQRs. Required if you are not providing the terminal_phone_number in the request.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        sposFetchTerminalQRCodes: (x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('sposFetchTerminalQRCodes', 'x_api_version', x_api_version);\n            // verify required parameter 'terminal_phone_no' is not null or undefined\n            assertParamExists('sposFetchTerminalQRCodes', 'terminal_phone_no', terminal_phone_no);\n            // verify required parameter 'cf_terminal_id' is not null or undefined\n            assertParamExists('sposFetchTerminalQRCodes', 'cf_terminal_id', cf_terminal_id);\n            const localVarPath = `/terminal/qrcodes`;\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            if (terminal_phone_no !== undefined) {\n                localVarQueryParameter['terminal_phone_no'] = terminal_phone_no;\n            }\n            if (cf_terminal_id !== undefined) {\n                localVarQueryParameter['cf_terminal_id'] = cf_terminal_id;\n            }\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to get  terminal transaction.\n         * @summary Get Terminal Transaction\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} utr Utr of the transaction.\n         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        sposFetchTerminalTransaction: (x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('sposFetchTerminalTransaction', 'x_api_version', x_api_version);\n            // verify required parameter 'utr' is not null or undefined\n            assertParamExists('sposFetchTerminalTransaction', 'utr', utr);\n            // verify required parameter 'cf_terminal_id' is not null or undefined\n            assertParamExists('sposFetchTerminalTransaction', 'cf_terminal_id', cf_terminal_id);\n            const localVarPath = `/terminal/{cf_terminal_id}/payments`\n                .replace(`{${\"cf_terminal_id\"}}`, encodeURIComponent(String(cf_terminal_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            if (utr !== undefined) {\n                localVarQueryParameter['utr'] = utr;\n            }\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to update the terminal details. Email, Phone Number, and Terminal Meta are updatable for \\\"Storefront\\\". Only account status change is possible in case of \\\"Agent\\\".\n         * @summary Update Terminal\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n         * @param {UpdateTerminalRequest} UpdateTerminalRequest Request Body to update terminal for SPOS.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        sposUpdateTerminal: (x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('sposUpdateTerminal', 'x_api_version', x_api_version);\n            // verify required parameter 'cf_terminal_id' is not null or undefined\n            assertParamExists('sposUpdateTerminal', 'cf_terminal_id', cf_terminal_id);\n            // verify required parameter 'UpdateTerminalRequest' is not null or undefined\n            assertParamExists('sposUpdateTerminal', 'UpdateTerminalRequest', UpdateTerminalRequest);\n            const localVarPath = `/terminal/{cf_terminal_id}`\n                .replace(`{${\"cf_terminal_id\"}}`, encodeURIComponent(String(cf_terminal_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(UpdateTerminalRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to update the terminal status.\n         * @summary Update Terminal Status\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n         * @param {UpdateTerminalStatusRequest} UpdateTerminalStatusRequest Request Body to update terminal status for SPOS.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        sposUpdateTerminalStatus: (x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('sposUpdateTerminalStatus', 'x_api_version', x_api_version);\n            // verify required parameter 'cf_terminal_id' is not null or undefined\n            assertParamExists('sposUpdateTerminalStatus', 'cf_terminal_id', cf_terminal_id);\n            // verify required parameter 'UpdateTerminalStatusRequest' is not null or undefined\n            assertParamExists('sposUpdateTerminalStatus', 'UpdateTerminalStatusRequest', UpdateTerminalStatusRequest);\n            const localVarPath = `/terminal/{cf_terminal_id}/status`\n                .replace(`{${\"cf_terminal_id\"}}`, encodeURIComponent(String(cf_terminal_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'PATCH' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(UpdateTerminalStatusRequest, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to upload the terminal documents.\n         * @summary Upload Terminal Docs\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n         * @param {UploadTerminalDocs} UploadTerminalDocs Request Body to update terminal documents for SPOS.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        sposUploadTerminalDocs: (x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('sposUploadTerminalDocs', 'x_api_version', x_api_version);\n            // verify required parameter 'cf_terminal_id' is not null or undefined\n            assertParamExists('sposUploadTerminalDocs', 'cf_terminal_id', cf_terminal_id);\n            // verify required parameter 'UploadTerminalDocs' is not null or undefined\n            assertParamExists('sposUploadTerminalDocs', 'UploadTerminalDocs', UploadTerminalDocs);\n            const localVarPath = `/terminal/{cf_terminal_id}/docs`\n                .replace(`{${\"cf_terminal_id\"}}`, encodeURIComponent(String(cf_terminal_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'POST' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['Content-Type'] = 'application/json';\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            localVarRequestOptions.data = serializeDataIfNeeded(UploadTerminalDocs, localVarRequestOptions, configuration);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * SoftPOSApi - functional programming interface\n * @export\n */\nconst SoftPOSApiFp = function (configuration) {\n    const localVarAxiosParamCreator = SoftPOSApiAxiosParamCreator(configuration);\n    return {\n        /**\n         * Use this API to create new terminals to use softPOS.\n         * @summary Create Terminal\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {CreateTerminalRequest} CreateTerminalRequest Request Body to Create Terminal for SPOS\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to create a new terminal transaction. To use this API you should first create an order using the Create Order API. Also, you need to enter the terminal details while creating the order and pass the same terminal information while creating a transaction using the below mentioned API.\n         * @summary Create Terminal Transaction\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {CreateTerminalTransactionRequest} CreateTerminalTransactionRequest Request body to create a terminal transaction\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to view all details of a terminal.\n         * @summary Get Terminal Status using Phone Number\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} terminal_phone_no The terminal for which you want to view the order details.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * You can fetch all the StaticQRs corresponding to given terminal id or phone number. Provide either the terminal_phone_no or terminal_id in the request.\n         * @summary Fetch Terminal QR Codes\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} terminal_phone_no Phone number assigned to the terminal. Required if you are not providing the cf_terminal_id in the request.\n         * @param {string} cf_terminal_id Cashfree terminal id for which you want to get staticQRs. Required if you are not providing the terminal_phone_number in the request.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to get  terminal transaction.\n         * @summary Get Terminal Transaction\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} utr Utr of the transaction.\n         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sposFetchTerminalTransaction(x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposFetchTerminalTransaction(x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to update the terminal details. Email, Phone Number, and Terminal Meta are updatable for \\\"Storefront\\\". Only account status change is possible in case of \\\"Agent\\\".\n         * @summary Update Terminal\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n         * @param {UpdateTerminalRequest} UpdateTerminalRequest Request Body to update terminal for SPOS.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to update the terminal status.\n         * @summary Update Terminal Status\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n         * @param {UpdateTerminalStatusRequest} UpdateTerminalStatusRequest Request Body to update terminal status for SPOS.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to upload the terminal documents.\n         * @summary Upload Terminal Docs\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n         * @param {UploadTerminalDocs} UploadTerminalDocs Request Body to update terminal documents for SPOS.\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        sposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.sposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n    };\n};\n/**\n * SoftPOSApi - object-oriented interface\n * @export\n * @class SoftPOSApi\n * @extends {BaseAPI}\n */\n/**\n * TokenVaultApi - axios parameter creator\n * @export\n */\nconst TokenVaultApiAxiosParamCreator = function (configuration) {\n    return {\n        /**\n         * Use this API to delete a saved card instrument for a customer_id and instrument_id\n         * @summary Delete Saved Card Instrument\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n         * @param {string} instrument_id The instrument_id which needs to be deleted\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGCustomerDeleteInstrument: (x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGCustomerDeleteInstrument', 'x_api_version', x_api_version);\n            // verify required parameter 'customer_id' is not null or undefined\n            assertParamExists('pGCustomerDeleteInstrument', 'customer_id', customer_id);\n            // verify required parameter 'instrument_id' is not null or undefined\n            assertParamExists('pGCustomerDeleteInstrument', 'instrument_id', instrument_id);\n            const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}`\n                .replace(`{${\"customer_id\"}}`, encodeURIComponent(String(customer_id)))\n                .replace(`{${\"instrument_id\"}}`, encodeURIComponent(String(instrument_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'DELETE' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to fetch a single specific saved card for a customer_id by it\\'s instrument_id\n         * @summary Fetch Specific Saved Card Instrument\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n         * @param {string} instrument_id The instrument_id of the saved instrument which needs to be queried\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGCustomerFetchInstrument: (x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGCustomerFetchInstrument', 'x_api_version', x_api_version);\n            // verify required parameter 'customer_id' is not null or undefined\n            assertParamExists('pGCustomerFetchInstrument', 'customer_id', customer_id);\n            // verify required parameter 'instrument_id' is not null or undefined\n            assertParamExists('pGCustomerFetchInstrument', 'instrument_id', instrument_id);\n            const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}`\n                .replace(`{${\"customer_id\"}}`, encodeURIComponent(String(customer_id)))\n                .replace(`{${\"instrument_id\"}}`, encodeURIComponent(String(instrument_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API to fetch saved cards for a customer_id\n         * @summary Fetch All Saved Card Instrument\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n         * @param {PGCustomerFetchInstrumentsInstrumentTypeEnum} instrument_type Payment mode or type of saved instrument\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGCustomerFetchInstruments: (x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGCustomerFetchInstruments', 'x_api_version', x_api_version);\n            // verify required parameter 'customer_id' is not null or undefined\n            assertParamExists('pGCustomerFetchInstruments', 'customer_id', customer_id);\n            // verify required parameter 'instrument_type' is not null or undefined\n            assertParamExists('pGCustomerFetchInstruments', 'instrument_type', instrument_type);\n            const localVarPath = `/customers/{customer_id}/instruments`\n                .replace(`{${\"customer_id\"}}`, encodeURIComponent(String(customer_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            if (instrument_type !== undefined) {\n                localVarQueryParameter['instrument_type'] = instrument_type;\n            }\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n        /**\n         * Use this API To get the card network token, token expiry and cryptogram for a saved card instrument using instrument id\n         * @summary Fetch cryptogram for a saved card instrument\n         \n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n         * @param {string} instrument_id The instrument_id of the saved card instrument which needs to be queried\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         * x_request_id?: string,\n         */\n        pGCustomerInstrumentsFetchCryptogram: (x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options = {}) => __awaiter(this, void 0, void 0, function* () {\n            // verify required parameter 'x_api_version' is not null or undefined\n            assertParamExists('pGCustomerInstrumentsFetchCryptogram', 'x_api_version', x_api_version);\n            // verify required parameter 'customer_id' is not null or undefined\n            assertParamExists('pGCustomerInstrumentsFetchCryptogram', 'customer_id', customer_id);\n            // verify required parameter 'instrument_id' is not null or undefined\n            assertParamExists('pGCustomerInstrumentsFetchCryptogram', 'instrument_id', instrument_id);\n            const localVarPath = `/customers/{customer_id}/instruments/{instrument_id}/cryptogram`\n                .replace(`{${\"customer_id\"}}`, encodeURIComponent(String(customer_id)))\n                .replace(`{${\"instrument_id\"}}`, encodeURIComponent(String(instrument_id)));\n            // use dummy base URL string because the URL constructor only accepts absolute URLs.\n            var url = \"https://sandbox.cashfree.com/pg\";\n            if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                url = \"https://api.cashfree.com/pg\";\n            }\n            const localVarUrlObj = new URL(localVarPath, url);\n            let baseOptions;\n            if (configuration) {\n                baseOptions = configuration.baseOptions;\n            }\n            const localVarRequestOptions = Object.assign(Object.assign({ method: 'GET' }, baseOptions), options);\n            const localVarHeaderParameter = {};\n            const localVarQueryParameter = {};\n            // authentication XPartnerAPIKey required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-apikey\");\n            // authentication XClientSecret required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-secret\");\n            // authentication XPartnerMerchantID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-partner-merchantid\");\n            // authentication XClientID required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-id\");\n            // authentication XClientSignatureHeader required\n            yield setApiKeyToObject(localVarHeaderParameter, \"x-client-signature\");\n            localVarHeaderParameter['x-sdk-platform'] = 'nodejssdk-4.1.2';\n            if (x_api_version != null && x_api_version != undefined) {\n                localVarHeaderParameter['x-api-version'] = x_api_version;\n            }\n            if (x_request_id != null && x_request_id != undefined) {\n                localVarHeaderParameter['x-request-id'] = x_request_id;\n            }\n            if (x_idempotency_key != null && x_idempotency_key != undefined) {\n                localVarHeaderParameter['x-idempotency-key'] = x_idempotency_key;\n            }\n            setSearchParams(localVarUrlObj, localVarQueryParameter);\n            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};\n            localVarRequestOptions.headers = Object.assign(Object.assign(Object.assign({}, localVarHeaderParameter), headersFromBaseOptions), options.headers);\n            return {\n                url: toPathString(localVarUrlObj),\n                options: localVarRequestOptions,\n            };\n        }),\n    };\n};\n/**\n * TokenVaultApi - functional programming interface\n * @export\n */\nconst TokenVaultApiFp = function (configuration) {\n    const localVarAxiosParamCreator = TokenVaultApiAxiosParamCreator(configuration);\n    return {\n        /**\n         * Use this API to delete a saved card instrument for a customer_id and instrument_id\n         * @summary Delete Saved Card Instrument\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n         * @param {string} instrument_id The instrument_id which needs to be deleted\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to fetch a single specific saved card for a customer_id by it\\'s instrument_id\n         * @summary Fetch Specific Saved Card Instrument\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n         * @param {string} instrument_id The instrument_id of the saved instrument which needs to be queried\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API to fetch saved cards for a customer_id\n         * @summary Fetch All Saved Card Instrument\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n         * @param {PGCustomerFetchInstrumentsInstrumentTypeEnum} instrument_type Payment mode or type of saved instrument\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n        /**\n         * Use this API To get the card network token, token expiry and cryptogram for a saved card instrument using instrument id\n         * @summary Fetch cryptogram for a saved card instrument\n         * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n         * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n         * @param {string} instrument_id The instrument_id of the saved card instrument which needs to be queried\n         * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n         * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n         * @param {*} [options] Override http request option.\n         * @throws {RequiredError}\n         */\n        pGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {\n            return __awaiter(this, void 0, void 0, function* () {\n                const localVarAxiosArgs = yield localVarAxiosParamCreator.pGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options);\n                var url = \"https://sandbox.cashfree.com/pg\";\n                if (Cashfree.XEnvironment == CFEnvironment.PRODUCTION) {\n                    url = \"https://api.cashfree.com/pg\";\n                }\n                return createRequestFunction(localVarAxiosArgs, globalAxios, url, configuration);\n            });\n        },\n    };\n};\n/**\n * TokenVaultApi - object-oriented interface\n * @export\n * @class TokenVaultApi\n * @extends {BaseAPI}\n */\n/**\n * @export\n */\nexport const PGCustomerFetchInstrumentsInstrumentTypeEnum = {\n    CARD: 'card',\n    UNKNOWN_DEFAULT_OPEN_API: '11184809'\n};\nclass Environment {\n    constructor() {\n        this.PRODUCTION = CFEnvironment.PRODUCTION;\n        this.SANDBOX = CFEnvironment.SANDBOX;\n    }\n}\nexport class PGWebhookEvent {\n    constructor(type, rawBody, object) {\n        this.type = type;\n        this.raw = rawBody;\n        this.object = object;\n    }\n}\nexport class Cashfree {\n    /**\n     * Use this API to verify your webhook signature once you receive from Cashfree's server.\n     * @summary Verify Webhook Signatures\n     * @param {string} signature that is present in the header of the webhook (\"x-webhook-signature\")\n     * @param {string} rawBody is the entire body sent to the server in string format\n     * @param {string} timestamp that is present in the header of the webhook (\"x-webhook-timestamp\")\n     * @throws {Error}\n     */\n    static PGVerifyWebhookSignature(signature, rawBody, timestamp) {\n        const body = timestamp + rawBody;\n        const secretKey = Cashfree.XClientSecret;\n        let generatedSignature = crypto.createHmac('sha256', secretKey).update(body).digest(\"base64\");\n        if (generatedSignature === signature) {\n            let jsonObject = JSON.parse(rawBody);\n            return new PGWebhookEvent(jsonObject.type, rawBody, jsonObject);\n        }\n        throw new Error(\"Generated signature and received signature did not match.\");\n    }\n    /**\n     * Create Customer at Cashfree\n     * @summary Create Customer at Cashfree\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateCustomerRequest} CreateCustomerRequest Request to create a new customer at Cashfree\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof CustomersApi\n     */\n    static PGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return CustomersApiFp().pGCreateCustomer(x_api_version, CreateCustomerRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * The Create On Demand Transfer API will create a new on-demand request either from to the merchant or from to the vendor.\n     * @summary Create On Demand Transfer\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {AdjustVendorBalanceRequest} [AdjustVendorBalanceRequest] Adjust Vendor Balance Request Body.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EasySplitApi\n     */\n    static PGESCreateOnDemandTransfer(x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EasySplitApiFp().pGESCreateOnDemandTransfer(x_api_version, vendor_id, x_request_id, x_idempotency_key, AdjustVendorBalanceRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to create a new vendor to your EasySplit account along with the KYC details. Provide KYC details such as account_type, business_type, gst, cin, pan, passport number and so on.\n     * @summary Create vendor\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {CreateVendorRequest} [CreateVendorRequest] Create Vendor Request Body.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EasySplitApi\n     */\n    static PGESCreateVendors(x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EasySplitApiFp().pGESCreateVendors(x_api_version, x_request_id, x_idempotency_key, CreateVendorRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to download the uploaded KYC documents of that particular vendor. Provide the document type. Click the link from the sample request to download the KYC document.\n     * @summary Download Vendor Documents\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} doc_type Mention the document type that has to be downloaded. Only an uploaded document can be downloaded.\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EasySplitApi\n     */\n    static PGESDownloadVendorsDocs(x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EasySplitApiFp().pGESDownloadVendorsDocs(x_api_version, doc_type, vendor_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to get the details of a specific vendor associated with your Easy Split account.\n     * @summary Get Vendor All Details\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EasySplitApi\n     */\n    static PGESFetchVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EasySplitApiFp().pGESFetchVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * This API fetches the available amount with the merchant, vendor, and the unsettled amount for the merchant as well as the vendor.\n     * @summary Get On Demand Balance\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EasySplitApi\n     */\n    static PGESGetVendorBalance(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EasySplitApiFp().pGESGetVendorBalance(x_api_version, vendor_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * This API returns the applicable service charge and service tax for a vendor balance transfer, based on the provided amount and rate type.\n     * @summary Get Vendor Balance Transfer Charges\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {number} amount Specify the amount for which you want to view the service charges and service taxes in the response.\n     * @param {string} rate_type Mention the type of rate for which you want to check the charges. Possible value: VENDOR_ON_DEMAND\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EasySplitApi\n     */\n    static PGESGetVendorBalanceTransferCharges(x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EasySplitApiFp().pGESGetVendorBalanceTransferCharges(x_api_version, amount, rate_type, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to fetch the details of all the KYC details of a particular vendor.\n     * @summary Get Vendor All Documents Status\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EasySplitApi\n     */\n    static PGESGetVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EasySplitApiFp().pGESGetVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to get all the split details, settled and unsettled transactions details of each vendor who were part of a particular order by providing order Id or start date and end date.\n     * @summary Get Split and Settlement Details by OrderID v2.0\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {ESOrderReconRequest} [ESOrderReconRequest] Get Split and Settlement Details by OrderID v2.0\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EasySplitApi\n     */\n    static PGESOrderRecon(x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EasySplitApiFp().pGESOrderRecon(x_api_version, x_request_id, x_idempotency_key, ESOrderReconRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to edit the existing vendor details added to your EasySplit account. You can edit vendor details such as name, email, phone number, upi details, and any of the KYC details.\n     * @summary Update vendor Details\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {UpdateVendorRequest} [UpdateVendorRequest] Create Vendor Request Body.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EasySplitApi\n     */\n    static PGESUpdateVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EasySplitApiFp().pGESUpdateVendors(x_api_version, vendor_id, x_request_id, x_idempotency_key, UpdateVendorRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to upload KYC documents of a specific vendor.\n     * @summary Upload Vendor Docs\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} vendor_id The id which uniquely identifies your vendor.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {string} [doc_type] Mention the type of the document you are uploading. Possible values: UIDAI_FRONT, UIDAI_BACK, UIDAI_NUMBER, DL, DL_NUMBER, PASSPORT_FRONT, PASSPORT_BACK, PASSPORT_NUMBER, VOTER_ID, VOTER_ID_NUMBER, PAN, PAN_NUMBER, GST, GSTIN_NUMBER, CIN, CIN_NUMBER, NBFC_CERTIFICATE. If the doc type ends with a number you should add the doc value else upload the doc file.\n     * @param {string} [doc_value] Enter the display name of the uploaded file.\n     * @param {File} [file] Select the document that should be uploaded or provide the path of that file. You cannot upload a file that is more than 2MB in size.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EasySplitApi\n     */\n    static PGESUploadVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EasySplitApiFp().pGESUploadVendorsDocs(x_api_version, vendor_id, x_request_id, x_idempotency_key, doc_type, doc_value, file, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Split After Payment API splits the payments to vendors after successful payment from the customers.\n     * @summary Split After Payment\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {SplitAfterPaymentRequest} [SplitAfterPaymentRequest] Request Body to Create Split for an order.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EasySplitApi\n     */\n    static PGOrderSplitAfterPayment(x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EasySplitApiFp().pGOrderSplitAfterPayment(x_api_version, order_id, x_request_id, x_idempotency_key, SplitAfterPaymentRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * This API will create a static split scheme wherein you can define the split type and the vendor-wise split percentage.\n     * @summary Create Static Split Configuration\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {StaticSplitRequest} [StaticSplitRequest] Static Split\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EasySplitApi\n     */\n    static PGOrderStaticSplit(x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EasySplitApiFp().pGOrderStaticSplit(x_api_version, x_request_id, x_idempotency_key, StaticSplitRequest, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to get eligible Cardless EMI Payment Methods available for a customer on an order basis their phone number.\n     * @summary Get Eligible Cardless EMI Payment Methods for a customer on an order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {EligibilityFetchCardlessEMIRequest} EligibilityFetchCardlessEMIRequest Request Body to get eligible cardless emi options for a customer and order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EligibilityApi\n     */\n    static PGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EligibilityApiFp().pGEligibilityFetchCardlessEMI(x_api_version, EligibilityFetchCardlessEMIRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to get eligible offers for an order_id or order amount.\n     * @summary Get Eligible Offers for an Order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {EligibilityFetchOffersRequest} EligibilityFetchOffersRequest Request Body to get eligible offers for a customer and order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EligibilityApi\n     */\n    static PGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EligibilityApiFp().pGEligibilityFetchOffers(x_api_version, EligibilityFetchOffersRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to get eligible Paylater Payment Methods for a customer on an order.\n     * @summary Get Eligible Paylater for a customer on an order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {EligibilityFetchPaylaterRequest} EligibilityFetchPaylaterRequest Request Body to get eligible paylater options for a customer and order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EligibilityApi\n     */\n    static PGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EligibilityApiFp().pGEligibilityFetchPaylater(x_api_version, EligibilityFetchPaylaterRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to get eligible Payment Methods\n     * @summary Get eligible Payment Methods\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {EligibilityFetchPaymentMethodsRequest} EligibilityFetchPaymentMethodsRequest Request Body to get eligible payment methods for an account and order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof EligibilityApi\n     */\n    static PGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return EligibilityApiFp().pGEligibilityFetchPaymentMethods(x_api_version, EligibilityFetchPaymentMethodsRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to create offers with Cashfree from your backend\n     * @summary Create Offer\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateOfferRequest} CreateOfferRequest Request body to create an offer at Cashfree\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OffersApi\n     */\n    static PGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return OffersApiFp().pGCreateOffer(x_api_version, CreateOfferRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to get offer by offer_id\n     * @summary Get Offer by ID\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} offer_id The offer ID for which you want to view the offer details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OffersApi\n     */\n    static PGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return OffersApiFp().pGFetchOffer(x_api_version, offer_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * ### Order An order is an entity which has a amount and currency associated with it. It is something for which you want to collect payment for. Use this API to create orders with Cashfree from your backend to get a `payment_sessions_id`.  You can use the `payment_sessions_id` to create a transaction for the order.\n     * @summary Create Order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateOrderRequest} CreateOrderRequest Request body to create an order at cashfree\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrdersApi\n     */\n    static PGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return OrdersApiFp().pGCreateOrder(x_api_version, CreateOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to fetch the order that was created at Cashfree\\'s using the `order_id`.  ## When to use this API - To check the status of your order - Once the order is PAID - Once your customer returns to `return_url`\n     * @summary Get Order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrdersApi\n     */\n    static PGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return OrdersApiFp().pGFetchOrder(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to terminate the order that was created at Cashfree\\'s using the `order_id`.\n     * @summary Terminate Order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {TerminateOrderRequest} TerminateOrderRequest Request body to terminate an order at cashfree\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof OrdersApi\n     */\n    static PGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return OrdersApiFp().pGTerminateOrder(x_api_version, order_id, TerminateOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * - Use this API to get the payment gateway reconciliation details with date range. - It will have events for your payment account\n     * @summary PG Reconciliation\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {FetchReconRequest} FetchReconRequest Request Body for the reconciliation\n     * @param {string} [Content_Type] application/json\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {string} [Accept] application/json\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PGReconciliationApi\n     */\n    static PGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return PGReconciliationApiFp().pGFetchRecon(x_api_version, FetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to cancel a payment link. No further payments can be done against a cancelled link. Only a link in ACTIVE status can be cancelled.\n     * @summary Cancel Payment Link\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} link_id The payment link ID for which you want to view the details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentLinksApi\n     */\n    static PGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return PaymentLinksApiFp().pGCancelLink(x_api_version, link_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to create a new payment link. The created payment link url will be available in the API response parameter link_url.\n     * @summary Create Payment Link\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateLinkRequest} CreateLinkRequest Request Body to Create Payment Links\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentLinksApi\n     */\n    static PGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return PaymentLinksApiFp().pGCreateLink(x_api_version, CreateLinkRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to view all details and status of a payment link.\n     * @summary Fetch Payment Link Details\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} link_id The payment link ID for which you want to view the details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentLinksApi\n     */\n    static PGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return PaymentLinksApiFp().pGFetchLink(x_api_version, link_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to view all order details for a payment link.\n     * @summary Get Orders for a Payment Link\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} link_id The payment link ID for which you want to view the details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentLinksApi\n     */\n    static PGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return PaymentLinksApiFp().pGLinkFetchOrders(x_api_version, link_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to capture or void a preauthorized payment\n     * @summary Preauthorization\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {AuthorizeOrderRequest} AuthorizeOrderRequest Request to Capture or Void Transactions\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    static PGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return PaymentsApiFp().pGAuthorizeOrder(x_api_version, order_id, AuthorizeOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * If you accept OTP on your own page, you can use the below API to send OTP to Cashfree.\n     * @summary Submit or Resend OTP\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} cf_payment_id The Cashfree payment or transaction ID.\n     * @param {OrderAuthenticatePaymentRequest} OrderAuthenticatePaymentRequest Request body to submit/resend headless OTP. To use this API make sure you have headless OTP enabled for your account\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    static PGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return PaymentsApiFp().pGOrderAuthenticatePayment(x_api_version, cf_payment_id, OrderAuthenticatePaymentRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to view payment details of an order for a payment ID.\n     * @summary Get Payment by ID\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} cf_payment_id The Cashfree payment or transaction ID.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    static PGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return PaymentsApiFp().pGOrderFetchPayment(x_api_version, order_id, cf_payment_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to view all payment details for an order.\n     * @summary Get Payments for an Order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    static PGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return PaymentsApiFp().pGOrderFetchPayments(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API when you have already created the orders and want Cashfree to process the payment. To use this API S2S flag needs to be enabled from the backend. In case you want to use the cards payment option the PCI DSS flag is required, for more information send an email to \\\"care@cashfree.com\\\".\n     * @summary Order Pay\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {PayOrderRequest} PayOrderRequest Request body to create a transaction at cashfree using &#x60;payment_session_id&#x60;\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof PaymentsApi\n     */\n    static PGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return PaymentsApiFp().pGPayOrder(x_api_version, PayOrderRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to initiate refunds.\n     * @summary Create Refund\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {OrderCreateRefundRequest} OrderCreateRefundRequest Request Body to Create Refunds\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RefundsApi\n     */\n    static PGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return RefundsApiFp().pGOrderCreateRefund(x_api_version, order_id, OrderCreateRefundRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to fetch a specific refund processed on your Cashfree Account.\n     * @summary Get Refund\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} refund_id Refund Id of the refund you want to fetch.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RefundsApi\n     */\n    static PGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return RefundsApiFp().pGOrderFetchRefund(x_api_version, order_id, refund_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to fetch all refunds processed against an order.\n     * @summary Get All Refunds for an Order\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof RefundsApi\n     */\n    static PGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return RefundsApiFp().pGOrderFetchRefunds(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to get all settlement details by specifying the settlement ID, settlement UTR or date range.\n     * @summary Get All Settlements\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {FetchSettlementsRequest} FetchSettlementsRequest Request Body to get the settlements\n     * @param {string} [Content_Type] application/json\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {string} [Accept] application/json\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettlementReconciliationApi\n     */\n    static PGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return SettlementReconciliationApiFp().pGFetchSettlements(x_api_version, FetchSettlementsRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * - Use this API to get settlement reconciliation details using Settlement ID, settlement UTR or date range. - This API will return events for the settlement IDs you want\n     * @summary Settlement Reconciliation\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {SettlementFetchReconRequest} SettlementFetchReconRequest Request Body for the settlement reconciliation\n     * @param {string} [Content_Type] application/json\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {string} [Accept] application/json\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettlementReconciliationApi\n     */\n    static PGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return SettlementReconciliationApiFp().pGSettlementFetchRecon(x_api_version, SettlementFetchReconRequest, Content_Type, x_request_id, x_idempotency_key, Accept, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to view all the settlements of a particular order.\n     * @summary Get Settlements by Order ID\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} order_id The id which uniquely identifies your order\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SettlementsApi\n     */\n    static PGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return SettlementsApiFp().pGOrderFetchSettlement(x_api_version, order_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to create new terminals to use softPOS.\n     * @summary Create Terminal\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateTerminalRequest} CreateTerminalRequest Request Body to Create Terminal for SPOS\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SoftPOSApi\n     */\n    static SposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return SoftPOSApiFp().sposCreateTerminal(x_api_version, CreateTerminalRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to create a new terminal transaction. To use this API you should first create an order using the Create Order API. Also, you need to enter the terminal details while creating the order and pass the same terminal information while creating a transaction using the below mentioned API.\n     * @summary Create Terminal Transaction\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {CreateTerminalTransactionRequest} CreateTerminalTransactionRequest Request body to create a terminal transaction\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SoftPOSApi\n     */\n    static SposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return SoftPOSApiFp().sposCreateTerminalTransaction(x_api_version, CreateTerminalTransactionRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to view all details of a terminal.\n     * @summary Get Terminal Status using Phone Number\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} terminal_phone_no The terminal for which you want to view the order details.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SoftPOSApi\n     */\n    static SposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return SoftPOSApiFp().sposFetchTerminal(x_api_version, terminal_phone_no, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * You can fetch all the StaticQRs corresponding to given terminal id or phone number. Provide either the terminal_phone_no or terminal_id in the request.\n     * @summary Fetch Terminal QR Codes\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} terminal_phone_no Phone number assigned to the terminal. Required if you are not providing the cf_terminal_id in the request.\n     * @param {string} cf_terminal_id Cashfree terminal id for which you want to get staticQRs. Required if you are not providing the terminal_phone_number in the request.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SoftPOSApi\n     */\n    static SposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return SoftPOSApiFp().sposFetchTerminalQRCodes(x_api_version, terminal_phone_no, cf_terminal_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to get  terminal transaction.\n     * @summary Get Terminal Transaction\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} utr Utr of the transaction.\n     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SoftPOSApi\n     */\n    static SposFetchTerminalTransaction(x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return SoftPOSApiFp().sposFetchTerminalTransaction(x_api_version, utr, cf_terminal_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to update the terminal details. Email, Phone Number, and Terminal Meta are updatable for \\\"Storefront\\\". Only account status change is possible in case of \\\"Agent\\\".\n     * @summary Update Terminal\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n     * @param {UpdateTerminalRequest} UpdateTerminalRequest Request Body to update terminal for SPOS.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SoftPOSApi\n     */\n    static SposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return SoftPOSApiFp().sposUpdateTerminal(x_api_version, cf_terminal_id, UpdateTerminalRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to update the terminal status.\n     * @summary Update Terminal Status\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n     * @param {UpdateTerminalStatusRequest} UpdateTerminalStatusRequest Request Body to update terminal status for SPOS.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SoftPOSApi\n     */\n    static SposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return SoftPOSApiFp().sposUpdateTerminalStatus(x_api_version, cf_terminal_id, UpdateTerminalStatusRequest, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to upload the terminal documents.\n     * @summary Upload Terminal Docs\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} cf_terminal_id Provide the Cashfree terminal ID for which the details have to be updated.\n     * @param {UploadTerminalDocs} UploadTerminalDocs Request Body to update terminal documents for SPOS.\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof SoftPOSApi\n     */\n    static SposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return SoftPOSApiFp().sposUploadTerminalDocs(x_api_version, cf_terminal_id, UploadTerminalDocs, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to delete a saved card instrument for a customer_id and instrument_id\n     * @summary Delete Saved Card Instrument\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n     * @param {string} instrument_id The instrument_id which needs to be deleted\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TokenVaultApi\n     */\n    static PGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return TokenVaultApiFp().pGCustomerDeleteInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to fetch a single specific saved card for a customer_id by it\\'s instrument_id\n     * @summary Fetch Specific Saved Card Instrument\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n     * @param {string} instrument_id The instrument_id of the saved instrument which needs to be queried\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TokenVaultApi\n     */\n    static PGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return TokenVaultApiFp().pGCustomerFetchInstrument(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API to fetch saved cards for a customer_id\n     * @summary Fetch All Saved Card Instrument\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n     * @param {PGCustomerFetchInstrumentsInstrumentTypeEnum} instrument_type Payment mode or type of saved instrument\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TokenVaultApi\n     */\n    static PGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return TokenVaultApiFp().pGCustomerFetchInstruments(x_api_version, customer_id, instrument_type, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n    /**\n     * Use this API To get the card network token, token expiry and cryptogram for a saved card instrument using instrument id\n     * @summary Fetch cryptogram for a saved card instrument\n     * @param {string} x_api_version API version to be used. Format is in YYYY-MM-DD\n     * @param {string} customer_id Your Customer ID that you had sent during create order API &#x60;POST/orders&#x60;\n     * @param {string} instrument_id The instrument_id of the saved card instrument which needs to be queried\n     * @param {string} [x_request_id] Request id for the API call. Can be used to resolve tech issues. Communicate this in your tech related queries to cashfree\n     * @param {string} [x_idempotency_key] An idempotency key is a unique identifier you include with your API call. If the request fails or times out, you can safely retry it using the same key to avoid duplicate actions.\n     * @param {*} [options] Override http request option.\n     * @throws {RequiredError}\n     * @memberof TokenVaultApi\n     */\n    static PGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options) {\n        if (Cashfree.XEnableErrorAnalytics) {\n            Sentry.init({\n                dsn: 'https://748d9dcfc4286488867c59651cb6121a@o330525.ingest.sentry.io/4506692796350464',\n                // Performance Monitoring\n                tracesSampleRate: 1.0,\n                // Set sampling rate for profiling - this is relative to tracesSampleRate\n                profilesSampleRate: 1.0,\n                attachStacktrace: true,\n                enableTracing: true,\n                beforeSend: (event) => {\n                    delete event.contexts.os;\n                    delete event.contexts.device;\n                    delete event.server_name;\n                    if (event.exception && event.exception.values && event.exception.values.length && event.exception.values[0].stacktrace) {\n                        const stackTrace = event.exception.values[0].stacktrace;\n                        if (stackTrace && stackTrace.frames) {\n                            const filteredDomains = stackTrace.frames.filter((x) => x.filename.includes(\"cashfree-pg\")).map((x) => x.filename);\n                            if (filteredDomains && filteredDomains.length > 0 && filteredDomains[0].includes(\"cashfree-pg\")) {\n                                if (Cashfree.XEnableErrorAnalytics) {\n                                    return event;\n                                }\n                                return null;\n                            }\n                        }\n                    }\n                    return null;\n                },\n            });\n            Sentry.configureScope((scope) => {\n                if (Cashfree.XEnvironment == CFEnvironment.SANDBOX) {\n                    scope.setExtra('environment', 'sandbox');\n                }\n                else {\n                    scope.setExtra('environment', 'production');\n                }\n                scope.setExtra('release', \"4.1.2\");\n            });\n        }\n        try {\n            return TokenVaultApiFp().pGCustomerInstrumentsFetchCryptogram(x_api_version, customer_id, instrument_id, x_request_id, x_idempotency_key, options).then((request) => request(Cashfree.axios, Cashfree.basePath));\n        }\n        catch (error) {\n            if (Cashfree.XEnableErrorAnalytics) {\n                Sentry.captureException(error);\n            }\n            throw error;\n        }\n    }\n}\nCashfree.XEnableErrorAnalytics = true;\nCashfree.XApiVersion = \"2023-08-01\";\nCashfree.Environment = new Environment();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}