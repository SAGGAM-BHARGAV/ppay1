{"ast":null,"code":"import { lazyLoadedNodePerformanceMonitoringIntegrations } from '@sentry-internal/tracing';\nimport { logger } from '@sentry/utils';\n\n/**\n * Automatically detects and returns integrations that will work with your dependencies.\n */\nfunction autoDiscoverNodePerformanceMonitoringIntegrations() {\n  const loadedIntegrations = lazyLoadedNodePerformanceMonitoringIntegrations.map(tryLoad => {\n    try {\n      return tryLoad();\n    } catch (_) {\n      return undefined;\n    }\n  }).filter(integration => !!integration);\n  if (loadedIntegrations.length === 0) {\n    logger.warn('Performance monitoring integrations could not be automatically loaded.');\n  }\n\n  // Only return integrations where their dependencies loaded successfully.\n  return loadedIntegrations.filter(integration => !!integration.loadDependency());\n}\nexport { autoDiscoverNodePerformanceMonitoringIntegrations };","map":{"version":3,"names":["autoDiscoverNodePerformanceMonitoringIntegrations","loadedIntegrations","lazyLoadedNodePerformanceMonitoringIntegrations","map","tryLoad","_","undefined","filter","integration","length","logger","warn","loadDependency"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\tracing\\index.ts"],"sourcesContent":["import type { LazyLoadedIntegration } from '@sentry-internal/tracing';\nimport { lazyLoadedNodePerformanceMonitoringIntegrations } from '@sentry-internal/tracing';\nimport type { Integration } from '@sentry/types';\nimport { logger } from '@sentry/utils';\n\n/**\n * Automatically detects and returns integrations that will work with your dependencies.\n */\nexport function autoDiscoverNodePerformanceMonitoringIntegrations(): Integration[] {\n  const loadedIntegrations = lazyLoadedNodePerformanceMonitoringIntegrations\n    .map(tryLoad => {\n      try {\n        return tryLoad();\n      } catch (_) {\n        return undefined;\n      }\n    })\n    .filter(integration => !!integration) as LazyLoadedIntegration[];\n\n  if (loadedIntegrations.length === 0) {\n    logger.warn('Performance monitoring integrations could not be automatically loaded.');\n  }\n\n  // Only return integrations where their dependencies loaded successfully.\n  return loadedIntegrations.filter(integration => !!integration.loadDependency());\n}\n"],"mappings":";;;AAKA;AACA;AACA;AACO,SAASA,iDAAiDA,CAAA,EAAkB;EACjF,MAAMC,kBAAA,GAAqBC,+CAAA,CACxBC,GAAG,CAACC,OAAA,IAAW;IACd,IAAI;MACF,OAAOA,OAAO,EAAE;IACxB,CAAQ,QAAOC,CAAC,EAAE;MACV,OAAOC,SAAS;IACxB;EACA,CAAK,EACAC,MAAM,CAACC,WAAA,IAAe,CAAC,CAACA,WAAW,CAAE;EAExC,IAAIP,kBAAkB,CAACQ,MAAO,KAAI,CAAC,EAAE;IACnCC,MAAM,CAACC,IAAI,CAAC,wEAAwE,CAAC;EACzF;;EAEA;EACE,OAAOV,kBAAkB,CAACM,MAAM,CAACC,WAAY,IAAG,CAAC,CAACA,WAAW,CAACI,cAAc,EAAE,CAAC;AACjF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}