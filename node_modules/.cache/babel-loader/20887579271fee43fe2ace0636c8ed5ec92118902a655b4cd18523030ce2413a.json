{"ast":null,"code":"import { _optionalChain } from '@sentry/utils';\nimport { execFile } from 'child_process';\nimport { readFile, readdir } from 'fs';\nimport * as os from 'os';\nimport { join } from 'path';\nimport { promisify } from 'util';\nimport { defineIntegration, convertIntegrationFnToClass } from '@sentry/core';\n\n/* eslint-disable max-lines */\n\n// TODO: Required until we drop support for Node v8\nconst readFileAsync = promisify(readFile);\nconst readDirAsync = promisify(readdir);\nconst INTEGRATION_NAME = 'Context';\nconst _nodeContextIntegration = (options = {}) => {\n  let cachedContext;\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event) {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n    const updatedContext = _updateContext(await cachedContext);\n    event.contexts = {\n      ...event.contexts,\n      app: {\n        ...updatedContext.app,\n        ..._optionalChain([event, 'access', _ => _.contexts, 'optionalAccess', _2 => _2.app])\n      },\n      os: {\n        ...updatedContext.os,\n        ..._optionalChain([event, 'access', _3 => _3.contexts, 'optionalAccess', _4 => _4.os])\n      },\n      device: {\n        ...updatedContext.device,\n        ..._optionalChain([event, 'access', _5 => _5.contexts, 'optionalAccess', _6 => _6.device])\n      },\n      culture: {\n        ...updatedContext.culture,\n        ..._optionalChain([event, 'access', _7 => _7.contexts, 'optionalAccess', _8 => _8.culture])\n      },\n      cloud_resource: {\n        ...updatedContext.cloud_resource,\n        ..._optionalChain([event, 'access', _9 => _9.contexts, 'optionalAccess', _10 => _10.cloud_resource])\n      }\n    };\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts() {\n    const contexts = {};\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n    if (_options.culture) {\n      const culture = getCultureContext();\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n    return contexts;\n  }\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {},\n    // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event) {\n      return addContext(event);\n    }\n  };\n};\nconst nodeContextIntegration = defineIntegration(_nodeContextIntegration);\n\n/**\n * Add node modules / packages to the event.\n * @deprecated Use `nodeContextIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst Context = convertIntegrationFnToClass(INTEGRATION_NAME, nodeContextIntegration);\n\n// eslint-disable-next-line deprecation/deprecation\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts) {\n  // Only update properties if they exist\n  if (_optionalChain([contexts, 'optionalAccess', _11 => _11.app, 'optionalAccess', _12 => _12.app_memory])) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n  if (_optionalChain([contexts, 'optionalAccess', _13 => _13.device, 'optionalAccess', _14 => _14.free_memory])) {\n    contexts.device.free_memory = os.freemem();\n  }\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext() {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release()\n      };\n  }\n}\nfunction getCultureContext() {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    if (typeof process.versions.icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', {\n      month: 'long'\n    });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n      return {\n        locale: options.locale,\n        timezone: options.timeZone\n      };\n    }\n  } catch (err) {\n    //\n  }\n  return;\n}\nfunction getAppContext() {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n  return {\n    app_start_time,\n    app_memory\n  };\n}\n\n/**\n * Gets device information from os\n */\nfunction getDeviceContext(deviceOpt) {\n  const device = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime && os.uptime();\n  } catch (e) {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n  device.arch = os.arch();\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo = os.cpus();\n    if (cpuInfo && cpuInfo.length) {\n      const firstCpu = cpuInfo[0];\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows'\n};\n\n/** Linux version file to check for a distribution. */\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS = [{\n  name: 'fedora-release',\n  distros: ['Fedora']\n}, {\n  name: 'redhat-release',\n  distros: ['Red Hat Linux', 'Centos']\n}, {\n  name: 'redhat_version',\n  distros: ['Red Hat Linux']\n}, {\n  name: 'SuSE-release',\n  distros: ['SUSE Linux']\n}, {\n  name: 'lsb-release',\n  distros: ['Ubuntu Linux', 'Arch Linux']\n}, {\n  name: 'debian_version',\n  distros: ['Debian']\n}, {\n  name: 'debian_release',\n  distros: ['Debian']\n}, {\n  name: 'arch-release',\n  distros: ['Arch Linux']\n}, {\n  name: 'gentoo-release',\n  distros: ['Gentoo Linux']\n}, {\n  name: 'novell-release',\n  distros: ['SUSE Linux']\n}, {\n  name: 'alpine-release',\n  distros: ['Alpine Linux']\n}];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content)\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex, text) {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo() {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`\n  };\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise((resolve, reject) => {\n      execFile('/usr/bin/sw_vers', (error, stdout) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name) {\n  return name.split(' ')[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo() {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo = {\n    kernel_version: os.release(),\n    name: 'Linux'\n  };\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = join('/etc', distroFile.name);\n    const contents = (await readFileAsync(distroPath, {\n      encoding: 'utf-8'\n    })).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const {\n      distros\n    } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = LINUX_VERSIONS[id](contents);\n  } catch (e) {\n    // ignore\n  }\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext() {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp'\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify'\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku'\n    };\n  } else {\n    return undefined;\n  }\n}\nexport { Context, getDeviceContext, nodeContextIntegration, readDirAsync, readFileAsync };","map":{"version":3,"names":["readFileAsync","promisify","readFile","readDirAsync","readdir","INTEGRATION_NAME","_nodeContextIntegration","options","cachedContext","_options","app","os","device","culture","cloudResource","addContext","event","undefined","_getContexts","updatedContext","_updateContext","contexts","_optionalChain","_","_2","_3","_4","_5","_6","_7","_8","cloud_resource","_9","_10","getOsContext","getAppContext","getDeviceContext","getCultureContext","getCloudResourceContext","name","setupOnce","processEvent","nodeContextIntegration","defineIntegration","Context","convertIntegrationFnToClass","_11","_12","app_memory","process","memoryUsage","rss","_13","_14","free_memory","freemem","platformId","platform","getDarwinInfo","getLinuxInfo","PLATFORM_NAMES","version","release","versions","icu","january","Date","spanish","Intl","DateTimeFormat","month","format","resolvedOptions","locale","timezone","timeZone","err","app_start_time","now","uptime","toISOString","deviceOpt","e","boot_time","arch","memory","memory_size","totalmem","cpu","cpuInfo","cpus","length","firstCpu","processor_count","cpu_description","model","processor_frequency","speed","aix","freebsd","openbsd","sunos","win32","LINUX_DISTROS","distros","LINUX_VERSIONS","alpine","content","matchFirst","centos","debian","fedora","mint","red","suse","ubuntu","regex","text","match","exec","darwinInfo","kernel_version","Number","split","output","Promise","resolve","reject","execFile","error","stdout","build","getLinuxDistroId","toLowerCase","linuxInfo","etcFiles","distroFile","find","file","includes","distroPath","join","contents","encoding","d","indexOf","id","env","VERCEL","VERCEL_REGION","AWS_REGION","AWS_EXECUTION_ENV","GCP_PROJECT","ALIYUN_REGION_ID","WEBSITE_SITE_NAME","REGION_NAME","IBM_CLOUD_REGION","TENCENTCLOUD_REGION","TENCENTCLOUD_APPID","TENCENTCLOUD_ZONE","NETLIFY","FLY_REGION","DYNO"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\integrations\\context.ts"],"sourcesContent":["/* eslint-disable max-lines */\nimport { execFile } from 'child_process';\nimport { readFile, readdir } from 'fs';\nimport * as os from 'os';\nimport { join } from 'path';\nimport { promisify } from 'util';\nimport { convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport type {\n  AppContext,\n  CloudResourceContext,\n  Contexts,\n  CultureContext,\n  DeviceContext,\n  Event,\n  Integration,\n  IntegrationClass,\n  IntegrationFn,\n  OsContext,\n} from '@sentry/types';\n\n// TODO: Required until we drop support for Node v8\nexport const readFileAsync = promisify(readFile);\nexport const readDirAsync = promisify(readdir);\n\nconst INTEGRATION_NAME = 'Context';\n\ninterface DeviceContextOptions {\n  cpu?: boolean;\n  memory?: boolean;\n}\n\ninterface ContextOptions {\n  app?: boolean;\n  os?: boolean;\n  device?: DeviceContextOptions | boolean;\n  culture?: boolean;\n  cloudResource?: boolean;\n}\n\nconst _nodeContextIntegration = ((options: ContextOptions = {}) => {\n  let cachedContext: Promise<Contexts> | undefined;\n\n  const _options = {\n    app: true,\n    os: true,\n    device: true,\n    culture: true,\n    cloudResource: true,\n    ...options,\n  };\n\n  /** Add contexts to the event. Caches the context so we only look it up once. */\n  async function addContext(event: Event): Promise<Event> {\n    if (cachedContext === undefined) {\n      cachedContext = _getContexts();\n    }\n\n    const updatedContext = _updateContext(await cachedContext);\n\n    event.contexts = {\n      ...event.contexts,\n      app: { ...updatedContext.app, ...event.contexts?.app },\n      os: { ...updatedContext.os, ...event.contexts?.os },\n      device: { ...updatedContext.device, ...event.contexts?.device },\n      culture: { ...updatedContext.culture, ...event.contexts?.culture },\n      cloud_resource: { ...updatedContext.cloud_resource, ...event.contexts?.cloud_resource },\n    };\n\n    return event;\n  }\n\n  /** Get the contexts from node. */\n  async function _getContexts(): Promise<Contexts> {\n    const contexts: Contexts = {};\n\n    if (_options.os) {\n      contexts.os = await getOsContext();\n    }\n\n    if (_options.app) {\n      contexts.app = getAppContext();\n    }\n\n    if (_options.device) {\n      contexts.device = getDeviceContext(_options.device);\n    }\n\n    if (_options.culture) {\n      const culture = getCultureContext();\n\n      if (culture) {\n        contexts.culture = culture;\n      }\n    }\n\n    if (_options.cloudResource) {\n      contexts.cloud_resource = getCloudResourceContext();\n    }\n\n    return contexts;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event) {\n      return addContext(event);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const nodeContextIntegration = defineIntegration(_nodeContextIntegration);\n\n/**\n * Add node modules / packages to the event.\n * @deprecated Use `nodeContextIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Context = convertIntegrationFnToClass(INTEGRATION_NAME, nodeContextIntegration) as IntegrationClass<\n  Integration & { processEvent: (event: Event) => Promise<Event> }\n> & {\n  new (options?: {\n    app?: boolean;\n    os?: boolean;\n    device?: { cpu?: boolean; memory?: boolean } | boolean;\n    culture?: boolean;\n    cloudResource?: boolean;\n  }): Integration;\n};\n\n// eslint-disable-next-line deprecation/deprecation\nexport type Context = typeof Context;\n\n/**\n * Updates the context with dynamic values that can change\n */\nfunction _updateContext(contexts: Contexts): Contexts {\n  // Only update properties if they exist\n  if (contexts?.app?.app_memory) {\n    contexts.app.app_memory = process.memoryUsage().rss;\n  }\n\n  if (contexts?.device?.free_memory) {\n    contexts.device.free_memory = os.freemem();\n  }\n\n  return contexts;\n}\n\n/**\n * Returns the operating system context.\n *\n * Based on the current platform, this uses a different strategy to provide the\n * most accurate OS information. Since this might involve spawning subprocesses\n * or accessing the file system, this should only be executed lazily and cached.\n *\n *  - On macOS (Darwin), this will execute the `sw_vers` utility. The context\n *    has a `name`, `version`, `build` and `kernel_version` set.\n *  - On Linux, this will try to load a distribution release from `/etc` and set\n *    the `name`, `version` and `kernel_version` fields.\n *  - On all other platforms, only a `name` and `version` will be returned. Note\n *    that `version` might actually be the kernel version.\n */\nasync function getOsContext(): Promise<OsContext> {\n  const platformId = os.platform();\n  switch (platformId) {\n    case 'darwin':\n      return getDarwinInfo();\n    case 'linux':\n      return getLinuxInfo();\n    default:\n      return {\n        name: PLATFORM_NAMES[platformId] || platformId,\n        version: os.release(),\n      };\n  }\n}\n\nfunction getCultureContext(): CultureContext | undefined {\n  try {\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    if (typeof (process.versions as unknown as any).icu !== 'string') {\n      // Node was built without ICU support\n      return;\n    }\n\n    // Check that node was built with full Intl support. Its possible it was built without support for non-English\n    // locales which will make resolvedOptions inaccurate\n    //\n    // https://nodejs.org/api/intl.html#detecting-internationalization-support\n    const january = new Date(9e8);\n    const spanish = new Intl.DateTimeFormat('es', { month: 'long' });\n    if (spanish.format(january) === 'enero') {\n      const options = Intl.DateTimeFormat().resolvedOptions();\n\n      return {\n        locale: options.locale,\n        timezone: options.timeZone,\n      };\n    }\n  } catch (err) {\n    //\n  }\n\n  return;\n}\n\nfunction getAppContext(): AppContext {\n  const app_memory = process.memoryUsage().rss;\n  const app_start_time = new Date(Date.now() - process.uptime() * 1000).toISOString();\n\n  return { app_start_time, app_memory };\n}\n\n/**\n * Gets device information from os\n */\nexport function getDeviceContext(deviceOpt: DeviceContextOptions | true): DeviceContext {\n  const device: DeviceContext = {};\n\n  // Sometimes os.uptime() throws due to lacking permissions: https://github.com/getsentry/sentry-javascript/issues/8202\n  let uptime;\n  try {\n    uptime = os.uptime && os.uptime();\n  } catch (e) {\n    // noop\n  }\n\n  // os.uptime or its return value seem to be undefined in certain environments (e.g. Azure functions).\n  // Hence, we only set boot time, if we get a valid uptime value.\n  // @see https://github.com/getsentry/sentry-javascript/issues/5856\n  if (typeof uptime === 'number') {\n    device.boot_time = new Date(Date.now() - uptime * 1000).toISOString();\n  }\n\n  device.arch = os.arch();\n\n  if (deviceOpt === true || deviceOpt.memory) {\n    device.memory_size = os.totalmem();\n    device.free_memory = os.freemem();\n  }\n\n  if (deviceOpt === true || deviceOpt.cpu) {\n    const cpuInfo: os.CpuInfo[] | undefined = os.cpus();\n    if (cpuInfo && cpuInfo.length) {\n      const firstCpu = cpuInfo[0];\n\n      device.processor_count = cpuInfo.length;\n      device.cpu_description = firstCpu.model;\n      device.processor_frequency = firstCpu.speed;\n    }\n  }\n\n  return device;\n}\n\n/** Mapping of Node's platform names to actual OS names. */\nconst PLATFORM_NAMES: { [platform: string]: string } = {\n  aix: 'IBM AIX',\n  freebsd: 'FreeBSD',\n  openbsd: 'OpenBSD',\n  sunos: 'SunOS',\n  win32: 'Windows',\n};\n\n/** Linux version file to check for a distribution. */\ninterface DistroFile {\n  /** The file name, located in `/etc`. */\n  name: string;\n  /** Potential distributions to check. */\n  distros: string[];\n}\n\n/** Mapping of linux release files located in /etc to distributions. */\nconst LINUX_DISTROS: DistroFile[] = [\n  { name: 'fedora-release', distros: ['Fedora'] },\n  { name: 'redhat-release', distros: ['Red Hat Linux', 'Centos'] },\n  { name: 'redhat_version', distros: ['Red Hat Linux'] },\n  { name: 'SuSE-release', distros: ['SUSE Linux'] },\n  { name: 'lsb-release', distros: ['Ubuntu Linux', 'Arch Linux'] },\n  { name: 'debian_version', distros: ['Debian'] },\n  { name: 'debian_release', distros: ['Debian'] },\n  { name: 'arch-release', distros: ['Arch Linux'] },\n  { name: 'gentoo-release', distros: ['Gentoo Linux'] },\n  { name: 'novell-release', distros: ['SUSE Linux'] },\n  { name: 'alpine-release', distros: ['Alpine Linux'] },\n];\n\n/** Functions to extract the OS version from Linux release files. */\nconst LINUX_VERSIONS: {\n  [identifier: string]: (content: string) => string | undefined;\n} = {\n  alpine: content => content,\n  arch: content => matchFirst(/distrib_release=(.*)/, content),\n  centos: content => matchFirst(/release ([^ ]+)/, content),\n  debian: content => content,\n  fedora: content => matchFirst(/release (..)/, content),\n  mint: content => matchFirst(/distrib_release=(.*)/, content),\n  red: content => matchFirst(/release ([^ ]+)/, content),\n  suse: content => matchFirst(/VERSION = (.*)\\n/, content),\n  ubuntu: content => matchFirst(/distrib_release=(.*)/, content),\n};\n\n/**\n * Executes a regular expression with one capture group.\n *\n * @param regex A regular expression to execute.\n * @param text Content to execute the RegEx on.\n * @returns The captured string if matched; otherwise undefined.\n */\nfunction matchFirst(regex: RegExp, text: string): string | undefined {\n  const match = regex.exec(text);\n  return match ? match[1] : undefined;\n}\n\n/** Loads the macOS operating system context. */\nasync function getDarwinInfo(): Promise<OsContext> {\n  // Default values that will be used in case no operating system information\n  // can be loaded. The default version is computed via heuristics from the\n  // kernel version, but the build ID is missing.\n  const darwinInfo: OsContext = {\n    kernel_version: os.release(),\n    name: 'Mac OS X',\n    version: `10.${Number(os.release().split('.')[0]) - 4}`,\n  };\n\n  try {\n    // We try to load the actual macOS version by executing the `sw_vers` tool.\n    // This tool should be available on every standard macOS installation. In\n    // case this fails, we stick with the values computed above.\n\n    const output = await new Promise<string>((resolve, reject) => {\n      execFile('/usr/bin/sw_vers', (error: Error | null, stdout: string) => {\n        if (error) {\n          reject(error);\n          return;\n        }\n        resolve(stdout);\n      });\n    });\n\n    darwinInfo.name = matchFirst(/^ProductName:\\s+(.*)$/m, output);\n    darwinInfo.version = matchFirst(/^ProductVersion:\\s+(.*)$/m, output);\n    darwinInfo.build = matchFirst(/^BuildVersion:\\s+(.*)$/m, output);\n  } catch (e) {\n    // ignore\n  }\n\n  return darwinInfo;\n}\n\n/** Returns a distribution identifier to look up version callbacks. */\nfunction getLinuxDistroId(name: string): string {\n  return name.split(' ')[0].toLowerCase();\n}\n\n/** Loads the Linux operating system context. */\nasync function getLinuxInfo(): Promise<OsContext> {\n  // By default, we cannot assume anything about the distribution or Linux\n  // version. `os.release()` returns the kernel version and we assume a generic\n  // \"Linux\" name, which will be replaced down below.\n  const linuxInfo: OsContext = {\n    kernel_version: os.release(),\n    name: 'Linux',\n  };\n\n  try {\n    // We start guessing the distribution by listing files in the /etc\n    // directory. This is were most Linux distributions (except Knoppix) store\n    // release files with certain distribution-dependent meta data. We search\n    // for exactly one known file defined in `LINUX_DISTROS` and exit if none\n    // are found. In case there are more than one file, we just stick with the\n    // first one.\n    const etcFiles = await readDirAsync('/etc');\n    const distroFile = LINUX_DISTROS.find(file => etcFiles.includes(file.name));\n    if (!distroFile) {\n      return linuxInfo;\n    }\n\n    // Once that file is known, load its contents. To make searching in those\n    // files easier, we lowercase the file contents. Since these files are\n    // usually quite small, this should not allocate too much memory and we only\n    // hold on to it for a very short amount of time.\n    const distroPath = join('/etc', distroFile.name);\n    const contents = ((await readFileAsync(distroPath, { encoding: 'utf-8' })) as string).toLowerCase();\n\n    // Some Linux distributions store their release information in the same file\n    // (e.g. RHEL and Centos). In those cases, we scan the file for an\n    // identifier, that basically consists of the first word of the linux\n    // distribution name (e.g. \"red\" for Red Hat). In case there is no match, we\n    // just assume the first distribution in our list.\n    const { distros } = distroFile;\n    linuxInfo.name = distros.find(d => contents.indexOf(getLinuxDistroId(d)) >= 0) || distros[0];\n\n    // Based on the found distribution, we can now compute the actual version\n    // number. This is different for every distribution, so several strategies\n    // are computed in `LINUX_VERSIONS`.\n    const id = getLinuxDistroId(linuxInfo.name);\n    linuxInfo.version = LINUX_VERSIONS[id](contents);\n  } catch (e) {\n    // ignore\n  }\n\n  return linuxInfo;\n}\n\n/**\n * Grabs some information about hosting provider based on best effort.\n */\nfunction getCloudResourceContext(): CloudResourceContext | undefined {\n  if (process.env.VERCEL) {\n    // https://vercel.com/docs/concepts/projects/environment-variables/system-environment-variables#system-environment-variables\n    return {\n      'cloud.provider': 'vercel',\n      'cloud.region': process.env.VERCEL_REGION,\n    };\n  } else if (process.env.AWS_REGION) {\n    // https://docs.aws.amazon.com/lambda/latest/dg/configuration-envvars.html\n    return {\n      'cloud.provider': 'aws',\n      'cloud.region': process.env.AWS_REGION,\n      'cloud.platform': process.env.AWS_EXECUTION_ENV,\n    };\n  } else if (process.env.GCP_PROJECT) {\n    // https://cloud.google.com/composer/docs/how-to/managing/environment-variables#reserved_variables\n    return {\n      'cloud.provider': 'gcp',\n    };\n  } else if (process.env.ALIYUN_REGION_ID) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'alibaba_cloud',\n      'cloud.region': process.env.ALIYUN_REGION_ID,\n    };\n  } else if (process.env.WEBSITE_SITE_NAME && process.env.REGION_NAME) {\n    // https://learn.microsoft.com/en-us/azure/app-service/reference-app-settings?tabs=kudu%2Cdotnet#app-environment\n    return {\n      'cloud.provider': 'azure',\n      'cloud.region': process.env.REGION_NAME,\n    };\n  } else if (process.env.IBM_CLOUD_REGION) {\n    // TODO: find where I found these environment variables - at least gc.github.com returns something\n    return {\n      'cloud.provider': 'ibm_cloud',\n      'cloud.region': process.env.IBM_CLOUD_REGION,\n    };\n  } else if (process.env.TENCENTCLOUD_REGION) {\n    // https://www.tencentcloud.com/document/product/583/32748\n    return {\n      'cloud.provider': 'tencent_cloud',\n      'cloud.region': process.env.TENCENTCLOUD_REGION,\n      'cloud.account.id': process.env.TENCENTCLOUD_APPID,\n      'cloud.availability_zone': process.env.TENCENTCLOUD_ZONE,\n    };\n  } else if (process.env.NETLIFY) {\n    // https://docs.netlify.com/configure-builds/environment-variables/#read-only-variables\n    return {\n      'cloud.provider': 'netlify',\n    };\n  } else if (process.env.FLY_REGION) {\n    // https://fly.io/docs/reference/runtime-environment/\n    return {\n      'cloud.provider': 'fly.io',\n      'cloud.region': process.env.FLY_REGION,\n    };\n  } else if (process.env.DYNO) {\n    // https://devcenter.heroku.com/articles/dynos#local-environment-variables\n    return {\n      'cloud.provider': 'heroku',\n    };\n  } else {\n    return undefined;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}