{"ast":null,"code":"import { _optionalChain } from '@sentry/utils';\nimport { defineIntegration, hasTracingEnabled, getClient, isSentryRequestUrl, getCurrentScope, getIsolationScope, getActiveSpan, spanToTraceHeader, getDynamicSamplingContextFromSpan, getDynamicSamplingContextFromClient, setHttpStatus, addBreadcrumb } from '@sentry/core';\nimport { LRUMap, generateSentryTraceHeader, dynamicSamplingContextToSentryBaggageHeader, parseUrl, stringMatchesSomePattern, getSanitizedUrlString } from '@sentry/utils';\nimport { NODE_VERSION } from '../../nodeVersion.js';\nvar ChannelName;\n(function (ChannelName) {\n  // https://github.com/nodejs/undici/blob/e6fc80f809d1217814c044f52ed40ef13f21e43c/docs/api/DiagnosticsChannel.md#undicirequestcreate\n  const RequestCreate = 'undici:request:create';\n  ChannelName[\"RequestCreate\"] = RequestCreate;\n  const RequestEnd = 'undici:request:headers';\n  ChannelName[\"RequestEnd\"] = RequestEnd;\n  const RequestError = 'undici:request:error';\n  ChannelName[\"RequestError\"] = RequestError;\n})(ChannelName || (ChannelName = {}));\n\n// Please note that you cannot use `console.log` to debug the callbacks registered to the `diagnostics_channel` API.\n// To debug, you can use `writeFileSync` to write to a file:\n// https://nodejs.org/api/async_hooks.html#printing-in-asynchook-callbacks\n//\n// import { writeFileSync } from 'fs';\n// import { format } from 'util';\n//\n// function debug(...args: any): void {\n//   // Use a function like this one when debugging inside an AsyncHook callback\n//   // @ts-expect-error any\n//   writeFileSync('log.out', `${format(...args)}\\n`, { flag: 'a' });\n// }\n\nconst _nativeNodeFetchintegration = options => {\n  // eslint-disable-next-line deprecation/deprecation\n  return new Undici(options);\n};\nconst nativeNodeFetchintegration = defineIntegration(_nativeNodeFetchintegration);\n\n/**\n * Instruments outgoing HTTP requests made with the `undici` package via\n * Node's `diagnostics_channel` API.\n *\n * Supports Undici 4.7.0 or higher.\n *\n * Requires Node 16.17.0 or higher.\n *\n * @deprecated Use `nativeNodeFetchintegration()` instead.\n */\nclass Undici {\n  /**\n   * @inheritDoc\n   */\n  static __initStatic() {\n    this.id = 'Undici';\n  }\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  __init() {\n    this.name = Undici.id;\n  }\n  __init2() {\n    this._createSpanUrlMap = new LRUMap(100);\n  }\n  __init3() {\n    this._headersUrlMap = new LRUMap(100);\n  }\n  constructor(_options = {}) {\n    Undici.prototype.__init.call(this);\n    Undici.prototype.__init2.call(this);\n    Undici.prototype.__init3.call(this);\n    Undici.prototype.__init4.call(this);\n    Undici.prototype.__init5.call(this);\n    Undici.prototype.__init6.call(this);\n    this._options = {\n      breadcrumbs: _options.breadcrumbs === undefined ? true : _options.breadcrumbs,\n      tracing: _options.tracing,\n      shouldCreateSpanForRequest: _options.shouldCreateSpanForRequest\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  setupOnce(_addGlobalEventProcessor) {\n    // Requires Node 16+ to use the diagnostics_channel API.\n    if (NODE_VERSION.major < 16) {\n      return;\n    }\n    let ds;\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      ds = require('diagnostics_channel');\n    } catch (e) {\n      // no-op\n    }\n    if (!ds || !ds.subscribe) {\n      return;\n    }\n\n    // https://github.com/nodejs/undici/blob/e6fc80f809d1217814c044f52ed40ef13f21e43c/docs/api/DiagnosticsChannel.md\n    ds.subscribe(ChannelName.RequestCreate, this._onRequestCreate);\n    ds.subscribe(ChannelName.RequestEnd, this._onRequestEnd);\n    ds.subscribe(ChannelName.RequestError, this._onRequestError);\n  }\n\n  /** Helper that wraps shouldCreateSpanForRequest option */\n  _shouldCreateSpan(url) {\n    if (this._options.tracing === false || this._options.tracing === undefined && !hasTracingEnabled()) {\n      return false;\n    }\n    if (this._options.shouldCreateSpanForRequest === undefined) {\n      return true;\n    }\n    const cachedDecision = this._createSpanUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n    const decision = this._options.shouldCreateSpanForRequest(url);\n    this._createSpanUrlMap.set(url, decision);\n    return decision;\n  }\n  __init4() {\n    this._onRequestCreate = message => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (!_optionalChain([getClient, 'call', _10 => _10(), 'optionalAccess', _11 => _11.getIntegration, 'call', _12 => _12(Undici)])) {\n        return;\n      }\n      const {\n        request\n      } = message;\n      const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n      const client = getClient();\n      if (!client) {\n        return;\n      }\n      if (isSentryRequestUrl(stringUrl, client) || request.__sentry_span__ !== undefined) {\n        return;\n      }\n      const clientOptions = client.getOptions();\n      const scope = getCurrentScope();\n      const isolationScope = getIsolationScope();\n      const parentSpan = getActiveSpan();\n      const span = this._shouldCreateSpan(stringUrl) ? createRequestSpan(parentSpan, request, stringUrl) : undefined;\n      if (span) {\n        request.__sentry_span__ = span;\n      }\n      const shouldAttachTraceData = url => {\n        if (clientOptions.tracePropagationTargets === undefined) {\n          return true;\n        }\n        const cachedDecision = this._headersUrlMap.get(url);\n        if (cachedDecision !== undefined) {\n          return cachedDecision;\n        }\n        const decision = stringMatchesSomePattern(url, clientOptions.tracePropagationTargets);\n        this._headersUrlMap.set(url, decision);\n        return decision;\n      };\n      if (shouldAttachTraceData(stringUrl)) {\n        const {\n          traceId,\n          spanId,\n          sampled,\n          dsc\n        } = {\n          ...isolationScope.getPropagationContext(),\n          ...scope.getPropagationContext()\n        };\n        const sentryTraceHeader = span ? spanToTraceHeader(span) : generateSentryTraceHeader(traceId, spanId, sampled);\n        const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(dsc || (span ? getDynamicSamplingContextFromSpan(span) : getDynamicSamplingContextFromClient(traceId, client, scope)));\n        setHeadersOnRequest(request, sentryTraceHeader, sentryBaggageHeader);\n      }\n    };\n  }\n  __init5() {\n    this._onRequestEnd = message => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (!_optionalChain([getClient, 'call', _13 => _13(), 'optionalAccess', _14 => _14.getIntegration, 'call', _15 => _15(Undici)])) {\n        return;\n      }\n      const {\n        request,\n        response\n      } = message;\n      const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n      if (isSentryRequestUrl(stringUrl, getClient())) {\n        return;\n      }\n      const span = request.__sentry_span__;\n      if (span) {\n        setHttpStatus(span, response.statusCode);\n        span.end();\n      }\n      if (this._options.breadcrumbs) {\n        addBreadcrumb({\n          category: 'http',\n          data: {\n            method: request.method,\n            status_code: response.statusCode,\n            url: stringUrl\n          },\n          type: 'http'\n        }, {\n          event: 'response',\n          request,\n          response\n        });\n      }\n    };\n  }\n  __init6() {\n    this._onRequestError = message => {\n      // eslint-disable-next-line deprecation/deprecation\n      if (!_optionalChain([getClient, 'call', _16 => _16(), 'optionalAccess', _17 => _17.getIntegration, 'call', _18 => _18(Undici)])) {\n        return;\n      }\n      const {\n        request\n      } = message;\n      const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n      if (isSentryRequestUrl(stringUrl, getClient())) {\n        return;\n      }\n      const span = request.__sentry_span__;\n      if (span) {\n        span.setStatus('internal_error');\n        span.end();\n      }\n      if (this._options.breadcrumbs) {\n        addBreadcrumb({\n          category: 'http',\n          data: {\n            method: request.method,\n            url: stringUrl\n          },\n          level: 'error',\n          type: 'http'\n        }, {\n          event: 'error',\n          request\n        });\n      }\n    };\n  }\n}\nUndici.__initStatic();\nfunction setHeadersOnRequest(request, sentryTrace, sentryBaggageHeader) {\n  let hasSentryHeaders;\n  if (Array.isArray(request.headers)) {\n    hasSentryHeaders = request.headers.some(headerLine => headerLine === 'sentry-trace');\n  } else {\n    const headerLines = request.headers.split('\\r\\n');\n    hasSentryHeaders = headerLines.some(headerLine => headerLine.startsWith('sentry-trace:'));\n  }\n  if (hasSentryHeaders) {\n    return;\n  }\n  request.addHeader('sentry-trace', sentryTrace);\n  if (sentryBaggageHeader) {\n    request.addHeader('baggage', sentryBaggageHeader);\n  }\n}\nfunction createRequestSpan(activeSpan, request, stringUrl) {\n  const url = parseUrl(stringUrl);\n  const method = request.method || 'GET';\n  const data = {\n    'http.method': method\n  };\n  if (url.search) {\n    data['http.query'] = url.search;\n  }\n  if (url.hash) {\n    data['http.fragment'] = url.hash;\n  }\n  // eslint-disable-next-line deprecation/deprecation\n  return _optionalChain([activeSpan, 'optionalAccess', _19 => _19.startChild, 'call', _20 => _20({\n    op: 'http.client',\n    origin: 'auto.http.node.undici',\n    description: `${method} ${getSanitizedUrlString(url)}`,\n    data\n  })]);\n}\nexport { ChannelName, Undici, nativeNodeFetchintegration };","map":{"version":3,"names":["ChannelName","RequestCreate","RequestEnd","RequestError","_nativeNodeFetchintegration","options","Undici","nativeNodeFetchintegration","defineIntegration","__initStatic","id","name","_createSpanUrlMap","LRUMap","_headersUrlMap","constructor","_options","prototype","__init","call","__init2","__init3","__init4","__init5","__init6","breadcrumbs","undefined","tracing","shouldCreateSpanForRequest","setupOnce","_addGlobalEventProcessor","NODE_VERSION","major","ds","require","e","subscribe","_onRequestCreate","_onRequestEnd","_onRequestError","_shouldCreateSpan","url","hasTracingEnabled","cachedDecision","get","decision","set","message","_optionalChain","getClient","_10","_11","getIntegration","_12","request","stringUrl","origin","toString","path","client","isSentryRequestUrl","__sentry_span__","clientOptions","getOptions","scope","getCurrentScope","isolationScope","getIsolationScope","parentSpan","getActiveSpan","span","createRequestSpan","shouldAttachTraceData","tracePropagationTargets","stringMatchesSomePattern","traceId","spanId","sampled","dsc","getPropagationContext","sentryTraceHeader","spanToTraceHeader","generateSentryTraceHeader","sentryBaggageHeader","dynamicSamplingContextToSentryBaggageHeader","getDynamicSamplingContextFromSpan","getDynamicSamplingContextFromClient","setHeadersOnRequest","_13","_14","_15","response","setHttpStatus","statusCode","end","addBreadcrumb","category","data","method","status_code","type","event","_16","_17","_18","setStatus","level","sentryTrace","hasSentryHeaders","Array","isArray","headers","some","headerLine","headerLines","split","startsWith","addHeader","activeSpan","parseUrl","search","hash","_19","startChild","_20","op","description","getSanitizedUrlString"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\integrations\\undici\\index.ts"],"sourcesContent":["import {\n  addBreadcrumb,\n  defineIntegration,\n  getActiveSpan,\n  getClient,\n  getCurrentScope,\n  getDynamicSamplingContextFromClient,\n  getDynamicSamplingContextFromSpan,\n  getIsolationScope,\n  hasTracingEnabled,\n  isSentryRequestUrl,\n  setHttpStatus,\n  spanToTraceHeader,\n} from '@sentry/core';\nimport type { EventProcessor, Integration, IntegrationFn, IntegrationFnResult, Span } from '@sentry/types';\nimport {\n  LRUMap,\n  dynamicSamplingContextToSentryBaggageHeader,\n  generateSentryTraceHeader,\n  getSanitizedUrlString,\n  parseUrl,\n  stringMatchesSomePattern,\n} from '@sentry/utils';\n\nimport type { NodeClient } from '../../client';\nimport { NODE_VERSION } from '../../nodeVersion';\nimport type {\n  DiagnosticsChannel,\n  RequestCreateMessage,\n  RequestEndMessage,\n  RequestErrorMessage,\n  RequestWithSentry,\n} from './types';\n\nexport enum ChannelName {\n  // https://github.com/nodejs/undici/blob/e6fc80f809d1217814c044f52ed40ef13f21e43c/docs/api/DiagnosticsChannel.md#undicirequestcreate\n  RequestCreate = 'undici:request:create',\n  RequestEnd = 'undici:request:headers',\n  RequestError = 'undici:request:error',\n}\n\nexport interface UndiciOptions {\n  /**\n   * Whether breadcrumbs should be recorded for requests\n   * Defaults to true\n   */\n  breadcrumbs: boolean;\n\n  /**\n   * Whether tracing spans should be created for requests\n   * If not set, this will be enabled/disabled based on if tracing is enabled.\n   */\n  tracing?: boolean;\n\n  /**\n   * Function determining whether or not to create spans to track outgoing requests to the given URL.\n   * By default, spans will be created for all outgoing requests.\n   */\n  shouldCreateSpanForRequest?: (url: string) => boolean;\n}\n\n// Please note that you cannot use `console.log` to debug the callbacks registered to the `diagnostics_channel` API.\n// To debug, you can use `writeFileSync` to write to a file:\n// https://nodejs.org/api/async_hooks.html#printing-in-asynchook-callbacks\n//\n// import { writeFileSync } from 'fs';\n// import { format } from 'util';\n//\n// function debug(...args: any): void {\n//   // Use a function like this one when debugging inside an AsyncHook callback\n//   // @ts-expect-error any\n//   writeFileSync('log.out', `${format(...args)}\\n`, { flag: 'a' });\n// }\n\nconst _nativeNodeFetchintegration = ((options?: Partial<UndiciOptions>) => {\n  // eslint-disable-next-line deprecation/deprecation\n  return new Undici(options) as unknown as IntegrationFnResult;\n}) satisfies IntegrationFn;\n\nexport const nativeNodeFetchintegration = defineIntegration(_nativeNodeFetchintegration);\n\n/**\n * Instruments outgoing HTTP requests made with the `undici` package via\n * Node's `diagnostics_channel` API.\n *\n * Supports Undici 4.7.0 or higher.\n *\n * Requires Node 16.17.0 or higher.\n *\n * @deprecated Use `nativeNodeFetchintegration()` instead.\n */\nexport class Undici implements Integration {\n  /**\n   * @inheritDoc\n   */\n  public static id: string = 'Undici';\n\n  /**\n   * @inheritDoc\n   */\n  // eslint-disable-next-line deprecation/deprecation\n  public name: string = Undici.id;\n\n  private readonly _options: UndiciOptions;\n\n  private readonly _createSpanUrlMap: LRUMap<string, boolean> = new LRUMap(100);\n  private readonly _headersUrlMap: LRUMap<string, boolean> = new LRUMap(100);\n\n  public constructor(_options: Partial<UndiciOptions> = {}) {\n    this._options = {\n      breadcrumbs: _options.breadcrumbs === undefined ? true : _options.breadcrumbs,\n      tracing: _options.tracing,\n      shouldCreateSpanForRequest: _options.shouldCreateSpanForRequest,\n    };\n  }\n\n  /**\n   * @inheritDoc\n   */\n  public setupOnce(_addGlobalEventProcessor: (callback: EventProcessor) => void): void {\n    // Requires Node 16+ to use the diagnostics_channel API.\n    if (NODE_VERSION.major < 16) {\n      return;\n    }\n\n    let ds: DiagnosticsChannel | undefined;\n    try {\n      // eslint-disable-next-line @typescript-eslint/no-var-requires\n      ds = require('diagnostics_channel') as DiagnosticsChannel;\n    } catch (e) {\n      // no-op\n    }\n\n    if (!ds || !ds.subscribe) {\n      return;\n    }\n\n    // https://github.com/nodejs/undici/blob/e6fc80f809d1217814c044f52ed40ef13f21e43c/docs/api/DiagnosticsChannel.md\n    ds.subscribe(ChannelName.RequestCreate, this._onRequestCreate);\n    ds.subscribe(ChannelName.RequestEnd, this._onRequestEnd);\n    ds.subscribe(ChannelName.RequestError, this._onRequestError);\n  }\n\n  /** Helper that wraps shouldCreateSpanForRequest option */\n  private _shouldCreateSpan(url: string): boolean {\n    if (this._options.tracing === false || (this._options.tracing === undefined && !hasTracingEnabled())) {\n      return false;\n    }\n\n    if (this._options.shouldCreateSpanForRequest === undefined) {\n      return true;\n    }\n\n    const cachedDecision = this._createSpanUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = this._options.shouldCreateSpanForRequest(url);\n    this._createSpanUrlMap.set(url, decision);\n    return decision;\n  }\n\n  private _onRequestCreate = (message: unknown): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!getClient()?.getIntegration(Undici)) {\n      return;\n    }\n\n    const { request } = message as RequestCreateMessage;\n\n    const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n\n    const client = getClient<NodeClient>();\n    if (!client) {\n      return;\n    }\n\n    if (isSentryRequestUrl(stringUrl, client) || request.__sentry_span__ !== undefined) {\n      return;\n    }\n\n    const clientOptions = client.getOptions();\n    const scope = getCurrentScope();\n    const isolationScope = getIsolationScope();\n    const parentSpan = getActiveSpan();\n\n    const span = this._shouldCreateSpan(stringUrl) ? createRequestSpan(parentSpan, request, stringUrl) : undefined;\n    if (span) {\n      request.__sentry_span__ = span;\n    }\n\n    const shouldAttachTraceData = (url: string): boolean => {\n      if (clientOptions.tracePropagationTargets === undefined) {\n        return true;\n      }\n\n      const cachedDecision = this._headersUrlMap.get(url);\n      if (cachedDecision !== undefined) {\n        return cachedDecision;\n      }\n\n      const decision = stringMatchesSomePattern(url, clientOptions.tracePropagationTargets);\n      this._headersUrlMap.set(url, decision);\n      return decision;\n    };\n\n    if (shouldAttachTraceData(stringUrl)) {\n      const { traceId, spanId, sampled, dsc } = {\n        ...isolationScope.getPropagationContext(),\n        ...scope.getPropagationContext(),\n      };\n\n      const sentryTraceHeader = span ? spanToTraceHeader(span) : generateSentryTraceHeader(traceId, spanId, sampled);\n\n      const sentryBaggageHeader = dynamicSamplingContextToSentryBaggageHeader(\n        dsc ||\n          (span\n            ? getDynamicSamplingContextFromSpan(span)\n            : getDynamicSamplingContextFromClient(traceId, client, scope)),\n      );\n\n      setHeadersOnRequest(request, sentryTraceHeader, sentryBaggageHeader);\n    }\n  };\n\n  private _onRequestEnd = (message: unknown): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!getClient()?.getIntegration(Undici)) {\n      return;\n    }\n\n    const { request, response } = message as RequestEndMessage;\n\n    const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n\n    if (isSentryRequestUrl(stringUrl, getClient())) {\n      return;\n    }\n\n    const span = request.__sentry_span__;\n    if (span) {\n      setHttpStatus(span, response.statusCode);\n      span.end();\n    }\n\n    if (this._options.breadcrumbs) {\n      addBreadcrumb(\n        {\n          category: 'http',\n          data: {\n            method: request.method,\n            status_code: response.statusCode,\n            url: stringUrl,\n          },\n          type: 'http',\n        },\n        {\n          event: 'response',\n          request,\n          response,\n        },\n      );\n    }\n  };\n\n  private _onRequestError = (message: unknown): void => {\n    // eslint-disable-next-line deprecation/deprecation\n    if (!getClient()?.getIntegration(Undici)) {\n      return;\n    }\n\n    const { request } = message as RequestErrorMessage;\n\n    const stringUrl = request.origin ? request.origin.toString() + request.path : request.path;\n\n    if (isSentryRequestUrl(stringUrl, getClient())) {\n      return;\n    }\n\n    const span = request.__sentry_span__;\n    if (span) {\n      span.setStatus('internal_error');\n      span.end();\n    }\n\n    if (this._options.breadcrumbs) {\n      addBreadcrumb(\n        {\n          category: 'http',\n          data: {\n            method: request.method,\n            url: stringUrl,\n          },\n          level: 'error',\n          type: 'http',\n        },\n        {\n          event: 'error',\n          request,\n        },\n      );\n    }\n  };\n}\n\nfunction setHeadersOnRequest(\n  request: RequestWithSentry,\n  sentryTrace: string,\n  sentryBaggageHeader: string | undefined,\n): void {\n  let hasSentryHeaders: boolean;\n  if (Array.isArray(request.headers)) {\n    hasSentryHeaders = request.headers.some(headerLine => headerLine === 'sentry-trace');\n  } else {\n    const headerLines = request.headers.split('\\r\\n');\n    hasSentryHeaders = headerLines.some(headerLine => headerLine.startsWith('sentry-trace:'));\n  }\n\n  if (hasSentryHeaders) {\n    return;\n  }\n\n  request.addHeader('sentry-trace', sentryTrace);\n  if (sentryBaggageHeader) {\n    request.addHeader('baggage', sentryBaggageHeader);\n  }\n}\n\nfunction createRequestSpan(\n  activeSpan: Span | undefined,\n  request: RequestWithSentry,\n  stringUrl: string,\n): Span | undefined {\n  const url = parseUrl(stringUrl);\n\n  const method = request.method || 'GET';\n  const data: Record<string, unknown> = {\n    'http.method': method,\n  };\n  if (url.search) {\n    data['http.query'] = url.search;\n  }\n  if (url.hash) {\n    data['http.fragment'] = url.hash;\n  }\n  // eslint-disable-next-line deprecation/deprecation\n  return activeSpan?.startChild({\n    op: 'http.client',\n    origin: 'auto.http.node.undici',\n    description: `${method} ${getSanitizedUrlString(url)}`,\n    data,\n  });\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}