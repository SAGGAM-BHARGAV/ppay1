{"ast":null,"code":"import { _optionalChain } from '@sentry/utils';\nimport * as domain from 'domain';\nimport { setAsyncContextStrategy, ensureHubOnCarrier, getHubFromCarrier, setHubOnCarrier } from '@sentry/core';\nfunction getActiveDomain() {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n  return domain.active;\n}\n\n// eslint-disable-next-line deprecation/deprecation\nfunction getCurrentHub() {\n  const activeDomain = getActiveDomain();\n\n  // If there's no active domain, just return undefined and the global hub will be used\n  if (!activeDomain) {\n    return undefined;\n  }\n  ensureHubOnCarrier(activeDomain);\n  return getHubFromCarrier(activeDomain);\n}\n\n// eslint-disable-next-line deprecation/deprecation\nfunction createNewHub(parent) {\n  const carrier = {};\n  ensureHubOnCarrier(carrier, parent);\n  return getHubFromCarrier(carrier);\n}\nfunction runWithAsyncContext(callback, options) {\n  const activeDomain = getActiveDomain();\n  if (activeDomain && _optionalChain([options, 'optionalAccess', _ => _.reuseExisting])) {\n    // We're already in a domain, so we don't need to create a new one, just call the callback with the current hub\n    return callback();\n  }\n  const local = domain.create();\n  const parentHub = activeDomain ? getHubFromCarrier(activeDomain) : undefined;\n  const newHub = createNewHub(parentHub);\n  setHubOnCarrier(local, newHub);\n  return local.bind(() => {\n    return callback();\n  })();\n}\n\n/**\n * Sets the async context strategy to use Node.js domains.\n */\nfunction setDomainAsyncContextStrategy() {\n  setAsyncContextStrategy({\n    getCurrentHub,\n    runWithAsyncContext\n  });\n}\nexport { setDomainAsyncContextStrategy };","map":{"version":3,"names":["getActiveDomain","domain","active","getCurrentHub","activeDomain","undefined","ensureHubOnCarrier","getHubFromCarrier","createNewHub","parent","carrier","runWithAsyncContext","callback","options","_optionalChain","_","reuseExisting","local","create","parentHub","newHub","setHubOnCarrier","bind","setDomainAsyncContextStrategy","setAsyncContextStrategy"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\async\\domain.ts"],"sourcesContent":["import * as domain from 'domain';\nimport type { Carrier, Hub, RunWithAsyncContextOptions } from '@sentry/core';\nimport { ensureHubOnCarrier, getHubFromCarrier, setAsyncContextStrategy, setHubOnCarrier } from '@sentry/core';\n\nfunction getActiveDomain<T>(): T | undefined {\n  // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n  return (domain as any).active as T | undefined;\n}\n\n// eslint-disable-next-line deprecation/deprecation\nfunction getCurrentHub(): Hub | undefined {\n  const activeDomain = getActiveDomain<Carrier>();\n\n  // If there's no active domain, just return undefined and the global hub will be used\n  if (!activeDomain) {\n    return undefined;\n  }\n\n  ensureHubOnCarrier(activeDomain);\n\n  return getHubFromCarrier(activeDomain);\n}\n\n// eslint-disable-next-line deprecation/deprecation\nfunction createNewHub(parent: Hub | undefined): Hub {\n  const carrier: Carrier = {};\n  ensureHubOnCarrier(carrier, parent);\n  return getHubFromCarrier(carrier);\n}\n\nfunction runWithAsyncContext<T>(callback: () => T, options: RunWithAsyncContextOptions): T {\n  const activeDomain = getActiveDomain<domain.Domain & Carrier>();\n\n  if (activeDomain && options?.reuseExisting) {\n    // We're already in a domain, so we don't need to create a new one, just call the callback with the current hub\n    return callback();\n  }\n\n  const local = domain.create() as domain.Domain & Carrier;\n\n  const parentHub = activeDomain ? getHubFromCarrier(activeDomain) : undefined;\n  const newHub = createNewHub(parentHub);\n  setHubOnCarrier(local, newHub);\n\n  return local.bind(() => {\n    return callback();\n  })();\n}\n\n/**\n * Sets the async context strategy to use Node.js domains.\n */\nexport function setDomainAsyncContextStrategy(): void {\n  setAsyncContextStrategy({ getCurrentHub, runWithAsyncContext });\n}\n"],"mappings":";;;AAIA,SAASA,eAAeA,CAAA,EAAqB;EAC7C;EACE,OAAQC,MAAO,CAAQC,MAAA;AACzB;;AAEA;AACA,SAASC,aAAaA,CAAA,EAAoB;EACxC,MAAMC,YAAA,GAAeJ,eAAe,EAAW;;EAEjD;EACE,IAAI,CAACI,YAAY,EAAE;IACjB,OAAOC,SAAS;EAClB;EAEAC,kBAAkB,CAACF,YAAY,CAAC;EAEhC,OAAOG,iBAAiB,CAACH,YAAY,CAAC;AACxC;;AAEA;AACA,SAASI,YAAYA,CAACC,MAAM,EAAwB;EAClD,MAAMC,OAAA,GAAmB,EAAE;EAC3BJ,kBAAkB,CAACI,OAAO,EAAED,MAAM,CAAC;EACnC,OAAOF,iBAAiB,CAACG,OAAO,CAAC;AACnC;AAEA,SAASC,mBAAmBA,CAAIC,QAAQ,EAAWC,OAAO,EAAiC;EACzF,MAAMT,YAAA,GAAeJ,eAAe,EAA2B;EAE/D,IAAII,YAAA,IAAAU,cAAA,EAAgBD,OAAO,oBAAAE,CAAA,IAAAA,CAAA,CAAEC,aAAA,EAAa,EAAE;IAC9C;IACI,OAAOJ,QAAQ,EAAE;EACnB;EAEA,MAAMK,KAAM,GAAEhB,MAAM,CAACiB,MAAM;EAE3B,MAAMC,SAAU,GAAEf,YAAa,GAAEG,iBAAiB,CAACH,YAAY,IAAIC,SAAS;EAC5E,MAAMe,MAAO,GAAEZ,YAAY,CAACW,SAAS,CAAC;EACtCE,eAAe,CAACJ,KAAK,EAAEG,MAAM,CAAC;EAE9B,OAAOH,KAAK,CAACK,IAAI,CAAC,MAAM;IACtB,OAAOV,QAAQ,EAAE;EAClB,EAAC,EAAE;AACN;;AAEA;;;AAGO,SAASW,6BAA6BA,CAAA,EAAS;EACpDC,uBAAuB,CAAC;IAAErB,aAAa;IAAEQ;EAAA,CAAqB,CAAC;AACjE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}