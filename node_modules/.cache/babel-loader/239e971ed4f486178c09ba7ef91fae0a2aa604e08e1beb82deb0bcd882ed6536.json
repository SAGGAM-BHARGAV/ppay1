{"ast":null,"code":"import { existsSync, readFileSync } from 'fs';\nimport { dirname, join } from 'path';\nimport { defineIntegration, convertIntegrationFnToClass } from '@sentry/core';\nlet moduleCache;\nconst INTEGRATION_NAME = 'Modules';\n\n/** Extract information about paths */\nfunction getPaths() {\n  try {\n    return require.cache ? Object.keys(require.cache) : [];\n  } catch (e) {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules() {\n  const mainPaths = require.main && require.main.paths || [];\n  const paths = getPaths();\n  const infos = {};\n  const seen = {};\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = () => {\n      const orig = dir;\n      dir = dirname(orig);\n      if (!dir || orig === dir || seen[orig]) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n      const pkgfile = join(orig, 'package.json');\n      seen[orig] = true;\n      if (!existsSync(pkgfile)) {\n        return updir();\n      }\n      try {\n        const info = JSON.parse(readFileSync(pkgfile, 'utf8'));\n        infos[info.name] = info.version;\n      } catch (_oO) {\n        // no-empty\n      }\n    };\n    updir();\n  });\n  return infos;\n}\n\n/** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\nfunction _getModules() {\n  if (!moduleCache) {\n    moduleCache = collectModules();\n  }\n  return moduleCache;\n}\nconst _modulesIntegration = () => {\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {},\n    // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event) {\n      event.modules = {\n        ...event.modules,\n        ..._getModules()\n      };\n      return event;\n    }\n  };\n};\nconst modulesIntegration = defineIntegration(_modulesIntegration);\n\n/**\n * Add node modules / packages to the event.\n * @deprecated Use `modulesIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst Modules = convertIntegrationFnToClass(INTEGRATION_NAME, modulesIntegration);\n\n// eslint-disable-next-line deprecation/deprecation\n\nexport { Modules, modulesIntegration };","map":{"version":3,"names":["moduleCache","INTEGRATION_NAME","getPaths","require","cache","Object","keys","e","collectModules","mainPaths","main","paths","infos","seen","forEach","path","dir","updir","orig","dirname","undefined","indexOf","pkgfile","join","existsSync","info","JSON","parse","readFileSync","name","version","_oO","_getModules","_modulesIntegration","setupOnce","processEvent","event","modules","modulesIntegration","defineIntegration","Modules","convertIntegrationFnToClass"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\integrations\\modules.ts"],"sourcesContent":["import { existsSync, readFileSync } from 'fs';\nimport { dirname, join } from 'path';\nimport { convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport type { Event, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\n\nlet moduleCache: { [key: string]: string };\n\nconst INTEGRATION_NAME = 'Modules';\n\n/** Extract information about paths */\nfunction getPaths(): string[] {\n  try {\n    return require.cache ? Object.keys(require.cache as Record<string, unknown>) : [];\n  } catch (e) {\n    return [];\n  }\n}\n\n/** Extract information about package.json modules */\nfunction collectModules(): {\n  [name: string]: string;\n} {\n  const mainPaths = (require.main && require.main.paths) || [];\n  const paths = getPaths();\n  const infos: {\n    [name: string]: string;\n  } = {};\n  const seen: {\n    [path: string]: boolean;\n  } = {};\n\n  paths.forEach(path => {\n    let dir = path;\n\n    /** Traverse directories upward in the search of package.json file */\n    const updir = (): void | (() => void) => {\n      const orig = dir;\n      dir = dirname(orig);\n\n      if (!dir || orig === dir || seen[orig]) {\n        return undefined;\n      }\n      if (mainPaths.indexOf(dir) < 0) {\n        return updir();\n      }\n\n      const pkgfile = join(orig, 'package.json');\n      seen[orig] = true;\n\n      if (!existsSync(pkgfile)) {\n        return updir();\n      }\n\n      try {\n        const info = JSON.parse(readFileSync(pkgfile, 'utf8')) as {\n          name: string;\n          version: string;\n        };\n        infos[info.name] = info.version;\n      } catch (_oO) {\n        // no-empty\n      }\n    };\n\n    updir();\n  });\n\n  return infos;\n}\n\n/** Fetches the list of modules and the versions loaded by the entry file for your node.js app. */\nfunction _getModules(): { [key: string]: string } {\n  if (!moduleCache) {\n    moduleCache = collectModules();\n  }\n  return moduleCache;\n}\n\nconst _modulesIntegration = (() => {\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    processEvent(event) {\n      event.modules = {\n        ...event.modules,\n        ..._getModules(),\n      };\n\n      return event;\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const modulesIntegration = defineIntegration(_modulesIntegration);\n\n/**\n * Add node modules / packages to the event.\n * @deprecated Use `modulesIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Modules = convertIntegrationFnToClass(INTEGRATION_NAME, modulesIntegration) as IntegrationClass<\n  Integration & { processEvent: (event: Event) => Event }\n>;\n\n// eslint-disable-next-line deprecation/deprecation\nexport type Modules = typeof Modules;\n"],"mappings":";;;AAKA,IAAIA,WAAW;AAEf,MAAMC,gBAAA,GAAmB,SAAS;;AAElC;AACA,SAASC,QAAQA,CAAA,EAAa;EAC5B,IAAI;IACF,OAAOC,OAAO,CAACC,KAAA,GAAQC,MAAM,CAACC,IAAI,CAACH,OAAO,CAACC,KAAA,CAAkC,GAAE,EAAE;EACrF,CAAI,QAAOG,CAAC,EAAE;IACV,OAAO,EAAE;EACb;AACA;;AAEA;AACA,SAASC,cAAcA,CAAA,EAErB;EACA,MAAMC,SAAU,GAAGN,OAAO,CAACO,IAAK,IAAGP,OAAO,CAACO,IAAI,CAACC,KAAK,IAAK,EAAE;EAC5D,MAAMA,KAAA,GAAQT,QAAQ,EAAE;EACxB,MAAMU,KAAK,GAEP,EAAE;EACN,MAAMC,IAAI,GAEN,EAAE;EAENF,KAAK,CAACG,OAAO,CAACC,IAAA,IAAQ;IACpB,IAAIC,GAAI,GAAED,IAAI;;IAElB;IACI,MAAME,KAAA,GAAQA,CAAA,KAA2B;MACvC,MAAMC,IAAK,GAAEF,GAAG;MAChBA,GAAI,GAAEG,OAAO,CAACD,IAAI,CAAC;MAEnB,IAAI,CAACF,GAAA,IAAOE,IAAA,KAASF,GAAA,IAAOH,IAAI,CAACK,IAAI,CAAC,EAAE;QACtC,OAAOE,SAAS;MACxB;MACM,IAAIX,SAAS,CAACY,OAAO,CAACL,GAAG,IAAI,CAAC,EAAE;QAC9B,OAAOC,KAAK,EAAE;MACtB;MAEM,MAAMK,OAAA,GAAUC,IAAI,CAACL,IAAI,EAAE,cAAc,CAAC;MAC1CL,IAAI,CAACK,IAAI,IAAI,IAAI;MAEjB,IAAI,CAACM,UAAU,CAACF,OAAO,CAAC,EAAE;QACxB,OAAOL,KAAK,EAAE;MACtB;MAEM,IAAI;QACF,MAAMQ,IAAA,GAAOC,IAAI,CAACC,KAAK,CAACC,YAAY,CAACN,OAAO,EAAE,MAAM,CAAC,CAAE;QAIvDV,KAAK,CAACa,IAAI,CAACI,IAAI,CAAE,GAAEJ,IAAI,CAACK,OAAO;MACvC,CAAQ,QAAOC,GAAG,EAAE;QACpB;MAAA;IAEA,CAAK;IAEDd,KAAK,EAAE;EACX,CAAG,CAAC;EAEF,OAAOL,KAAK;AACd;;AAEA;AACA,SAASoB,WAAWA,CAAA,EAA8B;EAChD,IAAI,CAAChC,WAAW,EAAE;IAChBA,WAAY,GAAEQ,cAAc,EAAE;EAClC;EACE,OAAOR,WAAW;AACpB;AAEA,MAAMiC,mBAAoB,GAAGA,CAAA,KAAM;EACjC,OAAO;IACLJ,IAAI,EAAE5B,gBAAgB;IAC1B;IACIiC,SAASA,CAAA,EAAG,EAAE;IAAA;IACdC,YAAYA,CAACC,KAAK,EAAE;MAClBA,KAAK,CAACC,OAAA,GAAU;QACd,GAAGD,KAAK,CAACC,OAAO;QAChB,GAAGL,WAAW;MACtB,CAAO;MAED,OAAOI,KAAK;IAClB;EACA,CAAG;AACH,CAAG;MAEUE,kBAAmB,GAAEC,iBAAiB,CAACN,mBAAmB;;AAEvE;AACA;AACA;AACA;AACA;AACO,MAAMO,OAAA,GAAUC,2BAA2B,CAACxC,gBAAgB,EAAEqC,kBAAkB,CAAE;;AAIzF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}