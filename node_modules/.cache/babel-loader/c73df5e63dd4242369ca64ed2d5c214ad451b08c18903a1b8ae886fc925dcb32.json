{"ast":null,"code":"import * as os from 'os';\nimport { TextEncoder } from 'util';\nimport { ServerRuntimeClient, applySdkMetadata } from '@sentry/core';\n\n/**\n * The Sentry Node SDK Client.\n *\n * @see NodeClientOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nclass NodeClient extends ServerRuntimeClient {\n  /**\n   * Creates a new Node SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  constructor(options) {\n    applySdkMetadata(options, 'node');\n\n    // Until node supports global TextEncoder in all versions we support, we are forced to pass it from util\n    options.transportOptions = {\n      textEncoder: new TextEncoder(),\n      ...options.transportOptions\n    };\n    const clientOptions = {\n      ...options,\n      platform: 'node',\n      runtime: {\n        name: 'node',\n        version: global.process.version\n      },\n      serverName: options.serverName || global.process.env.SENTRY_NAME || os.hostname()\n    };\n    super(clientOptions);\n  }\n}\nexport { NodeClient };","map":{"version":3,"names":["NodeClient","ServerRuntimeClient","constructor","options","applySdkMetadata","transportOptions","textEncoder","TextEncoder","clientOptions","platform","runtime","name","version","global","process","serverName","env","SENTRY_NAME","os","hostname"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\client.ts"],"sourcesContent":["import * as os from 'os';\nimport { TextEncoder } from 'util';\nimport type { ServerRuntimeClientOptions } from '@sentry/core';\nimport { ServerRuntimeClient, applySdkMetadata } from '@sentry/core';\n\nimport type { NodeClientOptions } from './types';\n\n/**\n * The Sentry Node SDK Client.\n *\n * @see NodeClientOptions for documentation on configuration options.\n * @see SentryClient for usage documentation.\n */\nexport class NodeClient extends ServerRuntimeClient<NodeClientOptions> {\n  /**\n   * Creates a new Node SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: NodeClientOptions) {\n    applySdkMetadata(options, 'node');\n\n    // Until node supports global TextEncoder in all versions we support, we are forced to pass it from util\n    options.transportOptions = {\n      textEncoder: new TextEncoder(),\n      ...options.transportOptions,\n    };\n\n    const clientOptions: ServerRuntimeClientOptions = {\n      ...options,\n      platform: 'node',\n      runtime: { name: 'node', version: global.process.version },\n      serverName: options.serverName || global.process.env.SENTRY_NAME || os.hostname(),\n    };\n\n    super(clientOptions);\n  }\n}\n"],"mappings":";;;;AAOA;AACA;AACA;AACA;AACA;AACA;AACO,MAAMA,UAAA,SAAmBC,mBAAmB,CAAoB;EACvE;AACA;AACA;AACA;EACSC,WAAWA,CAACC,OAAO,EAAqB;IAC7CC,gBAAgB,CAACD,OAAO,EAAE,MAAM,CAAC;;IAErC;IACIA,OAAO,CAACE,gBAAA,GAAmB;MACzBC,WAAW,EAAE,IAAIC,WAAW,EAAE;MAC9B,GAAGJ,OAAO,CAACE;IACjB,CAAK;IAED,MAAMG,aAAa,GAA+B;MAChD,GAAGL,OAAO;MACVM,QAAQ,EAAE,MAAM;MAChBC,OAAO,EAAE;QAAEC,IAAI,EAAE,MAAM;QAAEC,OAAO,EAAEC,MAAM,CAACC,OAAO,CAACF;MAAA,CAAS;MAC1DG,UAAU,EAAEZ,OAAO,CAACY,UAAW,IAAGF,MAAM,CAACC,OAAO,CAACE,GAAG,CAACC,WAAY,IAAGC,EAAE,CAACC,QAAQ;IACrF,CAAK;IAED,KAAK,CAACX,aAAa,CAAC;EACxB;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}