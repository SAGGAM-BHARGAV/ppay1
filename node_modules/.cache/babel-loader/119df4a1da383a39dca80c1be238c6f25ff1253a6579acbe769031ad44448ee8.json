{"ast":null,"code":"import * as http from 'http';\nimport { URL } from 'url';\nimport { defineIntegration, convertIntegrationFnToClass } from '@sentry/core';\nimport { logger, serializeEnvelope } from '@sentry/utils';\nconst INTEGRATION_NAME = 'Spotlight';\nconst _spotlightIntegration = (options = {}) => {\n  const _options = {\n    sidecarUrl: options.sidecarUrl || 'http://localhost:8969/stream'\n  };\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {},\n    // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      if (typeof process === 'object' && process.env && process.env.NODE_ENV !== 'development') {\n        logger.warn(\"[Spotlight] It seems you're not in dev mode. Do you really want to have Spotlight enabled?\");\n      }\n      connectToSpotlight(client, _options);\n    }\n  };\n};\nconst spotlightIntegration = defineIntegration(_spotlightIntegration);\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n *\n * Important: This integration only works with Node 18 or newer.\n *\n * @deprecated Use `spotlightIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst Spotlight = convertIntegrationFnToClass(INTEGRATION_NAME, spotlightIntegration);\n\n// eslint-disable-next-line deprecation/deprecation\n\nfunction connectToSpotlight(client, options) {\n  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);\n  if (!spotlightUrl) {\n    return;\n  }\n  let failedRequests = 0;\n  if (typeof client.on !== 'function') {\n    logger.warn('[Spotlight] Cannot connect to spotlight due to missing method on SDK client (`client.on`)');\n    return;\n  }\n  client.on('beforeEnvelope', envelope => {\n    if (failedRequests > 3) {\n      logger.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests');\n      return;\n    }\n    const serializedEnvelope = serializeEnvelope(envelope);\n    const request = getNativeHttpRequest();\n    const req = request({\n      method: 'POST',\n      path: spotlightUrl.pathname,\n      hostname: spotlightUrl.hostname,\n      port: spotlightUrl.port,\n      headers: {\n        'Content-Type': 'application/x-sentry-envelope'\n      }\n    }, res => {\n      res.on('data', () => {\n        // Drain socket\n      });\n      res.on('end', () => {\n        // Drain socket\n      });\n      res.setEncoding('utf8');\n    });\n    req.on('error', () => {\n      failedRequests++;\n      logger.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar');\n    });\n    req.write(serializedEnvelope);\n    req.end();\n  });\n}\nfunction parseSidecarUrl(url) {\n  try {\n    return new URL(`${url}`);\n  } catch (e) {\n    logger.warn(`[Spotlight] Invalid sidecar URL: ${url}`);\n    return undefined;\n  }\n}\n\n/**\n * We want to get an unpatched http request implementation to avoid capturing our own calls.\n */\nfunction getNativeHttpRequest() {\n  const {\n    request\n  } = http;\n  if (isWrapped(request)) {\n    return request.__sentry_original__;\n  }\n  return request;\n}\nfunction isWrapped(impl) {\n  return '__sentry_original__' in impl;\n}\nexport { Spotlight, getNativeHttpRequest, spotlightIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","_spotlightIntegration","options","_options","sidecarUrl","name","setupOnce","setup","client","process","env","NODE_ENV","logger","warn","connectToSpotlight","spotlightIntegration","defineIntegration","Spotlight","convertIntegrationFnToClass","spotlightUrl","parseSidecarUrl","failedRequests","on","envelope","serializedEnvelope","serializeEnvelope","request","getNativeHttpRequest","req","method","path","pathname","hostname","port","headers","res","setEncoding","write","end","url","URL","e","undefined","http","isWrapped","__sentry_original__","impl"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\integrations\\spotlight.ts"],"sourcesContent":["import * as http from 'http';\nimport { URL } from 'url';\nimport { convertIntegrationFnToClass, defineIntegration } from '@sentry/core';\nimport type { Client, Envelope, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport { logger, serializeEnvelope } from '@sentry/utils';\n\ntype SpotlightConnectionOptions = {\n  /**\n   * Set this if the Spotlight Sidecar is not running on localhost:8969\n   * By default, the Url is set to http://localhost:8969/stream\n   */\n  sidecarUrl?: string;\n};\n\nconst INTEGRATION_NAME = 'Spotlight';\n\nconst _spotlightIntegration = ((options: Partial<SpotlightConnectionOptions> = {}) => {\n  const _options = {\n    sidecarUrl: options.sidecarUrl || 'http://localhost:8969/stream',\n  };\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      if (typeof process === 'object' && process.env && process.env.NODE_ENV !== 'development') {\n        logger.warn(\"[Spotlight] It seems you're not in dev mode. Do you really want to have Spotlight enabled?\");\n      }\n      connectToSpotlight(client, _options);\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const spotlightIntegration = defineIntegration(_spotlightIntegration);\n\n/**\n * Use this integration to send errors and transactions to Spotlight.\n *\n * Learn more about spotlight at https://spotlightjs.com\n *\n * Important: This integration only works with Node 18 or newer.\n *\n * @deprecated Use `spotlightIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const Spotlight = convertIntegrationFnToClass(INTEGRATION_NAME, spotlightIntegration) as IntegrationClass<\n  Integration & { setup: (client: Client) => void }\n> & {\n  new (\n    options?: Partial<{\n      sidecarUrl?: string;\n    }>,\n  ): Integration;\n};\n\n// eslint-disable-next-line deprecation/deprecation\nexport type Spotlight = typeof Spotlight;\n\nfunction connectToSpotlight(client: Client, options: Required<SpotlightConnectionOptions>): void {\n  const spotlightUrl = parseSidecarUrl(options.sidecarUrl);\n  if (!spotlightUrl) {\n    return;\n  }\n\n  let failedRequests = 0;\n\n  if (typeof client.on !== 'function') {\n    logger.warn('[Spotlight] Cannot connect to spotlight due to missing method on SDK client (`client.on`)');\n    return;\n  }\n\n  client.on('beforeEnvelope', (envelope: Envelope) => {\n    if (failedRequests > 3) {\n      logger.warn('[Spotlight] Disabled Sentry -> Spotlight integration due to too many failed requests');\n      return;\n    }\n\n    const serializedEnvelope = serializeEnvelope(envelope);\n\n    const request = getNativeHttpRequest();\n    const req = request(\n      {\n        method: 'POST',\n        path: spotlightUrl.pathname,\n        hostname: spotlightUrl.hostname,\n        port: spotlightUrl.port,\n        headers: {\n          'Content-Type': 'application/x-sentry-envelope',\n        },\n      },\n      res => {\n        res.on('data', () => {\n          // Drain socket\n        });\n\n        res.on('end', () => {\n          // Drain socket\n        });\n        res.setEncoding('utf8');\n      },\n    );\n\n    req.on('error', () => {\n      failedRequests++;\n      logger.warn('[Spotlight] Failed to send envelope to Spotlight Sidecar');\n    });\n    req.write(serializedEnvelope);\n    req.end();\n  });\n}\n\nfunction parseSidecarUrl(url: string): URL | undefined {\n  try {\n    return new URL(`${url}`);\n  } catch {\n    logger.warn(`[Spotlight] Invalid sidecar URL: ${url}`);\n    return undefined;\n  }\n}\n\ntype HttpRequestImpl = typeof http.request;\ntype WrappedHttpRequest = HttpRequestImpl & { __sentry_original__: HttpRequestImpl };\n\n/**\n * We want to get an unpatched http request implementation to avoid capturing our own calls.\n */\nexport function getNativeHttpRequest(): HttpRequestImpl {\n  const { request } = http;\n  if (isWrapped(request)) {\n    return request.__sentry_original__;\n  }\n\n  return request;\n}\n\nfunction isWrapped(impl: HttpRequestImpl): impl is WrappedHttpRequest {\n  return '__sentry_original__' in impl;\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}