{"ast":null,"code":"import { defineIntegration, convertIntegrationFnToClass, getClient, captureException } from '@sentry/core';\nimport { consoleSandbox } from '@sentry/utils';\nimport { logAndExitProcess } from './utils/errorhandling.js';\nconst INTEGRATION_NAME = 'OnUnhandledRejection';\nconst _onUnhandledRejectionIntegration = (options = {}) => {\n  const mode = options.mode || 'warn';\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {},\n    // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      global.process.on('unhandledRejection', makeUnhandledPromiseHandler(client, {\n        mode\n      }));\n    }\n  };\n};\nconst onUnhandledRejectionIntegration = defineIntegration(_onUnhandledRejectionIntegration);\n\n/**\n * Global Promise Rejection handler.\n * @deprecated Use `onUnhandledRejectionIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nconst OnUnhandledRejection = convertIntegrationFnToClass(INTEGRATION_NAME, onUnhandledRejectionIntegration);\n\n// eslint-disable-next-line deprecation/deprecation\n\n/**\n * Send an exception with reason\n * @param reason string\n * @param promise promise\n *\n * Exported only for tests.\n */\nfunction makeUnhandledPromiseHandler(client, options) {\n  return function sendUnhandledPromise(reason, promise) {\n    if (getClient() !== client) {\n      return;\n    }\n    captureException(reason, {\n      originalException: promise,\n      captureContext: {\n        extra: {\n          unhandledPromiseRejection: true\n        }\n      },\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection'\n      }\n    });\n    handleRejection(reason, options);\n  };\n}\n\n/**\n * Handler for `mode` option\n\n */\nfunction handleRejection(\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nreason, options) {\n  // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n  const rejectionWarning = 'This error originated either by ' + 'throwing inside of an async function without a catch block, ' + 'or by rejecting a promise which was not handled with .catch().' + ' The promise rejected with the reason:';\n\n  /* eslint-disable no-console */\n  if (options.mode === 'warn') {\n    consoleSandbox(() => {\n      console.warn(rejectionWarning);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      console.error(reason && reason.stack ? reason.stack : reason);\n    });\n  } else if (options.mode === 'strict') {\n    consoleSandbox(() => {\n      console.warn(rejectionWarning);\n    });\n    logAndExitProcess(reason);\n  }\n  /* eslint-enable no-console */\n}\nexport { OnUnhandledRejection, makeUnhandledPromiseHandler, onUnhandledRejectionIntegration };","map":{"version":3,"names":["INTEGRATION_NAME","_onUnhandledRejectionIntegration","options","mode","name","setupOnce","setup","client","global","process","on","makeUnhandledPromiseHandler","onUnhandledRejectionIntegration","defineIntegration","OnUnhandledRejection","convertIntegrationFnToClass","sendUnhandledPromise","reason","promise","getClient","captureException","originalException","captureContext","extra","unhandledPromiseRejection","mechanism","handled","type","handleRejection","rejectionWarning","consoleSandbox","console","warn","error","stack","logAndExitProcess"],"sources":["C:\\Users\\kotha\\OneDrive\\Desktop\\3\\vbn\\node_modules\\@sentry\\src\\integrations\\onunhandledrejection.ts"],"sourcesContent":["import { captureException, convertIntegrationFnToClass, defineIntegration, getClient } from '@sentry/core';\nimport type { Client, Integration, IntegrationClass, IntegrationFn } from '@sentry/types';\nimport { consoleSandbox } from '@sentry/utils';\n\nimport { logAndExitProcess } from './utils/errorhandling';\n\ntype UnhandledRejectionMode = 'none' | 'warn' | 'strict';\n\ninterface OnUnhandledRejectionOptions {\n  /**\n   * Option deciding what to do after capturing unhandledRejection,\n   * that mimicks behavior of node's --unhandled-rejection flag.\n   */\n  mode: UnhandledRejectionMode;\n}\n\nconst INTEGRATION_NAME = 'OnUnhandledRejection';\n\nconst _onUnhandledRejectionIntegration = ((options: Partial<OnUnhandledRejectionOptions> = {}) => {\n  const mode = options.mode || 'warn';\n\n  return {\n    name: INTEGRATION_NAME,\n    // TODO v8: Remove this\n    setupOnce() {}, // eslint-disable-line @typescript-eslint/no-empty-function\n    setup(client) {\n      global.process.on('unhandledRejection', makeUnhandledPromiseHandler(client, { mode }));\n    },\n  };\n}) satisfies IntegrationFn;\n\nexport const onUnhandledRejectionIntegration = defineIntegration(_onUnhandledRejectionIntegration);\n\n/**\n * Global Promise Rejection handler.\n * @deprecated Use `onUnhandledRejectionIntegration()` instead.\n */\n// eslint-disable-next-line deprecation/deprecation\nexport const OnUnhandledRejection = convertIntegrationFnToClass(\n  INTEGRATION_NAME,\n  onUnhandledRejectionIntegration,\n) as IntegrationClass<Integration & { setup: (client: Client) => void }> & {\n  new (options?: Partial<{ mode: UnhandledRejectionMode }>): Integration;\n};\n\n// eslint-disable-next-line deprecation/deprecation\nexport type OnUnhandledRejection = typeof OnUnhandledRejection;\n\n/**\n * Send an exception with reason\n * @param reason string\n * @param promise promise\n *\n * Exported only for tests.\n */\nexport function makeUnhandledPromiseHandler(\n  client: Client,\n  options: OnUnhandledRejectionOptions,\n): (reason: unknown, promise: unknown) => void {\n  return function sendUnhandledPromise(reason: unknown, promise: unknown): void {\n    if (getClient() !== client) {\n      return;\n    }\n\n    captureException(reason, {\n      originalException: promise,\n      captureContext: {\n        extra: { unhandledPromiseRejection: true },\n      },\n      mechanism: {\n        handled: false,\n        type: 'onunhandledrejection',\n      },\n    });\n\n    handleRejection(reason, options);\n  };\n}\n\n/**\n * Handler for `mode` option\n\n */\nfunction handleRejection(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  reason: any,\n  options: OnUnhandledRejectionOptions,\n): void {\n  // https://github.com/nodejs/node/blob/7cf6f9e964aa00772965391c23acda6d71972a9a/lib/internal/process/promises.js#L234-L240\n  const rejectionWarning =\n    'This error originated either by ' +\n    'throwing inside of an async function without a catch block, ' +\n    'or by rejecting a promise which was not handled with .catch().' +\n    ' The promise rejected with the reason:';\n\n  /* eslint-disable no-console */\n  if (options.mode === 'warn') {\n    consoleSandbox(() => {\n      console.warn(rejectionWarning);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      console.error(reason && reason.stack ? reason.stack : reason);\n    });\n  } else if (options.mode === 'strict') {\n    consoleSandbox(() => {\n      console.warn(rejectionWarning);\n    });\n    logAndExitProcess(reason);\n  }\n  /* eslint-enable no-console */\n}\n"],"mappings":";;;AAgBA,MAAMA,gBAAA,GAAmB,sBAAsB;AAE/C,MAAMC,gCAAA,GAAoCA,CAACC,OAAO,GAAyC,EAAE,KAAK;EAChG,MAAMC,IAAK,GAAED,OAAO,CAACC,IAAA,IAAQ,MAAM;EAEnC,OAAO;IACLC,IAAI,EAAEJ,gBAAgB;IAC1B;IACIK,SAASA,CAAA,EAAG,EAAE;IAAA;IACdC,KAAKA,CAACC,MAAM,EAAE;MACZC,MAAM,CAACC,OAAO,CAACC,EAAE,CAAC,oBAAoB,EAAEC,2BAA2B,CAACJ,MAAM,EAAE;QAAEJ;MAAK,CAAC,CAAC,CAAC;IAC5F;EACA,CAAG;AACH,CAAG;MAEUS,+BAAgC,GAAEC,iBAAiB,CAACZ,gCAAgC;;AAEjG;AACA;AACA;AACA;AACA;AACO,MAAMa,oBAAqB,GAAEC,2BAA2B,CAC7Df,gBAAgB,EAChBY,+BACF,CAAE;;AAIF;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,SAASD,2BAA2BA,CACzCJ,MAAM,EACNL,OAAO,EACsC;EAC7C,OAAO,SAASc,oBAAoBA,CAACC,MAAM,EAAWC,OAAO,EAAiB;IAC5E,IAAIC,SAAS,EAAG,KAAIZ,MAAM,EAAE;MAC1B;IACN;IAEIa,gBAAgB,CAACH,MAAM,EAAE;MACvBI,iBAAiB,EAAEH,OAAO;MAC1BI,cAAc,EAAE;QACdC,KAAK,EAAE;UAAEC,yBAAyB,EAAE;QAAA;MAC5C,CAAO;MACDC,SAAS,EAAE;QACTC,OAAO,EAAE,KAAK;QACdC,IAAI,EAAE;MACd;IACA,CAAK,CAAC;IAEFC,eAAe,CAACX,MAAM,EAAEf,OAAO,CAAC;EACpC,CAAG;AACH;;AAEA;AACA;AACA;AACA;AACA,SAAS0B,eAAeA;AACxB;AACEX,MAAM,EACNf,OAAO,EACD;EACR;EACE,MAAM2B,gBAAiB,GACrB,kCAAmC,GACnC,8DAA+D,GAC/D,gEAAiE,GACjE,wCAAwC;;EAE5C;EACE,IAAI3B,OAAO,CAACC,IAAK,KAAI,MAAM,EAAE;IAC3B2B,cAAc,CAAC,MAAM;MACnBC,OAAO,CAACC,IAAI,CAACH,gBAAgB,CAAC;MACpC;MACME,OAAO,CAACE,KAAK,CAAChB,MAAA,IAAUA,MAAM,CAACiB,KAAA,GAAQjB,MAAM,CAACiB,KAAM,GAAEjB,MAAM,CAAC;IACnE,CAAK,CAAC;EACN,CAAE,MAAO,IAAIf,OAAO,CAACC,IAAA,KAAS,QAAQ,EAAE;IACpC2B,cAAc,CAAC,MAAM;MACnBC,OAAO,CAACC,IAAI,CAACH,gBAAgB,CAAC;IACpC,CAAK,CAAC;IACFM,iBAAiB,CAAClB,MAAM,CAAC;EAC7B;EACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}